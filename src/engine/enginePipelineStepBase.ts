/**
 * Base implementation of engine pipeline step.
 */
import { UniteConfiguration } from "../configuration/models/unite/uniteConfiguration";
import { IDisplay } from "../interfaces/IDisplay";
import { IEnginePipelineStep } from "../interfaces/IEnginePipelineStep";
import { IFileSystem } from "../interfaces/IFileSystem";
import { ILogger } from "../interfaces/ILogger";
import { EngineVariables } from "./engineVariables";

export abstract class EnginePipelineStepBase implements IEnginePipelineStep {
    public static MARKER: string = "Generated by UniteJS";

    public abstract process(logger: ILogger, display: IDisplay, fileSystem: IFileSystem, uniteConfiguration: UniteConfiguration, engineVariables: EngineVariables): Promise<number>;

    public log(logger: ILogger, display: IDisplay, message: string, args?: { [id: string]: any}): void {
        display.log(message, args);
        logger.log(message, args);
    }

    public error(logger: ILogger, display: IDisplay, message: string, err: any, args?: { [id: string]: any}): void {
        display.error(message, err, args);
        logger.error(message, args);
    }

    public async copyFile(logger: ILogger, display: IDisplay, fileSystem: IFileSystem,
                          sourceFolder: string, sourceFilename: string, destFolder: string, destFilename: string): Promise<void> {
        const hasMarker = await this.fileHasMarker(fileSystem, destFolder, destFilename);

        if (hasMarker) {
            this.log(logger, display, "Copying " + sourceFilename, { from: sourceFolder, to: destFolder });

            const lines = await fileSystem.fileReadLines(sourceFolder, sourceFilename);
            await fileSystem.fileWriteLines(destFolder, destFilename, lines);
        } else {
            this.log(logger, display, "Skipping " + sourceFilename + " as it has no marker", { from: sourceFolder, to: destFolder });
        }
    }

    public wrapMarker(before: string, after: string): string {
        return before + EnginePipelineStepBase.MARKER + after;
    }

    public async fileHasMarker(fileSystem: IFileSystem, folder: string, filename: string): Promise<boolean> {
        let hasMarker = true;

        try {
            const exists = await fileSystem.fileExists(folder, filename);
            if (exists) {
                const existingLines = await fileSystem.fileReadLines(folder, filename);
                /* Test the last few lines in case there are line breaks */
                if (existingLines) {
                    hasMarker = false;
                    for (let i = existingLines.length - 1; i >= 0 && i >= existingLines.length - 5 && !hasMarker; i--) {
                        hasMarker = existingLines[i].indexOf(EnginePipelineStepBase.MARKER) >= 0;
                    }
                }
            }
            return hasMarker;
        } catch (err) {
            return true;
        }
    }
}
