/**
 * Pipeline step to generate scaffolding for app.
 */
import { UniteConfiguration } from "../configuration/models/unite/uniteConfiguration";
import { UniteSourceLanguage } from "../configuration/models/unite/uniteSourceLanguage";
import { EnginePipelineStepBase } from "../engine/enginePipelineStepBase";
import { EngineVariables } from "../engine/engineVariables";
import { IDisplay } from "../interfaces/IDisplay";
import { IFileSystem } from "../interfaces/IFileSystem";
import { ILogger } from "../interfaces/ILogger";

export class GenerateAppScaffold extends EnginePipelineStepBase {
    public async process(logger: ILogger, display: IDisplay, fileSystem: IFileSystem, uniteConfiguration: UniteConfiguration, engineVariables: EngineVariables): Promise<number> {
        engineVariables.appSourceFolder = fileSystem.directoryPathCombine(uniteConfiguration.outputDirectory, "\\src");
        try {
            super.log(logger, display, "Creating App Source Directory", { appSourceFolder: engineVariables.appSourceFolder });
            await fileSystem.directoryCreate(engineVariables.appSourceFolder);
        } catch (err) {
            super.error(logger, display, "Creating App Source Directory failed", err, { appSourceFolder: engineVariables.appSourceFolder });
            return 1;
        }

        const ext = engineVariables.uniteSourceLanguage === "JavaScript" ? "js" : "ts";
        const quote = engineVariables.uniteSourceLanguage === "JavaScript" ? "'" : "\"";

        try {
            super.log(logger, display, "Generating Main in", { appSourceFolder: engineVariables.appSourceFolder });

            const lines: string[] = [];

            this.buildMain(lines, quote, engineVariables.uniteSourceLanguage);

            await fileSystem.fileWriteLines(engineVariables.appSourceFolder, "main." + ext, lines);
        } catch (err) {
            super.error(logger, display, "Generating Main failed", err, { appSourceFolder: engineVariables.appSourceFolder });
            return 1;
        }

        try {
            const fileExists = await fileSystem.fileExists(engineVariables.appSourceFolder, "app." + ext);
            if (!fileExists) {
                super.log(logger, display, "Generating App in", { appSourceFolder: engineVariables.appSourceFolder });

                const lines: string[] = [];

                this.buildApp(lines, quote, engineVariables.uniteSourceLanguage);

                await fileSystem.fileWriteLines(engineVariables.appSourceFolder, "app." + ext, lines);
            }
            return 0;
        } catch (err) {
            super.error(logger, display, "Generating App failed", err, { appSourceFolder: engineVariables.appSourceFolder });
            return 1;
        }
    }

    private buildMain(lines: string[], quote: string, language: UniteSourceLanguage): void {
        lines.push("/**");
        lines.push(" * Main entry point for app.");
        lines.push(" * This file is automatically generated by UniteJS, any changes could be lost.");
        lines.push(" */");
        lines.push("import { App } from " + quote + "./app" + quote + ";");
        lines.push("");
        lines.push("export function entryPoint() {");
        lines.push("    const app = new App();");
        lines.push("    app.run();");
        lines.push("}");
    }

    private buildApp(lines: string[], quote: string, language: UniteSourceLanguage): void {
        lines.push("/**");
        lines.push(" * Main application class.");
        lines.push(" */");
        lines.push("export class App {");
        if (language === "JavaScript") {
            lines.push("    run() {");
        } else {
            lines.push("    public run(): void {");
        }
        lines.push("        document.body.innerHTML = " + quote + "Hello " + language + " UniteJS World!" + quote + ";");
        lines.push("    }");
        lines.push("}");
    }
}