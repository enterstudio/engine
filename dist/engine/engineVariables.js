"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uniteClientPackage_1 = require("../configuration/models/unite/uniteClientPackage");
class EngineVariables {
    constructor() {
        this._configuration = {};
        this.buildTranspileInclude = [];
        this.buildTranspilePreBuild = [];
        this.buildTranspilePostBuild = [];
        this._requiredDevDependencies = [];
        this._removedDevDependencies = [];
        this._requiredClientPackages = {};
        this._removedClientPackages = {};
    }
    setConfiguration(name, config) {
        this._configuration[name] = config;
    }
    getConfiguration(name) {
        return this._configuration[name];
    }
    setupDirectories(fileSystem, rootFolder) {
        this.rootFolder = rootFolder;
        this.wwwRootFolder = fileSystem.pathCombine(this.rootFolder, "www");
        this.packagedRootFolder = fileSystem.pathCombine(this.rootFolder, "packaged");
        this.www = {
            srcFolder: fileSystem.pathCombine(this.wwwRootFolder, "src"),
            distFolder: fileSystem.pathCombine(this.wwwRootFolder, "dist"),
            cssSrcFolder: fileSystem.pathCombine(this.wwwRootFolder, "cssSrc"),
            cssDistFolder: fileSystem.pathCombine(this.wwwRootFolder, "css"),
            e2eTestFolder: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e"),
            e2eTestSrcFolder: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e/src"),
            e2eTestDistFolder: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e/dist"),
            unitTestFolder: fileSystem.pathCombine(this.wwwRootFolder, "test/unit"),
            unitTestSrcFolder: fileSystem.pathCombine(this.wwwRootFolder, "test/unit/src"),
            unitTestDistFolder: fileSystem.pathCombine(this.wwwRootFolder, "test/unit/dist"),
            reportsFolder: fileSystem.pathCombine(this.wwwRootFolder, "test/reports"),
            assetsFolder: fileSystem.pathCombine(this.wwwRootFolder, "assets"),
            assetsSrcFolder: fileSystem.pathCombine(this.wwwRootFolder, "assetsSrc"),
            buildFolder: fileSystem.pathCombine(this.wwwRootFolder, "build"),
            packageFolder: fileSystem.pathCombine(this.wwwRootFolder, "node_modules")
        };
    }
    initialisePackages(clientPackages) {
        this._requiredClientPackages = clientPackages || {};
    }
    toggleClientPackage(name, main, mainMinified, testingAdditions, preload, includeMode, scriptIncludeMode, isPackage, assets, map, loaders, isModuleLoader, required) {
        if (required) {
            this.addClientPackage(name, main, mainMinified, testingAdditions, preload, includeMode, scriptIncludeMode, isPackage, assets, map, loaders, isModuleLoader);
        }
        else {
            this.removeClientPackage(name);
        }
    }
    addClientPackage(name, main, mainMinified, testingAdditions, preload, includeMode, scriptIncludeMode, isPackage, assets, map, loaders, isModuleLoader) {
        const clientPackage = new uniteClientPackage_1.UniteClientPackage();
        clientPackage.name = name;
        clientPackage.includeMode = includeMode;
        clientPackage.preload = preload;
        clientPackage.main = main;
        clientPackage.mainMinified = mainMinified;
        clientPackage.testingAdditions = testingAdditions;
        clientPackage.isPackage = isPackage;
        clientPackage.version = this.findDependencyVersion(name);
        clientPackage.assets = assets;
        clientPackage.map = map;
        clientPackage.loaders = loaders;
        clientPackage.scriptIncludeMode = scriptIncludeMode;
        clientPackage.isModuleLoader = isModuleLoader;
        this._requiredClientPackages[name] = clientPackage;
    }
    removeClientPackage(name) {
        this._removedClientPackages[name] = undefined;
    }
    toggleDevDependency(dependencies, required) {
        if (required) {
            this.addDevDependency(dependencies);
        }
        else {
            this.removeDevDependency(dependencies);
        }
    }
    addDevDependency(dependencies) {
        dependencies.forEach(dep => {
            if (this._requiredDevDependencies.indexOf(dep) < 0) {
                this._requiredDevDependencies.push(dep);
            }
        });
    }
    removeDevDependency(dependencies) {
        dependencies.forEach(dep => {
            if (this._removedDevDependencies.indexOf(dep) < 0) {
                this._removedDevDependencies.push(dep);
            }
        });
    }
    buildDependencies(uniteConfiguration, packageJsonDependencies) {
        for (const key in this._removedClientPackages) {
            if (packageJsonDependencies[key]) {
                delete packageJsonDependencies[key];
            }
        }
        const addedTestDependencies = [];
        const removedTestDependencies = [];
        for (const pkg in this._requiredClientPackages) {
            uniteConfiguration.clientPackages[pkg] = this._requiredClientPackages[pkg];
            if (this._requiredClientPackages[pkg].includeMode === "app" || this._requiredClientPackages[pkg].includeMode === "both") {
                packageJsonDependencies[pkg] = this._requiredClientPackages[pkg].version;
                const idx = this._requiredDevDependencies.indexOf(pkg);
                if (idx >= 0) {
                    this._requiredDevDependencies.splice(idx, 1);
                    removedTestDependencies.push(pkg);
                }
            }
            else {
                addedTestDependencies.push(pkg);
            }
        }
        this.toggleDevDependency(addedTestDependencies, true);
        this.toggleDevDependency(removedTestDependencies, false);
    }
    buildDevDependencies(packageJsonDevDependencies) {
        this._removedDevDependencies.forEach(dependency => {
            if (packageJsonDevDependencies[dependency]) {
                delete packageJsonDevDependencies[dependency];
            }
        });
        this._requiredDevDependencies.forEach(requiredDependency => {
            packageJsonDevDependencies[requiredDependency] = this.findDependencyVersion(requiredDependency);
        });
    }
    findDependencyVersion(requiredDependency) {
        if (this.enginePackageJson && this.enginePackageJson.peerDependencies) {
            if (this.enginePackageJson.peerDependencies[requiredDependency]) {
                return this.enginePackageJson.peerDependencies[requiredDependency];
            }
            else {
                throw new Error(`Missing Dependency '${requiredDependency}'`);
            }
        }
        else {
            throw new Error("Dependency Versions missing");
        }
    }
}
exports.EngineVariables = EngineVariables;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
