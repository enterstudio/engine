"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class EngineVariables {
    constructor() {
        this._configuration = {};
        this.syntheticImport = "";
        this.moduleId = "";
        this.buildTranspileInclude = [];
        this.buildTranspilePreBuild = [];
        this.buildTranspilePostBuild = [];
        this._requiredDevDependencies = [];
        this._removedDevDependencies = [];
        this._requiredClientPackages = {};
        this._removedClientPackages = {};
        this._existingClientPackages = {};
        this.additionalCompletionMessages = [];
    }
    setConfiguration(name, config) {
        this._configuration[name] = config;
    }
    getConfiguration(name) {
        return this._configuration[name];
    }
    setupDirectories(fileSystem, rootFolder) {
        this.rootFolder = rootFolder;
        this.wwwRootFolder = fileSystem.pathCombine(this.rootFolder, "www");
        this.packagedRootFolder = fileSystem.pathCombine(this.rootFolder, "packaged");
        this.platformRootFolder = fileSystem.pathCombine(this.rootFolder, "platform");
        this.docsRootFolder = fileSystem.pathCombine(this.rootFolder, "docs");
        this.www = {
            src: fileSystem.pathCombine(this.wwwRootFolder, "src"),
            dist: fileSystem.pathCombine(this.wwwRootFolder, "dist"),
            css: fileSystem.pathCombine(this.wwwRootFolder, "cssSrc"),
            cssDist: fileSystem.pathCombine(this.wwwRootFolder, "css"),
            e2eRoot: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e"),
            e2e: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e/src"),
            e2eDist: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e/dist"),
            unitRoot: fileSystem.pathCombine(this.wwwRootFolder, "test/unit"),
            unit: fileSystem.pathCombine(this.wwwRootFolder, "test/unit/src"),
            unitDist: fileSystem.pathCombine(this.wwwRootFolder, "test/unit/dist"),
            reports: fileSystem.pathCombine(this.wwwRootFolder, "test/reports"),
            assets: fileSystem.pathCombine(this.wwwRootFolder, "assets"),
            assetsSrc: fileSystem.pathCombine(this.wwwRootFolder, "assetsSrc"),
            build: fileSystem.pathCombine(this.wwwRootFolder, "build"),
            package: fileSystem.pathCombine(this.wwwRootFolder, "node_modules"),
            configuration: fileSystem.pathCombine(this.wwwRootFolder, "configuration")
        };
    }
    initialisePackages(clientPackages) {
        this._existingClientPackages = clientPackages;
    }
    toggleClientPackage(key, clientPackage, required) {
        if (required) {
            this.addClientPackage(key, clientPackage);
        }
        else {
            this.removeClientPackage(key, clientPackage);
        }
    }
    addClientPackage(key, clientPackage) {
        if (!clientPackage.version) {
            clientPackage.version = this.findDependencyVersion(clientPackage.name);
        }
        this._requiredClientPackages[key] = clientPackage;
    }
    removeClientPackage(key, clientPackage) {
        this._removedClientPackages[key] = clientPackage;
    }
    toggleDevDependency(dependencies, required) {
        if (required) {
            this.addDevDependency(dependencies);
        }
        else {
            this.removeDevDependency(dependencies);
        }
    }
    addDevDependency(dependencies) {
        dependencies.forEach(dep => {
            if (this._requiredDevDependencies.indexOf(dep) < 0) {
                this._requiredDevDependencies.push(dep);
            }
        });
    }
    removeDevDependency(dependencies) {
        dependencies.forEach(dep => {
            if (this._removedDevDependencies.indexOf(dep) < 0) {
                this._removedDevDependencies.push(dep);
            }
        });
    }
    buildDependencies(uniteConfiguration, packageJsonDependencies) {
        for (const key in this._removedClientPackages) {
            const pkg = this._removedClientPackages[key];
            if (packageJsonDependencies[pkg.name]) {
                delete packageJsonDependencies[pkg.name];
            }
            if (this._existingClientPackages[key] &&
                !this._existingClientPackages[key].hasOverrides) {
                delete this._existingClientPackages[key];
            }
        }
        for (const key in this._existingClientPackages) {
            const pkg = this._existingClientPackages[key];
            if (pkg.hasOverrides || !this._requiredClientPackages[key]) {
                this._requiredClientPackages[key] = pkg;
            }
        }
        const addedTestDependencies = [];
        const removedTestDependencies = [];
        for (const key in this._requiredClientPackages) {
            const pkg = this._requiredClientPackages[key];
            uniteConfiguration.clientPackages[key] = pkg;
            if (pkg.includeMode === "app" || pkg.includeMode === "both") {
                packageJsonDependencies[pkg.name] = pkg.version;
                const idx = this._requiredDevDependencies.indexOf(pkg.name);
                if (idx >= 0) {
                    this._requiredDevDependencies.splice(idx, 1);
                    removedTestDependencies.push(pkg.name);
                }
            }
            else {
                addedTestDependencies.push(pkg.name);
            }
        }
        this.toggleDevDependency(addedTestDependencies, true);
        this.toggleDevDependency(removedTestDependencies, false);
    }
    buildDevDependencies(packageJsonDevDependencies) {
        this._removedDevDependencies.forEach(dependency => {
            if (packageJsonDevDependencies[dependency]) {
                delete packageJsonDevDependencies[dependency];
            }
        });
        this._requiredDevDependencies.forEach(requiredDependency => {
            packageJsonDevDependencies[requiredDependency] = this.findDependencyVersion(requiredDependency);
        });
    }
    findDependencyVersion(requiredDependency) {
        if (this.engineDependencies) {
            if (this.engineDependencies[requiredDependency]) {
                return this.engineDependencies[requiredDependency];
            }
            else {
                throw new Error(`Missing Dependency '${requiredDependency}'`);
            }
        }
        else {
            throw new Error("Dependency Versions missing");
        }
    }
}
exports.EngineVariables = EngineVariables;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
