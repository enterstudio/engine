"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class EnginePipelineStepBase {
    prerequisites(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            return 0;
        });
    }
    copyFile(logger, fileSystem, sourceFolder, sourceFilename, destFolder, destFilename) {
        return __awaiter(this, void 0, void 0, function* () {
            const hasGeneratedMarker = yield this.fileHasGeneratedMarker(fileSystem, destFolder, destFilename);
            if (hasGeneratedMarker) {
                logger.info(`Copying ${sourceFilename}`, { from: sourceFolder, to: destFolder });
                const folderWithFile = fileSystem.pathCombine(destFolder, destFilename);
                const folderOnly = fileSystem.pathGetDirectory(folderWithFile);
                const dirExists = yield fileSystem.directoryExists(folderOnly);
                if (!dirExists) {
                    yield fileSystem.directoryCreate(folderOnly);
                }
                const lines = yield fileSystem.fileReadLines(sourceFolder, sourceFilename);
                yield fileSystem.fileWriteLines(destFolder, destFilename, lines);
            }
            else {
                logger.info(`Skipping ${sourceFilename} as it has no generated marker`, { from: sourceFolder, to: destFolder });
            }
        });
    }
    deleteFile(logger, fileSystem, folder, filename) {
        return __awaiter(this, void 0, void 0, function* () {
            const hasGeneratedMarker = yield this.fileHasGeneratedMarker(fileSystem, folder, filename);
            if (hasGeneratedMarker) {
                try {
                    const exists = yield fileSystem.fileExists(folder, filename);
                    if (exists) {
                        logger.info(`Deleting ${filename}`, { from: folder });
                        yield fileSystem.fileDelete(folder, filename);
                    }
                    return 0;
                }
                catch (err) {
                    logger.error(`Deleting ${filename} failed`, err);
                    return 1;
                }
            }
            else {
                logger.info(`Skipping Delete of ${filename} as it has no generated marker`, { from: folder });
                return 0;
            }
        });
    }
    wrapGeneratedMarker(before, after) {
        return before + EnginePipelineStepBase.MARKER + after;
    }
    fileHasGeneratedMarker(fileSystem, folder, filename) {
        return __awaiter(this, void 0, void 0, function* () {
            let hasMarker = true;
            try {
                const exists = yield fileSystem.fileExists(folder, filename);
                if (exists) {
                    const existingLines = yield fileSystem.fileReadLines(folder, filename);
                    // Test the last few lines in case there are line breaks
                    if (existingLines) {
                        hasMarker = false;
                        for (let i = existingLines.length - 1; i >= 0 && i >= existingLines.length - 5 && !hasMarker; i--) {
                            hasMarker = existingLines[i].indexOf(EnginePipelineStepBase.MARKER) >= 0;
                        }
                    }
                }
                return hasMarker;
            }
            catch (err) {
                return true;
            }
        });
    }
}
EnginePipelineStepBase.MARKER = "Generated by UniteJS";
exports.EnginePipelineStepBase = EnginePipelineStepBase;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
