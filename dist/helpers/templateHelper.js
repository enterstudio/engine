"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TemplateHelper {
    static generateSubstitutions(name) {
        const substitutions = {};
        const words = TemplateHelper.generateWords(name);
        if (words.length > 0) {
            substitutions[`gen-name-snake`] = TemplateHelper.createSnake(words);
            substitutions[`genNameCamel`] = TemplateHelper.createCamel(words);
            substitutions[`GenNamePascal`] = TemplateHelper.createPascal(words);
            substitutions[`Gen Name Human`] = TemplateHelper.createHuman(words);
        }
        return substitutions;
    }
    static generateWords(name) {
        const words = [];
        if (name !== undefined && name !== null) {
            const justAlphaNum = name.replace(/[^a-zA-Z0-9 ]/g, " ").trim();
            if (justAlphaNum.length > 0) {
                for (let i = 0; i < justAlphaNum.length; i++) {
                    // Is this lower or number
                    if (/[a-z0-9]/.test(justAlphaNum[i])) {
                        if (words.length === 0) {
                            // No words so push new word upper case of character
                            words.push(justAlphaNum[i].toUpperCase());
                        }
                        else {
                            // Does the current word have any length
                            if (words[words.length - 1].length === 0) {
                                // Zero length so append upper case
                                words[words.length - 1] += justAlphaNum[i].toUpperCase();
                            }
                            else {
                                // Already in word so just append
                                words[words.length - 1] += justAlphaNum[i];
                            }
                        }
                    }
                    else {
                        // Is this upper
                        if (/[A-Z]/.test(justAlphaNum[i])) {
                            // Are we already in a word?
                            if (words.length > 0 && words[words.length - 1].length > 0) {
                                // Yes, if it is already all caps just append
                                if (/^[^a-z]*$/.test(words[words.length - 1])) {
                                    // Current word all caps
                                    words[words.length - 1] += justAlphaNum[i];
                                }
                                else {
                                    // Current word is not all caps so start a new one
                                    words.push(justAlphaNum[i]);
                                }
                            }
                            else {
                                if (words.length > 0) {
                                    // Current word is empty so just append
                                    words[words.length - 1] += justAlphaNum[i];
                                }
                                else {
                                    // No words so start a new one
                                    words.push(justAlphaNum[i]);
                                }
                            }
                        }
                        else {
                            // Must be a space
                            if (words.length > 0 && words[words.length - 1].length > 0) {
                                // Already in a word so start a new one as long as it is not empty
                                words.push("");
                            }
                        }
                    }
                }
            }
        }
        return words;
    }
    static createSnake(words) {
        return words.join("-").toLowerCase();
    }
    static createPascal(words) {
        return words.join("");
    }
    static createHuman(words) {
        return words.join(" ");
    }
    static createCamel(words) {
        return words[0][0].toLowerCase() + words[0].substring(1) + words.slice(1).join("");
    }
    static replaceSubstitutions(substitutions, input) {
        let output = input;
        if (input !== null && input !== undefined && substitutions !== undefined && substitutions !== null) {
            Object.keys(substitutions).forEach(key => {
                let rep;
                if (Array.isArray(substitutions[key])) {
                    rep = substitutions[key];
                }
                else {
                    rep = [substitutions[key]];
                }
                output = output.replace(new RegExp(`${key}`, "gm"), rep.join("\r\n"));
            });
        }
        return output;
    }
    static createCodeSubstitutions(engineVariables) {
        return {
            "/\\* Synthetic Import \\*/ ": [engineVariables.syntheticImport],
            "\"genModuleId\"": [engineVariables.moduleId]
        };
    }
}
exports.TemplateHelper = TemplateHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
