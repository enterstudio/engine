"use strict";
/**
 * Template helper
 */
Object.defineProperty(exports, "__esModule", { value: true });
class TemplateHelper {
    static generateSubstitutions(prefix, name) {
        const substitutions = {};
        if (name !== undefined &&
            name !== null &&
            prefix !== undefined &&
            prefix !== null &&
            prefix.trim().length > 0) {
            const justAlphaNum = name.replace(/[^a-zA-Z0-9 ]/g, " ").trim();
            if (justAlphaNum.length > 0) {
                const words = [];
                for (let i = 0; i < justAlphaNum.length; i++) {
                    // Is this lower or number
                    if (/[a-z0-9]/.test(justAlphaNum[i])) {
                        if (words.length === 0) {
                            // No words so push new word upper case of character
                            words.push(justAlphaNum[i].toUpperCase());
                        }
                        else {
                            // Does the current word have any length
                            if (words[words.length - 1].length === 0) {
                                // Zero length so append upper case
                                words[words.length - 1] += justAlphaNum[i].toUpperCase();
                            }
                            else {
                                // Already in word so just append
                                words[words.length - 1] += justAlphaNum[i];
                            }
                        }
                    }
                    else {
                        // Is this upper
                        if (/[A-Z]/.test(justAlphaNum[i])) {
                            // Are we already in a word?
                            if (words.length > 0 && words[words.length - 1].length > 0) {
                                // Yes, if it is already all caps just append
                                if (/^[^a-z]*$/.test(words[words.length - 1])) {
                                    // Current word all caps
                                    words[words.length - 1] += justAlphaNum[i];
                                }
                                else {
                                    // Current word is not all caps so start a new one
                                    words.push(justAlphaNum[i]);
                                }
                            }
                            else {
                                if (words.length > 0) {
                                    // Current word is empty so just append
                                    words[words.length - 1] += justAlphaNum[i];
                                }
                                else {
                                    // No words so start a new one
                                    words.push(justAlphaNum[i]);
                                }
                            }
                        }
                        else {
                            // Must be a space
                            if (words.length > 0 && words[words.length - 1].length > 0) {
                                // Already in a word so start a new one as long as it is not empty
                                words.push("");
                            }
                        }
                    }
                }
                substitutions[`${prefix}`] = name.replace(/\s\s+/g, " ");
                substitutions[`${prefix}_SNAKE`] = words.join("-").toLowerCase();
                substitutions[`${prefix}_CAMEL`] = words[0][0].toLowerCase() + words[0].substring(1) + words.slice(1).join("");
                substitutions[`${prefix}_PASCAL`] = words.join("");
                substitutions[`${prefix}_HUMAN`] = words.join(" ");
            }
        }
        return substitutions;
    }
    static replaceSubstitutions(substitutions, input) {
        let output = input;
        if (input !== null && input !== undefined && substitutions !== undefined && substitutions !== null) {
            Object.keys(substitutions).forEach(key => {
                output = output.replace(new RegExp(`{${key}}`, "g"), substitutions[key]);
            });
        }
        return output;
    }
}
exports.TemplateHelper = TemplateHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3RlbXBsYXRlSGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSDtJQUNXLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFjLEVBQUUsSUFBWTtRQUM1RCxNQUFNLGFBQWEsR0FBNkIsRUFBRSxDQUFDO1FBRW5ELEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTO1lBQ2xCLElBQUksS0FBSyxJQUFJO1lBQ2IsTUFBTSxLQUFLLFNBQVM7WUFDcEIsTUFBTSxLQUFLLElBQUk7WUFDZixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFM0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVoRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQztnQkFFM0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBQzNDLDBCQUEwQjtvQkFDMUIsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ25DLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDckIsb0RBQW9EOzRCQUNwRCxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO3dCQUM5QyxDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNKLHdDQUF3Qzs0QkFDeEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ3ZDLG1DQUFtQztnQ0FDbkMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDOzRCQUM3RCxDQUFDOzRCQUFDLElBQUksQ0FBQyxDQUFDO2dDQUNKLGlDQUFpQztnQ0FDakMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUMvQyxDQUFDO3dCQUNMLENBQUM7b0JBQ0wsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDSixnQkFBZ0I7d0JBQ2hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNoQyw0QkFBNEI7NEJBQzVCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUN6RCw2Q0FBNkM7Z0NBQzdDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQzVDLHdCQUF3QjtvQ0FDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUMvQyxDQUFDO2dDQUFDLElBQUksQ0FBQyxDQUFDO29DQUNKLGtEQUFrRDtvQ0FDbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDaEMsQ0FBQzs0QkFDTCxDQUFDOzRCQUFDLElBQUksQ0FBQyxDQUFDO2dDQUNKLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDbkIsdUNBQXVDO29DQUN2QyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQy9DLENBQUM7Z0NBQUMsSUFBSSxDQUFDLENBQUM7b0NBQ0osOEJBQThCO29DQUM5QixLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNoQyxDQUFDOzRCQUNMLENBQUM7d0JBQ0wsQ0FBQzt3QkFBQyxJQUFJLENBQUMsQ0FBQzs0QkFDSixrQkFBa0I7NEJBQ2xCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUN6RCxrRUFBa0U7Z0NBQ2xFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ25CLENBQUM7d0JBQ0wsQ0FBQztvQkFDTCxDQUFDO2dCQUNMLENBQUM7Z0JBRUQsYUFBYSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDekQsYUFBYSxDQUFDLEdBQUcsTUFBTSxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNqRSxhQUFhLENBQUMsR0FBRyxNQUFNLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRyxhQUFhLENBQUMsR0FBRyxNQUFNLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ25ELGFBQWEsQ0FBQyxHQUFHLE1BQU0sUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2RCxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxhQUF1QyxFQUFFLEtBQWE7UUFDckYsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRW5CLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLGFBQWEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzdFLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKO0FBckZELHdDQXFGQyIsImZpbGUiOiJoZWxwZXJzL3RlbXBsYXRlSGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZW1wbGF0ZSBoZWxwZXJcbiAqL1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVIZWxwZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2VuZXJhdGVTdWJzdGl0dXRpb25zKHByZWZpeDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgICAgICBjb25zdCBzdWJzdGl0dXRpb25zOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcblxuICAgICAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBuYW1lICE9PSBudWxsICYmXG4gICAgICAgICAgICBwcmVmaXggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgcHJlZml4ICE9PSBudWxsICYmXG4gICAgICAgICAgICBwcmVmaXgudHJpbSgpLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgY29uc3QganVzdEFscGhhTnVtID0gbmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOSBdL2csIFwiIFwiKS50cmltKCk7XG5cbiAgICAgICAgICAgIGlmIChqdXN0QWxwaGFOdW0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBqdXN0QWxwaGFOdW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXMgdGhpcyBsb3dlciBvciBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9bYS16MC05XS8udGVzdChqdXN0QWxwaGFOdW1baV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod29yZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gd29yZHMgc28gcHVzaCBuZXcgd29yZCB1cHBlciBjYXNlIG9mIGNoYXJhY3RlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goanVzdEFscGhhTnVtW2ldLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb2VzIHRoZSBjdXJyZW50IHdvcmQgaGF2ZSBhbnkgbGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmRzW3dvcmRzLmxlbmd0aCAtIDFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaZXJvIGxlbmd0aCBzbyBhcHBlbmQgdXBwZXIgY2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXSArPSBqdXN0QWxwaGFOdW1baV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHJlYWR5IGluIHdvcmQgc28ganVzdCBhcHBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHNbd29yZHMubGVuZ3RoIC0gMV0gKz0ganVzdEFscGhhTnVtW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElzIHRoaXMgdXBwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvW0EtWl0vLnRlc3QoanVzdEFscGhhTnVtW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFyZSB3ZSBhbHJlYWR5IGluIGEgd29yZD9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod29yZHMubGVuZ3RoID4gMCAmJiB3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFllcywgaWYgaXQgaXMgYWxyZWFkeSBhbGwgY2FwcyBqdXN0IGFwcGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15bXmEtel0qJC8udGVzdCh3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEN1cnJlbnQgd29yZCBhbGwgY2Fwc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHNbd29yZHMubGVuZ3RoIC0gMV0gKz0ganVzdEFscGhhTnVtW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3VycmVudCB3b3JkIGlzIG5vdCBhbGwgY2FwcyBzbyBzdGFydCBhIG5ldyBvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goanVzdEFscGhhTnVtW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDdXJyZW50IHdvcmQgaXMgZW1wdHkgc28ganVzdCBhcHBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzW3dvcmRzLmxlbmd0aCAtIDFdICs9IGp1c3RBbHBoYU51bVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIHdvcmRzIHNvIHN0YXJ0IGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMucHVzaChqdXN0QWxwaGFOdW1baV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNdXN0IGJlIGEgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod29yZHMubGVuZ3RoID4gMCAmJiB3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgaW4gYSB3b3JkIHNvIHN0YXJ0IGEgbmV3IG9uZSBhcyBsb25nIGFzIGl0IGlzIG5vdCBlbXB0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnNbYCR7cHJlZml4fWBdID0gbmFtZS5yZXBsYWNlKC9cXHNcXHMrL2csIFwiIFwiKTtcbiAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zW2Ake3ByZWZpeH1fU05BS0VgXSA9IHdvcmRzLmpvaW4oXCItXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9uc1tgJHtwcmVmaXh9X0NBTUVMYF0gPSB3b3Jkc1swXVswXS50b0xvd2VyQ2FzZSgpICsgd29yZHNbMF0uc3Vic3RyaW5nKDEpICsgd29yZHMuc2xpY2UoMSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zW2Ake3ByZWZpeH1fUEFTQ0FMYF0gPSB3b3Jkcy5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnNbYCR7cHJlZml4fV9IVU1BTmBdID0gd29yZHMuam9pbihcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3Vic3RpdHV0aW9ucztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlcGxhY2VTdWJzdGl0dXRpb25zKHN1YnN0aXR1dGlvbnM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgfSwgaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCBvdXRwdXQgPSBpbnB1dDtcblxuICAgICAgICBpZiAoaW5wdXQgIT09IG51bGwgJiYgaW5wdXQgIT09IHVuZGVmaW5lZCAmJiBzdWJzdGl0dXRpb25zICE9PSB1bmRlZmluZWQgJiYgc3Vic3RpdHV0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3Vic3RpdHV0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoYHske2tleX19YCwgXCJnXCIpLCBzdWJzdGl0dXRpb25zW2tleV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbiJdfQ==
