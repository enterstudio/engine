"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generate Command
 */
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const parameterValidation_1 = require("unitejs-framework/dist/helpers/parameterValidation");
const engineCommandBase_1 = require("../engine/engineCommandBase");
const engineVariables_1 = require("../engine/engineVariables");
const templateHelper_1 = require("../helpers/templateHelper");
class GenerateCommand extends engineCommandBase_1.EngineCommandBase {
    run(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const uniteConfiguration = yield this.loadConfiguration(args.outputDirectory, undefined, undefined, false);
            if (!uniteConfiguration) {
                this._logger.error("There is no unite.json to use for configuration.");
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "name", args.name)) {
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "type", args.type)) {
                return 1;
            }
            this._logger.info("");
            try {
                const engineVariables = new engineVariables_1.EngineVariables();
                _super("createEngineVariables").call(this, args.outputDirectory, uniteConfiguration, engineVariables);
                const generateTemplatesFolder = this._fileSystem.pathCombine(this._engineAssetsFolder, `appFramework/${uniteConfiguration.applicationFramework.toLowerCase()}/generate/`);
                const exists = yield this._fileSystem.fileExists(generateTemplatesFolder, "generate-templates.json");
                if (exists) {
                    const generateTemplates = yield this._fileSystem.fileReadJson(generateTemplatesFolder, "generate-templates.json");
                    const keys = Object.keys(generateTemplates);
                    const typeLower = args.type.toLowerCase();
                    const templateKey = keys.find(k => k.toLowerCase() === typeLower);
                    if (templateKey) {
                        let template = generateTemplates[templateKey];
                        const sharedGenerateTemplatesFolder = this._fileSystem.pathCombine(this._engineAssetsFolder, `appFramework/shared/generate/`);
                        if (generateTemplates[templateKey].isShared) {
                            const sharedExists = yield this._fileSystem.fileExists(sharedGenerateTemplatesFolder, "generate-templates.json");
                            if (sharedExists) {
                                const sharedGenerateTemplates = yield this._fileSystem.fileReadJson(sharedGenerateTemplatesFolder, "generate-templates.json");
                                if (sharedGenerateTemplates[templateKey]) {
                                    template = objectHelper_1.ObjectHelper.merge(template, sharedGenerateTemplates[templateKey]);
                                }
                                else {
                                    this._logger.error(`Can not find a type of '${args.type}' in the shared templates'`);
                                    return 1;
                                }
                            }
                            else {
                                this._logger.error(`There are no shared generate-templates and shared template '${args.type}' is required`);
                                return 1;
                            }
                        }
                        // need this for syntehtic import flags
                        this._pipeline.add("moduleType", "CommonJS");
                        this._pipeline.add("moduleType", "SystemJS");
                        this._pipeline.add("moduleType", "AMD");
                        let ret = yield this._pipeline.run(uniteConfiguration, engineVariables, ["initialise"], false);
                        if (ret === 0) {
                            ret = yield this.generateFromTemplate(args, uniteConfiguration, engineVariables, generateTemplates[templateKey].isShared ? sharedGenerateTemplatesFolder : generateTemplatesFolder, template);
                        }
                        return ret;
                    }
                    else {
                        this._logger.error(`Can not find a type of '${args.type}' for applicationFramework '${uniteConfiguration.applicationFramework}, possible values are [${keys.join(", ")}]'`);
                        return 1;
                    }
                }
                else {
                    this._logger.error(`There are no generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`);
                    return 1;
                }
            }
            catch (err) {
                this._logger.error(`There was an error loading generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`, err);
                return 1;
            }
        });
    }
    generateFromTemplate(args, uniteConfiguration, engineVariables, generateTemplatesFolder, generateTemplate) {
        return __awaiter(this, void 0, void 0, function* () {
            const substitutions = templateHelper_1.TemplateHelper.generateSubstitutions("GEN_NAME", args.name);
            substitutions.ADDITIONAL_EXTENSION = generateTemplate.additionalExtension !== undefined &&
                generateTemplate.additionalExtension !== null &&
                generateTemplate.additionalExtension.length > 0 ? `.${generateTemplate.additionalExtension}` : "";
            substitutions.SYNTHETIC_IMPORT = engineVariables.syntheticImport;
            substitutions.MODULE_ID = engineVariables.moduleId;
            // See where we are in relation to the www folder
            const baseDirectory = this._fileSystem.pathAbsolute("./");
            const wwwFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(args.outputDirectory, uniteConfiguration.dirs.wwwRoot));
            const srcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.src));
            // If we are somewhere in the srcFolder use that as a starting point, otherwise just use src root
            const startSrcFolder = baseDirectory.startsWith(srcFolder) ? baseDirectory : srcFolder;
            // Calculate any subFolder based on arg or default with substitutions
            const subFolder = args.subFolder !== undefined && args.subFolder !== null ? args.subFolder :
                generateTemplate.defaultFolder !== undefined && generateTemplate.defaultFolder !== null ? templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, generateTemplate.defaultFolder) : "";
            // Now combine the output folder
            const srcOutputFolder = this._fileSystem.pathCombine(startSrcFolder, subFolder);
            // Find the relativee from srcFolder to srcOutputFolder so we can combine for other folder structures
            const srcRelative = this._fileSystem.pathFileRelative(srcFolder, srcOutputFolder);
            let ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.sourceFiles, srcOutputFolder, `${args.type}/src`, uniteConfiguration.sourceExtensions, substitutions);
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.viewFiles, srcOutputFolder, `${args.type}/view`, uniteConfiguration.viewExtensions, substitutions);
            }
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.styleFiles, srcOutputFolder, `${args.type}/style`, [uniteConfiguration.styleExtension], substitutions);
            }
            if (ret === 0 && uniteConfiguration.unitTestRunner !== "None") {
                const unitSrcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.unitTestSrc));
                const unitSrcOutputFolder = this._fileSystem.pathCombine(unitSrcFolder, srcRelative);
                substitutions.GEN_UNIT_TEST_RELATIVE = this._fileSystem.pathToWeb(this._fileSystem.pathDirectoryRelative(unitSrcOutputFolder, srcOutputFolder))
                    .replace(/^\.\//, "");
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.unitTestFiles, unitSrcOutputFolder, `${args.type}/unit/${uniteConfiguration.unitTestFramework.toLowerCase()}`, uniteConfiguration.sourceExtensions, substitutions);
            }
            if (ret === 0 && uniteConfiguration.e2eTestRunner !== "None") {
                const e2eSrcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.e2eTestSrc));
                const e2eSrcOutputFolder = this._fileSystem.pathCombine(e2eSrcFolder, srcRelative);
                substitutions.GEN_E2E_TEST_RELATIVE = this._fileSystem.pathToWeb(this._fileSystem.pathDirectoryRelative(e2eSrcOutputFolder, srcOutputFolder))
                    .replace(/^\.\//, "");
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.e2eTestFiles, e2eSrcOutputFolder, `${args.type}/e2e/${uniteConfiguration.unitTestFramework.toLowerCase()}`, uniteConfiguration.sourceExtensions, substitutions);
            }
            if (ret === 0) {
                this._logger.banner("Successfully Completed.");
            }
            return ret;
        });
    }
    copyFiles(generateTemplatesFolder, filenames, destFolder, templateSubFolder, possibleExtensions, substitutions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filenames && filenames.length > 0) {
                const srcFolder = this._fileSystem.pathCombine(generateTemplatesFolder, templateSubFolder);
                for (let i = 0; i < filenames.length; i++) {
                    const srcFilename = filenames[i];
                    let doneCopy = false;
                    for (let j = 0; j < possibleExtensions.length && !doneCopy; j++) {
                        let srcFilename2 = srcFilename.replace("{EXTENSION}", possibleExtensions[j]);
                        srcFilename2 = srcFilename2.replace("{ADDITIONAL_EXTENSION}", "");
                        let destFilename = templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, srcFilename);
                        destFilename = destFilename.replace("{EXTENSION}", possibleExtensions[j]);
                        try {
                            const destExists = yield this._fileSystem.fileExists(destFolder, destFilename);
                            if (destExists) {
                                this._logger.error(`Destination file exists, aborting`, undefined, { srcFolder, srcFilename2, destFolder, destFilename });
                                return 1;
                            }
                            else {
                                const exists = yield this._fileSystem.fileExists(srcFolder, srcFilename2);
                                if (exists) {
                                    let content = yield this._fileSystem.fileReadText(srcFolder, srcFilename2);
                                    if (content.startsWith("!")) {
                                        this._logger.error(content.substr(1));
                                        return 1;
                                    }
                                    else {
                                        content = templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, content);
                                        yield this._fileSystem.directoryCreate(destFolder);
                                        yield this._fileSystem.fileWriteText(destFolder, destFilename, content);
                                        doneCopy = true;
                                    }
                                }
                            }
                        }
                        catch (err) {
                            this._logger.error(`There was an generating from the template`, err, { srcFolder, srcFilename2, destFolder, destFilename });
                            return 1;
                        }
                    }
                    if (!doneCopy) {
                        this._logger.error(`Can not find a source for '${srcFilename}' with the possible extensions [${possibleExtensions.join(", ")}]`);
                        return 1;
                    }
                }
            }
            return 0;
        });
    }
}
exports.GenerateCommand = GenerateCommand;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZUNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsOEVBQTJFO0FBQzNFLDRGQUF5RjtBQUl6RixtRUFBZ0U7QUFDaEUsK0RBQTREO0FBQzVELDhEQUEyRDtBQUkzRCxxQkFBNkIsU0FBUSxxQ0FBaUI7SUFDckMsR0FBRyxDQUFDLElBQTRCOzs7WUFDekMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFM0csRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7Z0JBQ3ZFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyx5Q0FBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNiLENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLHlDQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXRCLElBQUksQ0FBQztnQkFDRCxNQUFNLGVBQWUsR0FBRyxJQUFJLGlDQUFlLEVBQUUsQ0FBQztnQkFDOUMsK0JBQTJCLFlBQUMsSUFBSSxDQUFD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QyxDQUFDOzRCQUM1SCxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNiLENBQUM7b0JBQ0wsQ0FBQztvQkFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLFdBQVcsbUNBQW1DLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ2pJLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ2IsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQztZQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDO0tBQUE7Q0FDSjtBQTlPRCwwQ0E4T0MiLCJmaWxlIjoiY29tbWFuZHMvZ2VuZXJhdGVDb21tYW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZW5lcmF0ZSBDb21tYW5kXG4gKi9cbmltcG9ydCB7IE9iamVjdEhlbHBlciB9IGZyb20gXCJ1bml0ZWpzLWZyYW1ld29yay9kaXN0L2hlbHBlcnMvb2JqZWN0SGVscGVyXCI7XG5pbXBvcnQgeyBQYXJhbWV0ZXJWYWxpZGF0aW9uIH0gZnJvbSBcInVuaXRlanMtZnJhbWV3b3JrL2Rpc3QvaGVscGVycy9wYXJhbWV0ZXJWYWxpZGF0aW9uXCI7XG5pbXBvcnQgeyBJVW5pdGVHZW5lcmF0ZVRlbXBsYXRlIH0gZnJvbSBcIi4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL3VuaXRlL0lVbml0ZUdlbmVyYXRlVGVtcGxhdGVcIjtcbmltcG9ydCB7IElVbml0ZUdlbmVyYXRlVGVtcGxhdGVzIH0gZnJvbSBcIi4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL3VuaXRlL0lVbml0ZUdlbmVyYXRlVGVtcGxhdGVzXCI7XG5pbXBvcnQgeyBVbml0ZUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGUvdW5pdGVDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBFbmdpbmVDb21tYW5kQmFzZSB9IGZyb20gXCIuLi9lbmdpbmUvZW5naW5lQ29tbWFuZEJhc2VcIjtcbmltcG9ydCB7IEVuZ2luZVZhcmlhYmxlcyB9IGZyb20gXCIuLi9lbmdpbmUvZW5naW5lVmFyaWFibGVzXCI7XG5pbXBvcnQgeyBUZW1wbGF0ZUhlbHBlciB9IGZyb20gXCIuLi9oZWxwZXJzL3RlbXBsYXRlSGVscGVyXCI7XG5pbXBvcnQgeyBJRW5naW5lQ29tbWFuZCB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL0lFbmdpbmVDb21tYW5kXCI7XG5pbXBvcnQgeyBJR2VuZXJhdGVDb21tYW5kUGFyYW1zIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSUdlbmVyYXRlQ29tbWFuZFBhcmFtc1wiO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJhdGVDb21tYW5kIGV4dGVuZHMgRW5naW5lQ29tbWFuZEJhc2UgaW1wbGVtZW50cyBJRW5naW5lQ29tbWFuZDxJR2VuZXJhdGVDb21tYW5kUGFyYW1zPiB7XG4gICAgcHVibGljIGFzeW5jIHJ1bihhcmdzOiBJR2VuZXJhdGVDb21tYW5kUGFyYW1zKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgY29uc3QgdW5pdGVDb25maWd1cmF0aW9uID0gYXdhaXQgdGhpcy5sb2FkQ29uZmlndXJhdGlvbihhcmdzLm91dHB1dERpcmVjdG9yeSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZhbHNlKTtcblxuICAgICAgICBpZiAoIXVuaXRlQ29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKFwiVGhlcmUgaXMgbm8gdW5pdGUuanNvbiB0byB1c2UgZm9yIGNvbmZpZ3VyYXRpb24uXCIpO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIVBhcmFtZXRlclZhbGlkYXRpb24ubm90RW1wdHkodGhpcy5fbG9nZ2VyLCBcIm5hbWVcIiwgYXJncy5uYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIVBhcmFtZXRlclZhbGlkYXRpb24ubm90RW1wdHkodGhpcy5fbG9nZ2VyLCBcInR5cGVcIiwgYXJncy50eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb2dnZXIuaW5mbyhcIlwiKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZW5naW5lVmFyaWFibGVzID0gbmV3IEVuZ2luZVZhcmlhYmxlcygpO1xuICAgICAgICAgICAgc3VwZXIuY3JlYXRlRW5naW5lVmFyaWFibGVzKGFyZ3Mub3V0cHV0RGlyZWN0b3J5LCB1bml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlcyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh0aGlzLl9lbmdpbmVBc3NldHNGb2xkZXIsIGBhcHBGcmFtZXdvcmsvJHt1bml0ZUNvbmZpZ3VyYXRpb24uYXBwbGljYXRpb25GcmFtZXdvcmsudG9Mb3dlckNhc2UoKX0vZ2VuZXJhdGUvYCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IGF3YWl0IHRoaXMuX2ZpbGVTeXN0ZW0uZmlsZUV4aXN0cyhnZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlciwgXCJnZW5lcmF0ZS10ZW1wbGF0ZXMuanNvblwiKTtcblxuICAgICAgICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlVGVtcGxhdGVzID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlUmVhZEpzb248SVVuaXRlR2VuZXJhdGVUZW1wbGF0ZXM+KGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLCBcImdlbmVyYXRlLXRlbXBsYXRlcy5qc29uXCIpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGdlbmVyYXRlVGVtcGxhdGVzKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVMb3dlciA9IGFyZ3MudHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGVLZXkgPSBrZXlzLmZpbmQoayA9PiBrLnRvTG93ZXJDYXNlKCkgPT09IHR5cGVMb3dlcik7XG5cbiAgICAgICAgICAgICAgICBpZiAodGVtcGxhdGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gZ2VuZXJhdGVUZW1wbGF0ZXNbdGVtcGxhdGVLZXldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZWRHZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlciA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5fZW5naW5lQXNzZXRzRm9sZGVyLCBgYXBwRnJhbWV3b3JrL3NoYXJlZC9nZW5lcmF0ZS9gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdlbmVyYXRlVGVtcGxhdGVzW3RlbXBsYXRlS2V5XS5pc1NoYXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hhcmVkRXhpc3RzID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlRXhpc3RzKHNoYXJlZEdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLCBcImdlbmVyYXRlLXRlbXBsYXRlcy5qc29uXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcmVkRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hhcmVkR2VuZXJhdGVUZW1wbGF0ZXMgPSBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVSZWFkSnNvbjxJVW5pdGVHZW5lcmF0ZVRlbXBsYXRlcz4oc2hhcmVkR2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsIFwiZ2VuZXJhdGUtdGVtcGxhdGVzLmpzb25cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcmVkR2VuZXJhdGVUZW1wbGF0ZXNbdGVtcGxhdGVLZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gT2JqZWN0SGVscGVyLm1lcmdlKHRlbXBsYXRlLCBzaGFyZWRHZW5lcmF0ZVRlbXBsYXRlc1t0ZW1wbGF0ZUtleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgQ2FuIG5vdCBmaW5kIGEgdHlwZSBvZiAnJHthcmdzLnR5cGV9JyBpbiB0aGUgc2hhcmVkIHRlbXBsYXRlcydgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoYFRoZXJlIGFyZSBubyBzaGFyZWQgZ2VuZXJhdGUtdGVtcGxhdGVzIGFuZCBzaGFyZWQgdGVtcGxhdGUgJyR7YXJncy50eXBlfScgaXMgcmVxdWlyZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdGhpcyBmb3Igc3ludGVodGljIGltcG9ydCBmbGFnc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9waXBlbGluZS5hZGQoXCJtb2R1bGVUeXBlXCIsIFwiQ29tbW9uSlNcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BpcGVsaW5lLmFkZChcIm1vZHVsZVR5cGVcIiwgXCJTeXN0ZW1KU1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGlwZWxpbmUuYWRkKFwibW9kdWxlVHlwZVwiLCBcIkFNRFwiKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy5fcGlwZWxpbmUucnVuKHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzLCBbXCJpbml0aWFsaXNlXCJdLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZUZyb21UZW1wbGF0ZShhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ZUNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZ2luZVZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZXNbdGVtcGxhdGVLZXldLmlzU2hhcmVkID8gc2hhcmVkR2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIgOiBnZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoYENhbiBub3QgZmluZCBhIHR5cGUgb2YgJyR7YXJncy50eXBlfScgZm9yIGFwcGxpY2F0aW9uRnJhbWV3b3JrICcke3VuaXRlQ29uZmlndXJhdGlvbi5hcHBsaWNhdGlvbkZyYW1ld29ya30sIHBvc3NpYmxlIHZhbHVlcyBhcmUgWyR7a2V5cy5qb2luKFwiLCBcIil9XSdgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoYFRoZXJlIGFyZSBubyBnZW5lcmF0ZS10ZW1wbGF0ZXMgZm9yIGFwcGxpY2F0aW9uRnJhbWV3b3JrICcke3VuaXRlQ29uZmlndXJhdGlvbi5hcHBsaWNhdGlvbkZyYW1ld29ya30nYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKGBUaGVyZSB3YXMgYW4gZXJyb3IgbG9hZGluZyBnZW5lcmF0ZS10ZW1wbGF0ZXMgZm9yIGFwcGxpY2F0aW9uRnJhbWV3b3JrICcke3VuaXRlQ29uZmlndXJhdGlvbi5hcHBsaWNhdGlvbkZyYW1ld29ya30nYCwgZXJyKTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZUZyb21UZW1wbGF0ZShhcmdzOiBJR2VuZXJhdGVDb21tYW5kUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlOiBJVW5pdGVHZW5lcmF0ZVRlbXBsYXRlKTogUHJvbWlzZTxudW1iZXI+IHtcblxuICAgICAgICBjb25zdCBzdWJzdGl0dXRpb25zID0gVGVtcGxhdGVIZWxwZXIuZ2VuZXJhdGVTdWJzdGl0dXRpb25zKFwiR0VOX05BTUVcIiwgYXJncy5uYW1lKTtcbiAgICAgICAgc3Vic3RpdHV0aW9ucy5BRERJVElPTkFMX0VYVEVOU0lPTiA9IGdlbmVyYXRlVGVtcGxhdGUuYWRkaXRpb25hbEV4dGVuc2lvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlLmFkZGl0aW9uYWxFeHRlbnNpb24gIT09IG51bGwgJiZcbiAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGUuYWRkaXRpb25hbEV4dGVuc2lvbi5sZW5ndGggPiAwID8gYC4ke2dlbmVyYXRlVGVtcGxhdGUuYWRkaXRpb25hbEV4dGVuc2lvbn1gIDogXCJcIjtcblxuICAgICAgICBzdWJzdGl0dXRpb25zLlNZTlRIRVRJQ19JTVBPUlQgPSBlbmdpbmVWYXJpYWJsZXMuc3ludGhldGljSW1wb3J0O1xuICAgICAgICBzdWJzdGl0dXRpb25zLk1PRFVMRV9JRCA9IGVuZ2luZVZhcmlhYmxlcy5tb2R1bGVJZDtcblxuICAgICAgICAvLyBTZWUgd2hlcmUgd2UgYXJlIGluIHJlbGF0aW9uIHRvIHRoZSB3d3cgZm9sZGVyXG4gICAgICAgIGNvbnN0IGJhc2VEaXJlY3RvcnkgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhBYnNvbHV0ZShcIi4vXCIpO1xuICAgICAgICBjb25zdCB3d3dGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhBYnNvbHV0ZSh0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKGFyZ3Mub3V0cHV0RGlyZWN0b3J5LCB1bml0ZUNvbmZpZ3VyYXRpb24uZGlycy53d3dSb290KSk7XG4gICAgICAgIGNvbnN0IHNyY0ZvbGRlciA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aEFic29sdXRlKHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUod3d3Rm9sZGVyLCB1bml0ZUNvbmZpZ3VyYXRpb24uZGlycy53d3cuc3JjKSk7XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIHNvbWV3aGVyZSBpbiB0aGUgc3JjRm9sZGVyIHVzZSB0aGF0IGFzIGEgc3RhcnRpbmcgcG9pbnQsIG90aGVyd2lzZSBqdXN0IHVzZSBzcmMgcm9vdFxuICAgICAgICBjb25zdCBzdGFydFNyY0ZvbGRlciA9IGJhc2VEaXJlY3Rvcnkuc3RhcnRzV2l0aChzcmNGb2xkZXIpID8gYmFzZURpcmVjdG9yeSA6IHNyY0ZvbGRlcjtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgYW55IHN1YkZvbGRlciBiYXNlZCBvbiBhcmcgb3IgZGVmYXVsdCB3aXRoIHN1YnN0aXR1dGlvbnNcbiAgICAgICAgY29uc3Qgc3ViRm9sZGVyID0gYXJncy5zdWJGb2xkZXIgIT09IHVuZGVmaW5lZCAmJiBhcmdzLnN1YkZvbGRlciAhPT0gbnVsbCA/IGFyZ3Muc3ViRm9sZGVyIDpcbiAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGUuZGVmYXVsdEZvbGRlciAhPT0gdW5kZWZpbmVkICYmIGdlbmVyYXRlVGVtcGxhdGUuZGVmYXVsdEZvbGRlciAhPT0gbnVsbCA/IFRlbXBsYXRlSGVscGVyLnJlcGxhY2VTdWJzdGl0dXRpb25zKHN1YnN0aXR1dGlvbnMsIGdlbmVyYXRlVGVtcGxhdGUuZGVmYXVsdEZvbGRlcikgOiBcIlwiO1xuXG4gICAgICAgIC8vIE5vdyBjb21iaW5lIHRoZSBvdXRwdXQgZm9sZGVyXG4gICAgICAgIGNvbnN0IHNyY091dHB1dEZvbGRlciA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoc3RhcnRTcmNGb2xkZXIsIHN1YkZvbGRlcik7XG5cbiAgICAgICAgLy8gRmluZCB0aGUgcmVsYXRpdmVlIGZyb20gc3JjRm9sZGVyIHRvIHNyY091dHB1dEZvbGRlciBzbyB3ZSBjYW4gY29tYmluZSBmb3Igb3RoZXIgZm9sZGVyIHN0cnVjdHVyZXNcbiAgICAgICAgY29uc3Qgc3JjUmVsYXRpdmUgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhGaWxlUmVsYXRpdmUoc3JjRm9sZGVyLCBzcmNPdXRwdXRGb2xkZXIpO1xuXG4gICAgICAgIGxldCByZXQgPSBhd2FpdCB0aGlzLmNvcHlGaWxlcyhnZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGUuc291cmNlRmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNPdXRwdXRGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHthcmdzLnR5cGV9L3NyY2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMpO1xuXG4gICAgICAgIGlmIChyZXQgPT09IDApIHtcbiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZS52aWV3RmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNPdXRwdXRGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHthcmdzLnR5cGV9L3ZpZXdgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdGVDb25maWd1cmF0aW9uLnZpZXdFeHRlbnNpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLmNvcHlGaWxlcyhnZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGUuc3R5bGVGaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY091dHB1dEZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2FyZ3MudHlwZX0vc3R5bGVgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3VuaXRlQ29uZmlndXJhdGlvbi5zdHlsZUV4dGVuc2lvbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXQgPT09IDAgJiYgdW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0UnVubmVyICE9PSBcIk5vbmVcIikge1xuICAgICAgICAgICAgY29uc3QgdW5pdFNyY0ZvbGRlciA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aEFic29sdXRlKHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUod3d3Rm9sZGVyLCB1bml0ZUNvbmZpZ3VyYXRpb24uZGlycy53d3cudW5pdFRlc3RTcmMpKTtcbiAgICAgICAgICAgIGNvbnN0IHVuaXRTcmNPdXRwdXRGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKHVuaXRTcmNGb2xkZXIsIHNyY1JlbGF0aXZlKTtcbiAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMuR0VOX1VOSVRfVEVTVF9SRUxBVElWRSA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aFRvV2ViKHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aERpcmVjdG9yeVJlbGF0aXZlKHVuaXRTcmNPdXRwdXRGb2xkZXIsIHNyY091dHB1dEZvbGRlcikpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5jb3B5RmlsZXMoZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlLnVuaXRUZXN0RmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0U3JjT3V0cHV0Rm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7YXJncy50eXBlfS91bml0LyR7dW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0RnJhbWV3b3JrLnRvTG93ZXJDYXNlKCl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbi5zb3VyY2VFeHRlbnNpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0ID09PSAwICYmIHVuaXRlQ29uZmlndXJhdGlvbi5lMmVUZXN0UnVubmVyICE9PSBcIk5vbmVcIikge1xuICAgICAgICAgICAgY29uc3QgZTJlU3JjRm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQWJzb2x1dGUodGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh3d3dGb2xkZXIsIHVuaXRlQ29uZmlndXJhdGlvbi5kaXJzLnd3dy5lMmVUZXN0U3JjKSk7XG4gICAgICAgICAgICBjb25zdCBlMmVTcmNPdXRwdXRGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKGUyZVNyY0ZvbGRlciwgc3JjUmVsYXRpdmUpO1xuICAgICAgICAgICAgc3Vic3RpdHV0aW9ucy5HRU5fRTJFX1RFU1RfUkVMQVRJVkUgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhUb1dlYih0aGlzLl9maWxlU3lzdGVtLnBhdGhEaXJlY3RvcnlSZWxhdGl2ZShlMmVTcmNPdXRwdXRGb2xkZXIsIHNyY091dHB1dEZvbGRlcikpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5jb3B5RmlsZXMoZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlLmUyZVRlc3RGaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUyZVNyY091dHB1dEZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2FyZ3MudHlwZX0vZTJlLyR7dW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0RnJhbWV3b3JrLnRvTG93ZXJDYXNlKCl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbi5zb3VyY2VFeHRlbnNpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuYmFubmVyKFwiU3VjY2Vzc2Z1bGx5IENvbXBsZXRlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWVzOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0Rm9sZGVyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVTdWJGb2xkZXI6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZUV4dGVuc2lvbnM6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgfSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGlmIChmaWxlbmFtZXMgJiYgZmlsZW5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNyY0ZvbGRlciA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsIHRlbXBsYXRlU3ViRm9sZGVyKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmNGaWxlbmFtZSA9IGZpbGVuYW1lc1tpXTtcblxuICAgICAgICAgICAgICAgIGxldCBkb25lQ29weSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zc2libGVFeHRlbnNpb25zLmxlbmd0aCAmJiAhZG9uZUNvcHk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3JjRmlsZW5hbWUyID0gc3JjRmlsZW5hbWUucmVwbGFjZShcIntFWFRFTlNJT059XCIsIHBvc3NpYmxlRXh0ZW5zaW9uc1tqXSk7XG4gICAgICAgICAgICAgICAgICAgIHNyY0ZpbGVuYW1lMiA9IHNyY0ZpbGVuYW1lMi5yZXBsYWNlKFwie0FERElUSU9OQUxfRVhURU5TSU9OfVwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlc3RGaWxlbmFtZSA9IFRlbXBsYXRlSGVscGVyLnJlcGxhY2VTdWJzdGl0dXRpb25zKHN1YnN0aXR1dGlvbnMsIHNyY0ZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgZGVzdEZpbGVuYW1lID0gZGVzdEZpbGVuYW1lLnJlcGxhY2UoXCJ7RVhURU5TSU9OfVwiLCBwb3NzaWJsZUV4dGVuc2lvbnNbal0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0RXhpc3RzID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlRXhpc3RzKGRlc3RGb2xkZXIsIGRlc3RGaWxlbmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXN0RXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKGBEZXN0aW5hdGlvbiBmaWxlIGV4aXN0cywgYWJvcnRpbmdgLCB1bmRlZmluZWQsIHsgc3JjRm9sZGVyLCBzcmNGaWxlbmFtZTIsIGRlc3RGb2xkZXIsIGRlc3RGaWxlbmFtZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlRXhpc3RzKHNyY0ZvbGRlciwgc3JjRmlsZW5hbWUyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVSZWFkVGV4dChzcmNGb2xkZXIsIHNyY0ZpbGVuYW1lMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQuc3RhcnRzV2l0aChcIiFcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihjb250ZW50LnN1YnN0cigxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBUZW1wbGF0ZUhlbHBlci5yZXBsYWNlU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zLCBjb250ZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5kaXJlY3RvcnlDcmVhdGUoZGVzdEZvbGRlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2ZpbGVTeXN0ZW0uZmlsZVdyaXRlVGV4dChkZXN0Rm9sZGVyLCBkZXN0RmlsZW5hbWUsIGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lQ29weSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKGBUaGVyZSB3YXMgYW4gZ2VuZXJhdGluZyBmcm9tIHRoZSB0ZW1wbGF0ZWAsIGVyciwgeyBzcmNGb2xkZXIsIHNyY0ZpbGVuYW1lMiwgZGVzdEZvbGRlciwgZGVzdEZpbGVuYW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb25lQ29weSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoYENhbiBub3QgZmluZCBhIHNvdXJjZSBmb3IgJyR7c3JjRmlsZW5hbWV9JyB3aXRoIHRoZSBwb3NzaWJsZSBleHRlbnNpb25zIFske3Bvc3NpYmxlRXh0ZW5zaW9ucy5qb2luKFwiLCBcIil9XWApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG4iXX0=
