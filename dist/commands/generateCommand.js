"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generate Command
 */
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const parameterValidation_1 = require("unitejs-framework/dist/helpers/parameterValidation");
const engineCommandBase_1 = require("../engine/engineCommandBase");
const engineVariables_1 = require("../engine/engineVariables");
const templateHelper_1 = require("../helpers/templateHelper");
class GenerateCommand extends engineCommandBase_1.EngineCommandBase {
    run(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const uniteConfiguration = yield this.loadConfiguration(args.outputDirectory, undefined, undefined, false);
            if (!uniteConfiguration) {
                this._logger.error("There is no unite.json to use for configuration.");
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "name", args.name)) {
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "type", args.type)) {
                return 1;
            }
            this._logger.info("");
            try {
                const engineVariables = new engineVariables_1.EngineVariables();
                _super("createEngineVariables").call(this, args.outputDirectory, uniteConfiguration, engineVariables);
                const generateTemplatesFolder = this._fileSystem.pathCombine(this._engineAssetsFolder, `appFramework/${uniteConfiguration.applicationFramework.toLowerCase()}/generate/`);
                const exists = yield this._fileSystem.fileExists(generateTemplatesFolder, "generate-templates.json");
                if (exists) {
                    const generateTemplates = yield this._fileSystem.fileReadJson(generateTemplatesFolder, "generate-templates.json");
                    const keys = Object.keys(generateTemplates);
                    const typeLower = args.type.toLowerCase();
                    const templateKey = keys.find(k => k.toLowerCase() === typeLower);
                    if (templateKey) {
                        let template = generateTemplates[templateKey];
                        const sharedGenerateTemplatesFolder = this._fileSystem.pathCombine(this._engineAssetsFolder, `appFramework/shared/generate/`);
                        if (generateTemplates[templateKey].isShared) {
                            const sharedExists = yield this._fileSystem.fileExists(sharedGenerateTemplatesFolder, "generate-templates.json");
                            if (sharedExists) {
                                const sharedGenerateTemplates = yield this._fileSystem.fileReadJson(sharedGenerateTemplatesFolder, "generate-templates.json");
                                if (sharedGenerateTemplates[templateKey]) {
                                    template = objectHelper_1.ObjectHelper.merge(template, sharedGenerateTemplates[templateKey]);
                                }
                                else {
                                    this._logger.error(`Can not find a type of '${args.type}' in the shared templates'`);
                                    return 1;
                                }
                            }
                            else {
                                this._logger.error(`There are no shared generate-templates and shared template '${args.type}' is required`);
                                return 1;
                            }
                        }
                        // need this for syntehtic import flags
                        this._pipeline.add("moduleType", "CommonJS");
                        this._pipeline.add("moduleType", "SystemJS");
                        this._pipeline.add("moduleType", "AMD");
                        let ret = yield this._pipeline.run(uniteConfiguration, engineVariables, ["initialise"], false);
                        if (ret === 0) {
                            ret = yield this.generateFromTemplate(args, uniteConfiguration, engineVariables, generateTemplates[templateKey].isShared ? sharedGenerateTemplatesFolder : generateTemplatesFolder, template);
                        }
                        return ret;
                    }
                    else {
                        this._logger.error(`Can not find a type of '${args.type}' for applicationFramework '${uniteConfiguration.applicationFramework}, possible values are [${keys.join(", ")}]'`);
                        return 1;
                    }
                }
                else {
                    this._logger.error(`There are no generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`);
                    return 1;
                }
            }
            catch (err) {
                this._logger.error(`There was an error loading generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`, err);
                return 1;
            }
        });
    }
    generateFromTemplate(args, uniteConfiguration, engineVariables, generateTemplatesFolder, generateTemplate) {
        return __awaiter(this, void 0, void 0, function* () {
            const substitutions = templateHelper_1.TemplateHelper.generateSubstitutions("GEN_NAME", args.name);
            substitutions.ADDITIONAL_EXTENSION = generateTemplate.additionalExtension !== undefined &&
                generateTemplate.additionalExtension !== null &&
                generateTemplate.additionalExtension.length > 0 ? `.${generateTemplate.additionalExtension}` : "";
            substitutions.SYNTHETIC_IMPORT = engineVariables.syntheticImport;
            // See where we are in relation to the www folder
            const baseDirectory = this._fileSystem.pathAbsolute("./");
            const wwwFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(args.outputDirectory, uniteConfiguration.dirs.wwwRoot));
            const srcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.src));
            // If we are somewhere in the srcFolder use that as a starting point, otherwise just use src root
            const startSrcFolder = baseDirectory.startsWith(srcFolder) ? baseDirectory : srcFolder;
            // Calculate any subFolder based on arg or default with substitutions
            const subFolder = args.subFolder !== undefined && args.subFolder !== null ? args.subFolder :
                generateTemplate.defaultFolder !== undefined && generateTemplate.defaultFolder !== null ? templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, generateTemplate.defaultFolder) : "";
            // Now combine the output folder
            const srcOutputFolder = this._fileSystem.pathCombine(startSrcFolder, subFolder);
            // Find the relativee from srcFolder to srcOutputFolder so we can combine for other folder structures
            const srcRelative = this._fileSystem.pathFileRelative(srcFolder, srcOutputFolder);
            let ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.sourceFiles, srcOutputFolder, `${args.type}/src`, uniteConfiguration.sourceExtensions, substitutions);
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.viewFiles, srcOutputFolder, `${args.type}/view`, uniteConfiguration.viewExtensions, substitutions);
            }
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.styleFiles, srcOutputFolder, `${args.type}/style`, [uniteConfiguration.styleExtension], substitutions);
            }
            if (ret === 0 && uniteConfiguration.unitTestRunner !== "None") {
                const unitSrcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.unitTestSrc));
                const unitSrcOutputFolder = this._fileSystem.pathCombine(unitSrcFolder, srcRelative);
                substitutions.GEN_UNIT_TEST_RELATIVE = this._fileSystem.pathToWeb(this._fileSystem.pathDirectoryRelative(unitSrcOutputFolder, srcOutputFolder))
                    .replace(/^\.\//, "");
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.unitTestFiles, unitSrcOutputFolder, `${args.type}/unit/${uniteConfiguration.unitTestFramework.toLowerCase()}`, uniteConfiguration.sourceExtensions, substitutions);
            }
            if (ret === 0 && uniteConfiguration.e2eTestRunner !== "None") {
                const e2eSrcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.e2eTestSrc));
                const e2eSrcOutputFolder = this._fileSystem.pathCombine(e2eSrcFolder, srcRelative);
                substitutions.GEN_E2E_TEST_RELATIVE = this._fileSystem.pathToWeb(this._fileSystem.pathDirectoryRelative(e2eSrcOutputFolder, srcOutputFolder))
                    .replace(/^\.\//, "");
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.e2eTestFiles, e2eSrcOutputFolder, `${args.type}/e2e/${uniteConfiguration.unitTestFramework.toLowerCase()}`, uniteConfiguration.sourceExtensions, substitutions);
            }
            if (ret === 0) {
                this._logger.banner("Successfully Completed.");
            }
            return ret;
        });
    }
    copyFiles(generateTemplatesFolder, filenames, destFolder, templateSubFolder, possibleExtensions, substitutions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filenames && filenames.length > 0) {
                const srcFolder = this._fileSystem.pathCombine(generateTemplatesFolder, templateSubFolder);
                for (let i = 0; i < filenames.length; i++) {
                    const srcFilename = filenames[i];
                    let doneCopy = false;
                    for (let j = 0; j < possibleExtensions.length && !doneCopy; j++) {
                        let srcFilename2 = srcFilename.replace("{EXTENSION}", possibleExtensions[j]);
                        srcFilename2 = srcFilename2.replace("{ADDITIONAL_EXTENSION}", "");
                        let destFilename = templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, srcFilename);
                        destFilename = destFilename.replace("{EXTENSION}", possibleExtensions[j]);
                        try {
                            const destExists = yield this._fileSystem.fileExists(destFolder, destFilename);
                            if (destExists) {
                                this._logger.error(`Destination file exists, aborting`, undefined, { srcFolder, srcFilename2, destFolder, destFilename });
                                return 1;
                            }
                            else {
                                const exists = yield this._fileSystem.fileExists(srcFolder, srcFilename2);
                                if (exists) {
                                    let content = yield this._fileSystem.fileReadText(srcFolder, srcFilename2);
                                    if (content.startsWith("!")) {
                                        this._logger.error(content.substr(1));
                                        return 1;
                                    }
                                    else {
                                        content = templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, content);
                                        yield this._fileSystem.directoryCreate(destFolder);
                                        yield this._fileSystem.fileWriteText(destFolder, destFilename, content);
                                        doneCopy = true;
                                    }
                                }
                            }
                        }
                        catch (err) {
                            this._logger.error(`There was an generating from the template`, err, { srcFolder, srcFilename2, destFolder, destFilename });
                            return 1;
                        }
                    }
                    if (!doneCopy) {
                        this._logger.error(`Can not find a source for '${srcFilename}' with the possible extensions [${possibleExtensions.join(", ")}]`);
                        return 1;
                    }
                }
            }
            return 0;
        });
    }
}
exports.GenerateCommand = GenerateCommand;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZUNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsOEVBQTJFO0FBQzNFLDRGQUF5RjtBQUl6RixtRUFBZ0U7QUFDaEUsK0RBQTREO0FBQzVELDhEQUEyRDtBQUkzRCxxQkFBNkIsU0FBUSxxQ0FBaUI7SUFDckMsR0FBRyxDQUFDLElBQTRCOzs7WUFDekMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFM0csRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7Z0JBQ3ZFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyx5Q0FBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNiLENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLHlDQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXRCLElBQUksQ0FBQztnQkFDRCxNQUFNLGVBQWUsR0FBRyxJQUFJLGlDQUFlLEVBQUUsQ0FBQztnQkFDOUMsK0JBQTJCLFlBQUMsSUFBSSxDQUFD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QkFDTCxDQUFDO29CQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDWixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsV0FBVyxtQ0FBbUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDakksTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDYixDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1lBRUQsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUM7S0FBQTtDQUNKO0FBN09ELDBDQTZPQyIsImZpbGUiOiJjb21tYW5kcy9nZW5lcmF0ZUNvbW1hbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlIENvbW1hbmRcbiAqL1xuaW1wb3J0IHsgT2JqZWN0SGVscGVyIH0gZnJvbSBcInVuaXRlanMtZnJhbWV3b3JrL2Rpc3QvaGVscGVycy9vYmplY3RIZWxwZXJcIjtcbmltcG9ydCB7IFBhcmFtZXRlclZhbGlkYXRpb24gfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9oZWxwZXJzL3BhcmFtZXRlclZhbGlkYXRpb25cIjtcbmltcG9ydCB7IElVbml0ZUdlbmVyYXRlVGVtcGxhdGUgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGUvSVVuaXRlR2VuZXJhdGVUZW1wbGF0ZVwiO1xuaW1wb3J0IHsgSVVuaXRlR2VuZXJhdGVUZW1wbGF0ZXMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGUvSVVuaXRlR2VuZXJhdGVUZW1wbGF0ZXNcIjtcbmltcG9ydCB7IFVuaXRlQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9jb25maWd1cmF0aW9uL21vZGVscy91bml0ZS91bml0ZUNvbmZpZ3VyYXRpb25cIjtcbmltcG9ydCB7IEVuZ2luZUNvbW1hbmRCYXNlIH0gZnJvbSBcIi4uL2VuZ2luZS9lbmdpbmVDb21tYW5kQmFzZVwiO1xuaW1wb3J0IHsgRW5naW5lVmFyaWFibGVzIH0gZnJvbSBcIi4uL2VuZ2luZS9lbmdpbmVWYXJpYWJsZXNcIjtcbmltcG9ydCB7IFRlbXBsYXRlSGVscGVyIH0gZnJvbSBcIi4uL2hlbHBlcnMvdGVtcGxhdGVIZWxwZXJcIjtcbmltcG9ydCB7IElFbmdpbmVDb21tYW5kIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSUVuZ2luZUNvbW1hbmRcIjtcbmltcG9ydCB7IElHZW5lcmF0ZUNvbW1hbmRQYXJhbXMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JR2VuZXJhdGVDb21tYW5kUGFyYW1zXCI7XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZUNvbW1hbmQgZXh0ZW5kcyBFbmdpbmVDb21tYW5kQmFzZSBpbXBsZW1lbnRzIElFbmdpbmVDb21tYW5kPElHZW5lcmF0ZUNvbW1hbmRQYXJhbXM+IHtcbiAgICBwdWJsaWMgYXN5bmMgcnVuKGFyZ3M6IElHZW5lcmF0ZUNvbW1hbmRQYXJhbXMpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBjb25zdCB1bml0ZUNvbmZpZ3VyYXRpb24gPSBhd2FpdCB0aGlzLmxvYWRDb25maWd1cmF0aW9uKGFyZ3Mub3V0cHV0RGlyZWN0b3J5LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZmFsc2UpO1xuXG4gICAgICAgIGlmICghdW5pdGVDb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoXCJUaGVyZSBpcyBubyB1bml0ZS5qc29uIHRvIHVzZSBmb3IgY29uZmlndXJhdGlvbi5cIik7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghUGFyYW1ldGVyVmFsaWRhdGlvbi5ub3RFbXB0eSh0aGlzLl9sb2dnZXIsIFwibmFtZVwiLCBhcmdzLm5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghUGFyYW1ldGVyVmFsaWRhdGlvbi5ub3RFbXB0eSh0aGlzLl9sb2dnZXIsIFwidHlwZVwiLCBhcmdzLnR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBlbmdpbmVWYXJpYWJsZXMgPSBuZXcgRW5naW5lVmFyaWFibGVzKCk7XG4gICAgICAgICAgICBzdXBlci5jcmVhdGVFbmdpbmVWYXJpYWJsZXMoYXJncy5vdXRwdXREaXJlY3RvcnksIHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzKTtcblxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2VuZ2luZUFzc2V0c0ZvbGRlciwgYGFwcEZyYW1ld29yay8ke3VuaXRlQ29uZmlndXJhdGlvbi5hcHBsaWNhdGlvbkZyYW1ld29yay50b0xvd2VyQ2FzZSgpfS9nZW5lcmF0ZS9gKTtcblxuICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlRXhpc3RzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLCBcImdlbmVyYXRlLXRlbXBsYXRlcy5qc29uXCIpO1xuXG4gICAgICAgICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVUZW1wbGF0ZXMgPSBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVSZWFkSnNvbjxJVW5pdGVHZW5lcmF0ZVRlbXBsYXRlcz4oZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsIFwiZ2VuZXJhdGUtdGVtcGxhdGVzLmpzb25cIik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZ2VuZXJhdGVUZW1wbGF0ZXMpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZUxvd2VyID0gYXJncy50eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZUtleSA9IGtleXMuZmluZChrID0+IGsudG9Mb3dlckNhc2UoKSA9PT0gdHlwZUxvd2VyKTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZUtleSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBnZW5lcmF0ZVRlbXBsYXRlc1t0ZW1wbGF0ZUtleV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoYXJlZEdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh0aGlzLl9lbmdpbmVBc3NldHNGb2xkZXIsIGBhcHBGcmFtZXdvcmsvc2hhcmVkL2dlbmVyYXRlL2ApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2VuZXJhdGVUZW1wbGF0ZXNbdGVtcGxhdGVLZXldLmlzU2hhcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZWRFeGlzdHMgPSBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVFeGlzdHMoc2hhcmVkR2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsIFwiZ2VuZXJhdGUtdGVtcGxhdGVzLmpzb25cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZWRFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZWRHZW5lcmF0ZVRlbXBsYXRlcyA9IGF3YWl0IHRoaXMuX2ZpbGVTeXN0ZW0uZmlsZVJlYWRKc29uPElVbml0ZUdlbmVyYXRlVGVtcGxhdGVzPihzaGFyZWRHZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlciwgXCJnZW5lcmF0ZS10ZW1wbGF0ZXMuanNvblwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZWRHZW5lcmF0ZVRlbXBsYXRlc1t0ZW1wbGF0ZUtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSBPYmplY3RIZWxwZXIubWVyZ2UodGVtcGxhdGUsIHNoYXJlZEdlbmVyYXRlVGVtcGxhdGVzW3RlbXBsYXRlS2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKGBDYW4gbm90IGZpbmQgYSB0eXBlIG9mICcke2FyZ3MudHlwZX0nIGluIHRoZSBzaGFyZWQgdGVtcGxhdGVzJ2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgVGhlcmUgYXJlIG5vIHNoYXJlZCBnZW5lcmF0ZS10ZW1wbGF0ZXMgYW5kIHNoYXJlZCB0ZW1wbGF0ZSAnJHthcmdzLnR5cGV9JyBpcyByZXF1aXJlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0aGlzIGZvciBzeW50ZWh0aWMgaW1wb3J0IGZsYWdzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BpcGVsaW5lLmFkZChcIm1vZHVsZVR5cGVcIiwgXCJDb21tb25KU1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGlwZWxpbmUuYWRkKFwibW9kdWxlVHlwZVwiLCBcIlN5c3RlbUpTXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9waXBlbGluZS5hZGQoXCJtb2R1bGVUeXBlXCIsIFwiQU1EXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCB0aGlzLl9waXBlbGluZS5ydW4odW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIFtcImluaXRpYWxpc2VcIl0sIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLmdlbmVyYXRlRnJvbVRlbXBsYXRlKGFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lVmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlc1t0ZW1wbGF0ZUtleV0uaXNTaGFyZWQgPyBzaGFyZWRHZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlciA6IGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgQ2FuIG5vdCBmaW5kIGEgdHlwZSBvZiAnJHthcmdzLnR5cGV9JyBmb3IgYXBwbGljYXRpb25GcmFtZXdvcmsgJyR7dW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrfSwgcG9zc2libGUgdmFsdWVzIGFyZSBbJHtrZXlzLmpvaW4oXCIsIFwiKX1dJ2ApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgVGhlcmUgYXJlIG5vIGdlbmVyYXRlLXRlbXBsYXRlcyBmb3IgYXBwbGljYXRpb25GcmFtZXdvcmsgJyR7dW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrfSdgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoYFRoZXJlIHdhcyBhbiBlcnJvciBsb2FkaW5nIGdlbmVyYXRlLXRlbXBsYXRlcyBmb3IgYXBwbGljYXRpb25GcmFtZXdvcmsgJyR7dW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrfSdgLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlRnJvbVRlbXBsYXRlKGFyZ3M6IElHZW5lcmF0ZUNvbW1hbmRQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXI6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGU6IElVbml0ZUdlbmVyYXRlVGVtcGxhdGUpOiBQcm9taXNlPG51bWJlcj4ge1xuXG4gICAgICAgIGNvbnN0IHN1YnN0aXR1dGlvbnMgPSBUZW1wbGF0ZUhlbHBlci5nZW5lcmF0ZVN1YnN0aXR1dGlvbnMoXCJHRU5fTkFNRVwiLCBhcmdzLm5hbWUpO1xuICAgICAgICBzdWJzdGl0dXRpb25zLkFERElUSU9OQUxfRVhURU5TSU9OID0gZ2VuZXJhdGVUZW1wbGF0ZS5hZGRpdGlvbmFsRXh0ZW5zaW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGUuYWRkaXRpb25hbEV4dGVuc2lvbiAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZS5hZGRpdGlvbmFsRXh0ZW5zaW9uLmxlbmd0aCA+IDAgPyBgLiR7Z2VuZXJhdGVUZW1wbGF0ZS5hZGRpdGlvbmFsRXh0ZW5zaW9ufWAgOiBcIlwiO1xuXG4gICAgICAgIHN1YnN0aXR1dGlvbnMuU1lOVEhFVElDX0lNUE9SVCA9IGVuZ2luZVZhcmlhYmxlcy5zeW50aGV0aWNJbXBvcnQ7XG5cbiAgICAgICAgLy8gU2VlIHdoZXJlIHdlIGFyZSBpbiByZWxhdGlvbiB0byB0aGUgd3d3IGZvbGRlclxuICAgICAgICBjb25zdCBiYXNlRGlyZWN0b3J5ID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQWJzb2x1dGUoXCIuL1wiKTtcbiAgICAgICAgY29uc3Qgd3d3Rm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQWJzb2x1dGUodGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZShhcmdzLm91dHB1dERpcmVjdG9yeSwgdW5pdGVDb25maWd1cmF0aW9uLmRpcnMud3d3Um9vdCkpO1xuICAgICAgICBjb25zdCBzcmNGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhBYnNvbHV0ZSh0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKHd3d0ZvbGRlciwgdW5pdGVDb25maWd1cmF0aW9uLmRpcnMud3d3LnNyYykpO1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSBzb21ld2hlcmUgaW4gdGhlIHNyY0ZvbGRlciB1c2UgdGhhdCBhcyBhIHN0YXJ0aW5nIHBvaW50LCBvdGhlcndpc2UganVzdCB1c2Ugc3JjIHJvb3RcbiAgICAgICAgY29uc3Qgc3RhcnRTcmNGb2xkZXIgPSBiYXNlRGlyZWN0b3J5LnN0YXJ0c1dpdGgoc3JjRm9sZGVyKSA/IGJhc2VEaXJlY3RvcnkgOiBzcmNGb2xkZXI7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIGFueSBzdWJGb2xkZXIgYmFzZWQgb24gYXJnIG9yIGRlZmF1bHQgd2l0aCBzdWJzdGl0dXRpb25zXG4gICAgICAgIGNvbnN0IHN1YkZvbGRlciA9IGFyZ3Muc3ViRm9sZGVyICE9PSB1bmRlZmluZWQgJiYgYXJncy5zdWJGb2xkZXIgIT09IG51bGwgPyBhcmdzLnN1YkZvbGRlciA6XG4gICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlLmRlZmF1bHRGb2xkZXIgIT09IHVuZGVmaW5lZCAmJiBnZW5lcmF0ZVRlbXBsYXRlLmRlZmF1bHRGb2xkZXIgIT09IG51bGwgPyBUZW1wbGF0ZUhlbHBlci5yZXBsYWNlU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zLCBnZW5lcmF0ZVRlbXBsYXRlLmRlZmF1bHRGb2xkZXIpIDogXCJcIjtcblxuICAgICAgICAvLyBOb3cgY29tYmluZSB0aGUgb3V0cHV0IGZvbGRlclxuICAgICAgICBjb25zdCBzcmNPdXRwdXRGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKHN0YXJ0U3JjRm9sZGVyLCBzdWJGb2xkZXIpO1xuXG4gICAgICAgIC8vIEZpbmQgdGhlIHJlbGF0aXZlZSBmcm9tIHNyY0ZvbGRlciB0byBzcmNPdXRwdXRGb2xkZXIgc28gd2UgY2FuIGNvbWJpbmUgZm9yIG90aGVyIGZvbGRlciBzdHJ1Y3R1cmVzXG4gICAgICAgIGNvbnN0IHNyY1JlbGF0aXZlID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoRmlsZVJlbGF0aXZlKHNyY0ZvbGRlciwgc3JjT3V0cHV0Rm9sZGVyKTtcblxuICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy5jb3B5RmlsZXMoZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlLnNvdXJjZUZpbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjT3V0cHV0Rm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7YXJncy50eXBlfS9zcmNgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdGVDb25maWd1cmF0aW9uLnNvdXJjZUV4dGVuc2lvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zKTtcblxuICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLmNvcHlGaWxlcyhnZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGUudmlld0ZpbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjT3V0cHV0Rm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7YXJncy50eXBlfS92aWV3YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbi52aWV3RXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5jb3B5RmlsZXMoZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlLnN0eWxlRmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNPdXRwdXRGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHthcmdzLnR5cGV9L3N0eWxlYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt1bml0ZUNvbmZpZ3VyYXRpb24uc3R5bGVFeHRlbnNpb25dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0ID09PSAwICYmIHVuaXRlQ29uZmlndXJhdGlvbi51bml0VGVzdFJ1bm5lciAhPT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHVuaXRTcmNGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhBYnNvbHV0ZSh0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKHd3d0ZvbGRlciwgdW5pdGVDb25maWd1cmF0aW9uLmRpcnMud3d3LnVuaXRUZXN0U3JjKSk7XG4gICAgICAgICAgICBjb25zdCB1bml0U3JjT3V0cHV0Rm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh1bml0U3JjRm9sZGVyLCBzcmNSZWxhdGl2ZSk7XG4gICAgICAgICAgICBzdWJzdGl0dXRpb25zLkdFTl9VTklUX1RFU1RfUkVMQVRJVkUgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhUb1dlYih0aGlzLl9maWxlU3lzdGVtLnBhdGhEaXJlY3RvcnlSZWxhdGl2ZSh1bml0U3JjT3V0cHV0Rm9sZGVyLCBzcmNPdXRwdXRGb2xkZXIpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7XG5cbiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZS51bml0VGVzdEZpbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdFNyY091dHB1dEZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2FyZ3MudHlwZX0vdW5pdC8ke3VuaXRlQ29uZmlndXJhdGlvbi51bml0VGVzdEZyYW1ld29yay50b0xvd2VyQ2FzZSgpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldCA9PT0gMCAmJiB1bml0ZUNvbmZpZ3VyYXRpb24uZTJlVGVzdFJ1bm5lciAhPT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGUyZVNyY0ZvbGRlciA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aEFic29sdXRlKHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUod3d3Rm9sZGVyLCB1bml0ZUNvbmZpZ3VyYXRpb24uZGlycy53d3cuZTJlVGVzdFNyYykpO1xuICAgICAgICAgICAgY29uc3QgZTJlU3JjT3V0cHV0Rm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZShlMmVTcmNGb2xkZXIsIHNyY1JlbGF0aXZlKTtcbiAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMuR0VOX0UyRV9URVNUX1JFTEFUSVZFID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoVG9XZWIodGhpcy5fZmlsZVN5c3RlbS5wYXRoRGlyZWN0b3J5UmVsYXRpdmUoZTJlU3JjT3V0cHV0Rm9sZGVyLCBzcmNPdXRwdXRGb2xkZXIpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7XG5cbiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZS5lMmVUZXN0RmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlMmVTcmNPdXRwdXRGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHthcmdzLnR5cGV9L2UyZS8ke3VuaXRlQ29uZmlndXJhdGlvbi51bml0VGVzdEZyYW1ld29yay50b0xvd2VyQ2FzZSgpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmJhbm5lcihcIlN1Y2Nlc3NmdWxseSBDb21wbGV0ZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNvcHlGaWxlcyhnZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlcjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lczogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEZvbGRlcjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlU3ViRm9sZGVyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libGVFeHRlbnNpb25zOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0pOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBpZiAoZmlsZW5hbWVzICYmIGZpbGVuYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzcmNGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLCB0ZW1wbGF0ZVN1YkZvbGRlcik7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZW5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjRmlsZW5hbWUgPSBmaWxlbmFtZXNbaV07XG5cbiAgICAgICAgICAgICAgICBsZXQgZG9uZUNvcHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvc3NpYmxlRXh0ZW5zaW9ucy5sZW5ndGggJiYgIWRvbmVDb3B5OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNyY0ZpbGVuYW1lMiA9IHNyY0ZpbGVuYW1lLnJlcGxhY2UoXCJ7RVhURU5TSU9OfVwiLCBwb3NzaWJsZUV4dGVuc2lvbnNbal0pO1xuICAgICAgICAgICAgICAgICAgICBzcmNGaWxlbmFtZTIgPSBzcmNGaWxlbmFtZTIucmVwbGFjZShcIntBRERJVElPTkFMX0VYVEVOU0lPTn1cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXN0RmlsZW5hbWUgPSBUZW1wbGF0ZUhlbHBlci5yZXBsYWNlU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zLCBzcmNGaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RGaWxlbmFtZSA9IGRlc3RGaWxlbmFtZS5yZXBsYWNlKFwie0VYVEVOU0lPTn1cIiwgcG9zc2libGVFeHRlbnNpb25zW2pdKTtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdEV4aXN0cyA9IGF3YWl0IHRoaXMuX2ZpbGVTeXN0ZW0uZmlsZUV4aXN0cyhkZXN0Rm9sZGVyLCBkZXN0RmlsZW5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdEV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgRGVzdGluYXRpb24gZmlsZSBleGlzdHMsIGFib3J0aW5nYCwgdW5kZWZpbmVkLCB7IHNyY0ZvbGRlciwgc3JjRmlsZW5hbWUyLCBkZXN0Rm9sZGVyLCBkZXN0RmlsZW5hbWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IGF3YWl0IHRoaXMuX2ZpbGVTeXN0ZW0uZmlsZUV4aXN0cyhzcmNGb2xkZXIsIHNyY0ZpbGVuYW1lMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlUmVhZFRleHQoc3JjRm9sZGVyLCBzcmNGaWxlbmFtZTIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50LnN0YXJ0c1dpdGgoXCIhXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoY29udGVudC5zdWJzdHIoMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gVGVtcGxhdGVIZWxwZXIucmVwbGFjZVN1YnN0aXR1dGlvbnMoc3Vic3RpdHV0aW9ucywgY29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2ZpbGVTeXN0ZW0uZGlyZWN0b3J5Q3JlYXRlKGRlc3RGb2xkZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVXcml0ZVRleHQoZGVzdEZvbGRlciwgZGVzdEZpbGVuYW1lLCBjb250ZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZUNvcHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgVGhlcmUgd2FzIGFuIGdlbmVyYXRpbmcgZnJvbSB0aGUgdGVtcGxhdGVgLCBlcnIsIHsgc3JjRm9sZGVyLCBzcmNGaWxlbmFtZTIsIGRlc3RGb2xkZXIsIGRlc3RGaWxlbmFtZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9uZUNvcHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKGBDYW4gbm90IGZpbmQgYSBzb3VyY2UgZm9yICcke3NyY0ZpbGVuYW1lfScgd2l0aCB0aGUgcG9zc2libGUgZXh0ZW5zaW9ucyBbJHtwb3NzaWJsZUV4dGVuc2lvbnMuam9pbihcIiwgXCIpfV1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufVxuIl19
