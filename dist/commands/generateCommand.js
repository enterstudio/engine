"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generate Command
 */
const parameterValidation_1 = require("unitejs-framework/dist/helpers/parameterValidation");
const engineCommandBase_1 = require("../engine/engineCommandBase");
class GenerateCommand extends engineCommandBase_1.EngineCommandBase {
    run(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const uniteConfiguration = yield this.loadConfiguration(args.outputDirectory, undefined, undefined, false);
            if (!uniteConfiguration) {
                this._logger.error("There is no unite.json to use for configuration.");
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "name", args.name)) {
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "type", args.type)) {
                return 1;
            }
            this._logger.info("");
            try {
                const generateTemplatesFolder = this._fileSystem.pathCombine(this._engineAssetsFolder, `appFramework/${uniteConfiguration.applicationFramework}/generate/`);
                const exists = yield this._fileSystem.fileExists(generateTemplatesFolder, "generate-templates.json");
                if (exists) {
                    const generateTemplates = yield this._fileSystem.fileReadJson(generateTemplatesFolder, "generate-templates.json");
                    const keys = Object.keys(generateTemplates);
                    const typeLower = args.type.toLowerCase();
                    const templateKey = keys.find(k => k.toLowerCase() === typeLower);
                    if (templateKey) {
                        return yield this.generateFromTemplate(args, uniteConfiguration, generateTemplatesFolder, generateTemplates[templateKey]);
                    }
                    else {
                        this._logger.error(`Can not find a type of '${args.type}' for applicationFramework '${uniteConfiguration.applicationFramework}, possible values are [${keys.join(", ")}]'`);
                        return 1;
                    }
                }
                else {
                    this._logger.error(`There are no generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`);
                    return 1;
                }
            }
            catch (err) {
                this._logger.error(`There was an error loading generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`, err);
                return 1;
            }
        });
    }
    generateFromTemplate(args, uniteConfiguration, generateTemplatesFolder, generateTemplate) {
        return __awaiter(this, void 0, void 0, function* () {
            const substitutions = this.generateSubstitutions(args.name, uniteConfiguration);
            const subFolder = args.subFolder !== undefined && args.subFolder !== null ? args.subFolder : this.stringSubstitutions(substitutions, generateTemplate.defaultFolder);
            substitutions.GEN_SUB_FOLDER = subFolder.length > 0 ? `${subFolder}/` : subFolder;
            substitutions.GEN_TEST_ROOT = "../".repeat(subFolder.split("/").length + 3);
            const wwwRootFolder = this._fileSystem.pathCombine(args.outputDirectory, uniteConfiguration.dirs.wwwRoot);
            let ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.sourceFiles, this._fileSystem.pathCombine(wwwRootFolder, uniteConfiguration.dirs.www.src), subFolder, `${args.type}/src`, uniteConfiguration.sourceExtensions, substitutions);
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.viewFiles, this._fileSystem.pathCombine(wwwRootFolder, uniteConfiguration.dirs.www.src), subFolder, `${args.type}/view`, uniteConfiguration.viewExtensions, substitutions);
            }
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.styleFiles, this._fileSystem.pathCombine(wwwRootFolder, uniteConfiguration.dirs.www.src), subFolder, `${args.type}/style`, [uniteConfiguration.styleExtension], substitutions);
            }
            if (ret === 0 && uniteConfiguration.unitTestRunner !== "None") {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.unitTestFiles, this._fileSystem.pathCombine(wwwRootFolder, uniteConfiguration.dirs.www.unitTestSrc), subFolder, `${args.type}/unit/${uniteConfiguration.unitTestFramework.toLowerCase()}`, uniteConfiguration.sourceExtensions, substitutions);
            }
            if (ret === 0) {
                this._logger.banner("Successfully Completed.");
            }
            return ret;
        });
    }
    copyFiles(generateTemplatesFolder, filenames, destRootFolder, subFolder, templateSubFolder, possibleExtensions, substitutions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filenames && filenames.length > 0) {
                const srcFolder = this._fileSystem.pathCombine(generateTemplatesFolder, templateSubFolder);
                const destFolder = this._fileSystem.pathCombine(destRootFolder, subFolder);
                for (let i = 0; i < filenames.length; i++) {
                    const srcFilename = filenames[i];
                    let doneCopy = false;
                    for (let j = 0; j < possibleExtensions.length && !doneCopy; j++) {
                        const srcFilename2 = srcFilename.replace("{EXTENSION}", possibleExtensions[j]);
                        let destFilename = this.stringSubstitutions(substitutions, srcFilename);
                        destFilename = destFilename.replace("{EXTENSION}", possibleExtensions[j]);
                        try {
                            const exists = yield this._fileSystem.fileReadText(srcFolder, srcFilename2);
                            if (exists) {
                                let content = yield this._fileSystem.fileReadText(srcFolder, srcFilename2);
                                content = this.stringSubstitutions(substitutions, content);
                                yield this._fileSystem.directoryCreate(destFolder);
                                yield this._fileSystem.fileWriteText(destFolder, destFilename, content);
                                doneCopy = true;
                            }
                        }
                        catch (err) {
                            this._logger.error(`There was an generating from the template`, err, { srcFolder, srcFilename2, destFolder, destFilename });
                            return 1;
                        }
                        if (!doneCopy) {
                            this._logger.error(`Can not find a source for '${srcFilename}' with the possible extensions [${possibleExtensions.join(", ")}]`);
                            return 1;
                        }
                    }
                }
            }
            return 0;
        });
    }
    generateSubstitutions(name, uniteConfiguration) {
        const substitutions = {};
        const words = [];
        for (let i = 0; i < name.length; i++) {
            const isLower = name[i].toLowerCase() === name[i];
            if (isLower) {
                if (words.length === 0) {
                    words.push(name[i].toUpperCase());
                }
                else {
                    words[words.length - 1] += name[i];
                }
            }
            else {
                words.push(name[i]);
            }
        }
        substitutions.GEN_NAME = name;
        substitutions.GEN_NAME_SNAKE = words.join("-").toLowerCase();
        substitutions.GEN_NAME_CAMEL = words[0][0].toLowerCase() + words[0].substring(1) + words.slice(1).join("");
        substitutions.GEN_NAME_PASCAL = words.join("");
        substitutions.GEN_NAME_HUMAN = words.join(" ");
        return substitutions;
    }
    stringSubstitutions(substitutions, input) {
        let output = input;
        Object.keys(substitutions).forEach(key => {
            output = output.replace(new RegExp(`{${key}}`, "g"), substitutions[key]);
        });
        return output;
    }
}
exports.GenerateCommand = GenerateCommand;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZUNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsNEZBQXlGO0FBSXpGLG1FQUFnRTtBQUloRSxxQkFBNkIsU0FBUSxxQ0FBaUI7SUFDckMsR0FBRyxDQUFDLElBQTRCOztZQUN6QyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUUzRyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztnQkFDdkUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNiLENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLHlDQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMseUNBQW1CLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDO1lBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFdEIsSUFBSSxDQUFDO2dCQUNELE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLGdCQUFnQixrQkFBa0IsQ0FBQyxvQkFBb0IsWUFBWSxDQUFDLENBQUM7Z0JBRTVKLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztnQkFFckcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDVCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQTBCLHVCQUF1QixFQUFFLHlCQUF5QixDQUFDLENBQUM7b0JBRTNJLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFFNUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFFMUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDO29CQUVsRSxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO3dCQUNkLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztvQkFDOUgsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDSixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsSUFBSSxDQUFDLElBQUksK0JBQStCLGtCQUFrQixDQUFDLG9CQUFvQiwwQkFBMEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQzVLLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ2IsQ0FBQztnQkFDTCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxrQkFBa0IsQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLENBQUM7b0JBQzVILE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsQ0FBQztZQUNMLENBQUM7WUFBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLDJFQUEyRSxrQkFBa0IsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMvSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztRQUNMLENBQUM7S0FBQTtJQUVhLG9CQUFvQixDQUFDLElBQTRCLEVBQzVCLGtCQUFzQyxFQUN0Qyx1QkFBK0IsRUFDL0IsZ0JBQXdDOztZQUV2RSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBRWhGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVySyxhQUFhLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsU0FBUyxDQUFDO1lBQ2xGLGFBQWEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUU1RSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUxRyxJQUFJLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEVBQ3ZCLGdCQUFnQixDQUFDLFdBQVcsRUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQzVFLFNBQVMsRUFDVCxHQUFHLElBQUksQ0FBQyxJQUFJLE1BQU0sRUFDbEIsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQ25DLGFBQWEsQ0FBQyxDQUFDO1lBRTlDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNaLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEVBQ3ZCLGdCQUFnQixDQUFDLFNBQVMsRUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQzVFLFNBQVMsRUFDVCxHQUFHLElBQUksQ0FBQyxJQUFJLE9BQU8sRUFDbkIsa0JBQWtCLENBQUMsY0FBYyxFQUNqQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1osR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsRUFDdkIsZ0JBQWdCLENBQUMsVUFBVSxFQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDNUUsU0FBUyxFQUNULEdBQUcsSUFBSSxDQUFDLElBQUksUUFBUSxFQUNwQixDQUFFLGtCQUFrQixDQUFDLGNBQWMsQ0FBRSxFQUNyQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxjQUFjLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDNUQsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsRUFDdkIsZ0JBQWdCLENBQUMsYUFBYSxFQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFDcEYsU0FBUyxFQUNULEdBQUcsSUFBSSxDQUFDLElBQUksU0FBUyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUN6RSxrQkFBa0IsQ0FBQyxnQkFBZ0IsRUFDbkMsYUFBYSxDQUFDLENBQUM7WUFDOUMsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDbkQsQ0FBQztZQUVELE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDZixDQUFDO0tBQUE7SUFFYSxTQUFTLENBQUMsdUJBQStCLEVBQy9CLFNBQW1CLEVBQ25CLGNBQXNCLEVBQ3RCLFNBQWlCLEVBQ2pCLGlCQUF5QixFQUN6QixrQkFBNEIsRUFDNUIsYUFBdUM7O1lBQzNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLHVCQUF1QixFQUFFLGlCQUFpQixDQUFDLENBQUM7Z0JBQzNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFFM0UsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBQ3hDLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFakMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO29CQUNyQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUM5RCxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMvRSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO3dCQUN4RSxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFFMUUsSUFBSSxDQUFDOzRCQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDOzRCQUU1RSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dDQUNULElBQUksT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO2dDQUUzRSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztnQ0FFM0QsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQ0FFbkQsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dDQUV4RSxRQUFRLEdBQUcsSUFBSSxDQUFDOzRCQUNwQixDQUFDO3dCQUNMLENBQUM7d0JBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUUsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDOzRCQUM1SCxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNiLENBQUM7d0JBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOzRCQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixXQUFXLG1DQUFtQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzRCQUNqSSxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNiLENBQUM7b0JBQ0wsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQztZQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDO0tBQUE7SUFFTyxxQkFBcUIsQ0FBQyxJQUFZLEVBQUUsa0JBQXNDO1FBQzlFLE1BQU0sYUFBYSxHQUE2QixFQUFFLENBQUM7UUFFbkQsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBRTNCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDVixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3JCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7Z0JBQ3RDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxDQUFDO1lBQ0wsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsQ0FBQztRQUNMLENBQUM7UUFFRCxhQUFhLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUM5QixhQUFhLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDN0QsYUFBYSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzRyxhQUFhLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0MsYUFBYSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRS9DLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVPLG1CQUFtQixDQUFDLGFBQXVDLEVBQUUsS0FBYTtRQUM5RSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRztZQUNsQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdFLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQ0o7QUFsTUQsMENBa01DIiwiZmlsZSI6ImNvbW1hbmRzL2dlbmVyYXRlQ29tbWFuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhdGUgQ29tbWFuZFxuICovXG5pbXBvcnQgeyBQYXJhbWV0ZXJWYWxpZGF0aW9uIH0gZnJvbSBcInVuaXRlanMtZnJhbWV3b3JrL2Rpc3QvaGVscGVycy9wYXJhbWV0ZXJWYWxpZGF0aW9uXCI7XG5pbXBvcnQgeyBJVW5pdGVHZW5lcmF0ZVRlbXBsYXRlIH0gZnJvbSBcIi4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL3VuaXRlL0lVbml0ZUdlbmVyYXRlVGVtcGxhdGVcIjtcbmltcG9ydCB7IElVbml0ZUdlbmVyYXRlVGVtcGxhdGVzIH0gZnJvbSBcIi4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL3VuaXRlL0lVbml0ZUdlbmVyYXRlVGVtcGxhdGVzXCI7XG5pbXBvcnQgeyBVbml0ZUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGUvdW5pdGVDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBFbmdpbmVDb21tYW5kQmFzZSB9IGZyb20gXCIuLi9lbmdpbmUvZW5naW5lQ29tbWFuZEJhc2VcIjtcbmltcG9ydCB7IElFbmdpbmVDb21tYW5kIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSUVuZ2luZUNvbW1hbmRcIjtcbmltcG9ydCB7IElHZW5lcmF0ZUNvbW1hbmRQYXJhbXMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JR2VuZXJhdGVDb21tYW5kUGFyYW1zXCI7XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZUNvbW1hbmQgZXh0ZW5kcyBFbmdpbmVDb21tYW5kQmFzZSBpbXBsZW1lbnRzIElFbmdpbmVDb21tYW5kPElHZW5lcmF0ZUNvbW1hbmRQYXJhbXM+IHtcbiAgICBwdWJsaWMgYXN5bmMgcnVuKGFyZ3M6IElHZW5lcmF0ZUNvbW1hbmRQYXJhbXMpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBjb25zdCB1bml0ZUNvbmZpZ3VyYXRpb24gPSBhd2FpdCB0aGlzLmxvYWRDb25maWd1cmF0aW9uKGFyZ3Mub3V0cHV0RGlyZWN0b3J5LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZmFsc2UpO1xuXG4gICAgICAgIGlmICghdW5pdGVDb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoXCJUaGVyZSBpcyBubyB1bml0ZS5qc29uIHRvIHVzZSBmb3IgY29uZmlndXJhdGlvbi5cIik7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghUGFyYW1ldGVyVmFsaWRhdGlvbi5ub3RFbXB0eSh0aGlzLl9sb2dnZXIsIFwibmFtZVwiLCBhcmdzLm5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghUGFyYW1ldGVyVmFsaWRhdGlvbi5ub3RFbXB0eSh0aGlzLl9sb2dnZXIsIFwidHlwZVwiLCBhcmdzLnR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZVRlbXBsYXRlc0ZvbGRlciA9IHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5fZW5naW5lQXNzZXRzRm9sZGVyLCBgYXBwRnJhbWV3b3JrLyR7dW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrfS9nZW5lcmF0ZS9gKTtcblxuICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlRXhpc3RzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLCBcImdlbmVyYXRlLXRlbXBsYXRlcy5qc29uXCIpO1xuXG4gICAgICAgICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVUZW1wbGF0ZXMgPSBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVSZWFkSnNvbjxJVW5pdGVHZW5lcmF0ZVRlbXBsYXRlcz4oZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsIFwiZ2VuZXJhdGUtdGVtcGxhdGVzLmpzb25cIik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZ2VuZXJhdGVUZW1wbGF0ZXMpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZUxvd2VyID0gYXJncy50eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZUtleSA9IGtleXMuZmluZChrID0+IGsudG9Mb3dlckNhc2UoKSA9PT0gdHlwZUxvd2VyKTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZUtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZW5lcmF0ZUZyb21UZW1wbGF0ZShhcmdzLCB1bml0ZUNvbmZpZ3VyYXRpb24sIGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLCBnZW5lcmF0ZVRlbXBsYXRlc1t0ZW1wbGF0ZUtleV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgQ2FuIG5vdCBmaW5kIGEgdHlwZSBvZiAnJHthcmdzLnR5cGV9JyBmb3IgYXBwbGljYXRpb25GcmFtZXdvcmsgJyR7dW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrfSwgcG9zc2libGUgdmFsdWVzIGFyZSBbJHtrZXlzLmpvaW4oXCIsIFwiKX1dJ2ApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgVGhlcmUgYXJlIG5vIGdlbmVyYXRlLXRlbXBsYXRlcyBmb3IgYXBwbGljYXRpb25GcmFtZXdvcmsgJyR7dW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrfSdgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoYFRoZXJlIHdhcyBhbiBlcnJvciBsb2FkaW5nIGdlbmVyYXRlLXRlbXBsYXRlcyBmb3IgYXBwbGljYXRpb25GcmFtZXdvcmsgJyR7dW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrfSdgLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlRnJvbVRlbXBsYXRlKGFyZ3M6IElHZW5lcmF0ZUNvbW1hbmRQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlOiBJVW5pdGVHZW5lcmF0ZVRlbXBsYXRlKTogUHJvbWlzZTxudW1iZXI+IHtcblxuICAgICAgICBjb25zdCBzdWJzdGl0dXRpb25zID0gdGhpcy5nZW5lcmF0ZVN1YnN0aXR1dGlvbnMoYXJncy5uYW1lLCB1bml0ZUNvbmZpZ3VyYXRpb24pO1xuXG4gICAgICAgIGNvbnN0IHN1YkZvbGRlciA9IGFyZ3Muc3ViRm9sZGVyICE9PSB1bmRlZmluZWQgJiYgYXJncy5zdWJGb2xkZXIgIT09IG51bGwgPyBhcmdzLnN1YkZvbGRlciA6IHRoaXMuc3RyaW5nU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zLCBnZW5lcmF0ZVRlbXBsYXRlLmRlZmF1bHRGb2xkZXIpO1xuXG4gICAgICAgIHN1YnN0aXR1dGlvbnMuR0VOX1NVQl9GT0xERVIgPSBzdWJGb2xkZXIubGVuZ3RoID4gMCA/IGAke3N1YkZvbGRlcn0vYCA6IHN1YkZvbGRlcjtcbiAgICAgICAgc3Vic3RpdHV0aW9ucy5HRU5fVEVTVF9ST09UID0gXCIuLi9cIi5yZXBlYXQoc3ViRm9sZGVyLnNwbGl0KFwiL1wiKS5sZW5ndGggKyAzKTtcblxuICAgICAgICBjb25zdCB3d3dSb290Rm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZShhcmdzLm91dHB1dERpcmVjdG9yeSwgdW5pdGVDb25maWd1cmF0aW9uLmRpcnMud3d3Um9vdCk7XG5cbiAgICAgICAgbGV0IHJldCA9IGF3YWl0IHRoaXMuY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZS5zb3VyY2VGaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVTeXN0ZW0ucGF0aENvbWJpbmUod3d3Um9vdEZvbGRlciwgdW5pdGVDb25maWd1cmF0aW9uLmRpcnMud3d3LnNyYyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHthcmdzLnR5cGV9L3NyY2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMpO1xuXG4gICAgICAgIGlmIChyZXQgPT09IDApIHtcbiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZS52aWV3RmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKHd3d1Jvb3RGb2xkZXIsIHVuaXRlQ29uZmlndXJhdGlvbi5kaXJzLnd3dy5zcmMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7YXJncy50eXBlfS92aWV3YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbi52aWV3RXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5jb3B5RmlsZXMoZ2VuZXJhdGVUZW1wbGF0ZXNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRlbXBsYXRlLnN0eWxlRmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKHd3d1Jvb3RGb2xkZXIsIHVuaXRlQ29uZmlndXJhdGlvbi5kaXJzLnd3dy5zcmMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7YXJncy50eXBlfS9zdHlsZWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIHVuaXRlQ29uZmlndXJhdGlvbi5zdHlsZUV4dGVuc2lvbiBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0ID09PSAwICYmIHVuaXRlQ29uZmlndXJhdGlvbi51bml0VGVzdFJ1bm5lciAhPT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUZW1wbGF0ZS51bml0VGVzdEZpbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh3d3dSb290Rm9sZGVyLCB1bml0ZUNvbmZpZ3VyYXRpb24uZGlycy53d3cudW5pdFRlc3RTcmMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViRm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7YXJncy50eXBlfS91bml0LyR7dW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0RnJhbWV3b3JrLnRvTG93ZXJDYXNlKCl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbi5zb3VyY2VFeHRlbnNpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuYmFubmVyKFwiU3VjY2Vzc2Z1bGx5IENvbXBsZXRlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY29weUZpbGVzKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWVzOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0Um9vdEZvbGRlcjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YkZvbGRlcjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlU3ViRm9sZGVyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libGVFeHRlbnNpb25zOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0pOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBpZiAoZmlsZW5hbWVzICYmIGZpbGVuYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzcmNGb2xkZXIgPSB0aGlzLl9maWxlU3lzdGVtLnBhdGhDb21iaW5lKGdlbmVyYXRlVGVtcGxhdGVzRm9sZGVyLCB0ZW1wbGF0ZVN1YkZvbGRlcik7XG4gICAgICAgICAgICBjb25zdCBkZXN0Rm9sZGVyID0gdGhpcy5fZmlsZVN5c3RlbS5wYXRoQ29tYmluZShkZXN0Um9vdEZvbGRlciwgc3ViRm9sZGVyKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmNGaWxlbmFtZSA9IGZpbGVuYW1lc1tpXTtcblxuICAgICAgICAgICAgICAgIGxldCBkb25lQ29weSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zc2libGVFeHRlbnNpb25zLmxlbmd0aCAmJiAhZG9uZUNvcHk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcmNGaWxlbmFtZTIgPSBzcmNGaWxlbmFtZS5yZXBsYWNlKFwie0VYVEVOU0lPTn1cIiwgcG9zc2libGVFeHRlbnNpb25zW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlc3RGaWxlbmFtZSA9IHRoaXMuc3RyaW5nU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zLCBzcmNGaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RGaWxlbmFtZSA9IGRlc3RGaWxlbmFtZS5yZXBsYWNlKFwie0VYVEVOU0lPTn1cIiwgcG9zc2libGVFeHRlbnNpb25zW2pdKTtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5maWxlUmVhZFRleHQoc3JjRm9sZGVyLCBzcmNGaWxlbmFtZTIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVSZWFkVGV4dChzcmNGb2xkZXIsIHNyY0ZpbGVuYW1lMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gdGhpcy5zdHJpbmdTdWJzdGl0dXRpb25zKHN1YnN0aXR1dGlvbnMsIGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fZmlsZVN5c3RlbS5kaXJlY3RvcnlDcmVhdGUoZGVzdEZvbGRlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9maWxlU3lzdGVtLmZpbGVXcml0ZVRleHQoZGVzdEZvbGRlciwgZGVzdEZpbGVuYW1lLCBjb250ZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVDb3B5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoYFRoZXJlIHdhcyBhbiBnZW5lcmF0aW5nIGZyb20gdGhlIHRlbXBsYXRlYCwgZXJyLCB7IHNyY0ZvbGRlciwgc3JjRmlsZW5hbWUyLCBkZXN0Rm9sZGVyLCBkZXN0RmlsZW5hbWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9uZUNvcHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihgQ2FuIG5vdCBmaW5kIGEgc291cmNlIGZvciAnJHtzcmNGaWxlbmFtZX0nIHdpdGggdGhlIHBvc3NpYmxlIGV4dGVuc2lvbnMgWyR7cG9zc2libGVFeHRlbnNpb25zLmpvaW4oXCIsIFwiKX1dYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVTdWJzdGl0dXRpb25zKG5hbWU6IHN0cmluZywgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24pOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgICAgICBjb25zdCBzdWJzdGl0dXRpb25zOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcblxuICAgICAgICBjb25zdCB3b3Jkczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGlzTG93ZXIgPSBuYW1lW2ldLnRvTG93ZXJDYXNlKCkgPT09IG5hbWVbaV07XG4gICAgICAgICAgICBpZiAoaXNMb3dlcikge1xuICAgICAgICAgICAgICAgIGlmICh3b3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgd29yZHMucHVzaChuYW1lW2ldLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmRzW3dvcmRzLmxlbmd0aCAtIDFdICs9IG5hbWVbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKG5hbWVbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic3RpdHV0aW9ucy5HRU5fTkFNRSA9IG5hbWU7XG4gICAgICAgIHN1YnN0aXR1dGlvbnMuR0VOX05BTUVfU05BS0UgPSB3b3Jkcy5qb2luKFwiLVwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBzdWJzdGl0dXRpb25zLkdFTl9OQU1FX0NBTUVMID0gd29yZHNbMF1bMF0udG9Mb3dlckNhc2UoKSArIHdvcmRzWzBdLnN1YnN0cmluZygxKSArIHdvcmRzLnNsaWNlKDEpLmpvaW4oXCJcIik7XG4gICAgICAgIHN1YnN0aXR1dGlvbnMuR0VOX05BTUVfUEFTQ0FMID0gd29yZHMuam9pbihcIlwiKTtcbiAgICAgICAgc3Vic3RpdHV0aW9ucy5HRU5fTkFNRV9IVU1BTiA9IHdvcmRzLmpvaW4oXCIgXCIpO1xuXG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RyaW5nU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0sIGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgb3V0cHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoc3Vic3RpdHV0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UobmV3IFJlZ0V4cChgeyR7a2V5fX1gLCBcImdcIiksIHN1YnN0aXR1dGlvbnNba2V5XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufVxuIl19
