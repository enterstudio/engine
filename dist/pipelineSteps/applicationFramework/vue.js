"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const templateHelper_1 = require("../../helpers/templateHelper");
const sharedAppFramework_1 = require("../sharedAppFramework");
class Vue extends sharedAppFramework_1.SharedAppFramework {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.applicationFramework, "Vue");
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.viewExtensions, "vue", true);
            }
            return 0;
        });
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["unitejs-protractor-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "Protractor"));
            engineVariables.toggleDevDependency(["unitejs-webdriver-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO"));
            engineVariables.toggleDevDependency(["babel-plugin-transform-decorators-legacy", "babel-plugin-transform-class-properties"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["babel-eslint"], mainCondition && _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            engineVariables.toggleClientPackage("vue", {
                name: "vue",
                main: "dist/vue.runtime.js",
                mainMinified: "dist/vue.runtime.min.js"
            }, mainCondition);
            engineVariables.toggleClientPackage("vue-router", {
                name: "vue-router",
                main: "dist/vue-router.js",
                mainMinified: "dist/vue-router.min.js"
            }, mainCondition);
            engineVariables.toggleClientPackage("vue-class-component", {
                name: "vue-class-component",
                main: "dist/vue-class-component.js",
                mainMinified: "dist/vue-class-component.min.js"
            }, mainCondition);
            engineVariables.toggleClientPackage("require-css", {
                name: "require-css",
                main: "css.js",
                map: { css: "require-css" }
            }, mainCondition && _super("condition").call(this, uniteConfiguration.bundler, "RequireJS"));
            engineVariables.toggleClientPackage("systemjs-plugin-css", {
                name: "systemjs-plugin-css",
                main: "css.js",
                map: { css: "systemjs-plugin-css" },
                loaders: { "*.css": "css" }
            }, mainCondition &&
                (_super("condition").call(this, uniteConfiguration.bundler, "Browserify") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "SystemJSBuilder") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "Webpack")));
            const usingGulp = _super("condition").call(this, uniteConfiguration.taskManager, "Gulp");
            engineVariables.toggleDevDependency(["gulp-inline-vue-template"], mainCondition && usingGulp);
            if (mainCondition && usingGulp) {
                engineVariables.buildTranspileInclude.push("const inlineVue = require(\"gulp-inline-vue-template\");");
                if (_super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                    _super("createLoaderTypeMapReplacement").call(this, engineVariables, "css", "css");
                }
                engineVariables.buildTranspilePostBuild.push(`        .pipe(inlineVue())`);
                engineVariables.buildTranspilePostBuild.push(`        .on("error", (err) => {`);
                engineVariables.buildTranspilePostBuild.push(`            display.error(err.toString());`);
                engineVariables.buildTranspilePostBuild.push(`        })`);
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, mainCondition);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "variable-name", [true, "allow-leading-underscore"], mainCondition);
            }
            const protractorConfiguration = engineVariables.getConfiguration("Protractor");
            if (protractorConfiguration) {
                const plugin = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, fileSystem.pathCombine(engineVariables.www.package, "unitejs-protractor-plugin")));
                arrayHelper_1.ArrayHelper.addRemove(protractorConfiguration.plugins, { path: plugin }, mainCondition, (object, item) => object.path === item.path);
            }
            const webdriverIoPlugins = engineVariables.getConfiguration("WebdriverIO.Plugins");
            if (webdriverIoPlugins) {
                arrayHelper_1.ArrayHelper.addRemove(webdriverIoPlugins, "unitejs-webdriver-plugin", mainCondition);
            }
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-decorators-legacy", mainCondition);
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-class-properties", mainCondition);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "allowSyntheticDefaultImports", true, mainCondition);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const jestConfiguration = engineVariables.getConfiguration("Jest");
            if (jestConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(jestConfiguration.moduleNameMapper, "\\.vue$", "<rootDir>/test/unit/dummy.mock.js", mainCondition);
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                const isTypeScript = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript");
                const sourceExtension = isTypeScript ? ".ts" : ".js";
                const srcFiles = [
                    `app${sourceExtension}`,
                    `router${sourceExtension}`,
                    `child/child${sourceExtension}`,
                    `bootstrapper${sourceExtension}`
                ];
                if (isTypeScript) {
                    srcFiles.push("customTypes/vue-module.d.ts");
                }
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, srcFiles, false);
                if (ret === 0) {
                    ret = yield _super("generateAppSource").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`entryPoint${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppHtml").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.vue", "child/child.vue"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`child/child`]);
                }
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`, `bootstrapper.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                }
                return ret;
            }
            else {
                return 0;
            }
        });
    }
    insertRoutes(logger, fileSystem, uniteConfiguration, engineVariables, routes) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
            const bracketSpacing = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? " " : "";
            let routerItems = [];
            const importItems = [];
            const routeItems = [];
            let navigationLinks = [];
            const keys = Object.keys(routes || {});
            for (let i = 0; i < keys.length; i++) {
                const route = routes[keys[i]];
                const words = templateHelper_1.TemplateHelper.generateWords(route.moduleType);
                const camel = templateHelper_1.TemplateHelper.createCamel(words);
                const human = templateHelper_1.TemplateHelper.createHuman(words);
                importItems.push(`import {${bracketSpacing}${route.moduleType}${bracketSpacing}} from "${route.modulePath}";`);
                routerItems.push(`{${bracketSpacing}path: "/${keys[i]}", name: "${camel}", component: ${route.moduleType}${bracketSpacing}}`);
                routeItems.push(`/#/${keys[i]}`);
                navigationLinks.push(`<router-link to="/${keys[i]}">${human}</router-link>`);
            }
            const remainingInserts = {};
            let ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `router${sourceExtension}`, (srcContent) => {
                let content = srcContent;
                const importsRemaining = _super("insertReplaceImports").call(this, content, importItems);
                content = importsRemaining.content;
                remainingInserts.imports = importsRemaining.remaining;
                const routerRegEx = /([ |\t]*)(routes: \[)([\s]*)([\s\S]*?)(\s*\])/;
                const routerResults = routerRegEx.exec(content);
                if (routerResults && routerResults.length > 5) {
                    const currentRouters = routerResults[4].trim();
                    routerItems = routerItems.filter(ri => currentRouters.replace(/\s/g, "").indexOf(ri.replace(/\s/g, "")) < 0);
                    if (routerItems.length > 0) {
                        const routerIndent = routerResults[1];
                        const routerVar = routerResults[2];
                        const routerNewline = routerResults[3];
                        const routerEnd = routerResults[5];
                        let replaceRouters = `${routerNewline}${currentRouters},${routerNewline}`;
                        replaceRouters += `${routerItems.map(ri => ri.replace(/\n/g, routerNewline)).join(`,${routerNewline}`)}`;
                        content = content.replace(routerResults[0], `${routerIndent}${routerVar}${replaceRouters}${routerEnd}`);
                    }
                }
                else {
                    remainingInserts.router = routerItems;
                }
                return content;
            });
            if (ret === 0) {
                ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app.vue`, (srcContent) => {
                    let content = srcContent;
                    const navigationRegEx = /(<nav.*>)(\s*)([\s|\S]*?)((\s*)<\/nav>)/;
                    const navigationResults = navigationRegEx.exec(content);
                    if (navigationResults && navigationResults.length > 4) {
                        const currentLinks = navigationResults[3].trim();
                        navigationLinks = navigationLinks.filter(ri => currentLinks.replace(/\s/g, "").indexOf(ri.replace(/\s/g, "")) < 0);
                        if (navigationLinks.length > 0) {
                            const navigationStart = navigationResults[1];
                            const navigationNewline = navigationResults[2];
                            const nvaigationEnd = navigationResults[4];
                            let replaceRouters = `${navigationNewline}${currentLinks}${navigationNewline}`;
                            replaceRouters += `${navigationLinks.map(ri => ri.replace(/\n/g, navigationNewline)).join(`${navigationNewline}`)}`;
                            content = content.replace(navigationResults[0], `${navigationStart}${replaceRouters}${nvaigationEnd}`);
                        }
                    }
                    else {
                        remainingInserts.navigationLinks = navigationLinks;
                    }
                    return content;
                });
            }
            if (ret === 0) {
                _super("insertCompletion").call(this, logger, remainingInserts, routeItems);
            }
            return ret;
        });
    }
}
exports.Vue = Vue;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
