"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate scaffolding for angular application.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const sharedAppFramework_1 = require("../sharedAppFramework");
class Angular extends sharedAppFramework_1.SharedAppFramework {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.applicationFramework, "Angular");
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (_super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                logger.error(`Angular does not currently support bundling with ${uniteConfiguration.bundler}`);
                return 1;
            }
            arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.viewExtensions, "html", true);
            return 0;
        });
    }
    install(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleDependencies(logger, uniteConfiguration, engineVariables, true);
            const usingGulp = _super("condition").call(this, uniteConfiguration.taskManager, "Gulp");
            if (usingGulp) {
                engineVariables.buildTranspileInclude.push("const inline = require(\"gulp-inline-ng2-template\");");
                engineVariables.buildTranspilePreBuild.push(".pipe(buildConfiguration.bundle ? inline({");
                engineVariables.buildTranspilePreBuild.push("                useRelativePaths: true,");
                engineVariables.buildTranspilePreBuild.push("                removeLineBreaks: true,");
                engineVariables.buildTranspilePreBuild.push("                customFilePath: (ext, inlinePath) => ext[0] === \".css\" ?");
                engineVariables.buildTranspilePreBuild.push("                    inlinePath.replace(`\${path.sep}src\${path.sep}`, `\${path.sep}dist\${path.sep}`) : inlinePath");
                engineVariables.buildTranspilePreBuild.push("        }) : gutil.noop())");
            }
            engineVariables.toggleDevDependency(["gulp-inline-ng2-template"], usingGulp);
            engineVariables.toggleDevDependency(["babel-plugin-transform-decorators-legacy"], _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["babel-eslint"], _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            engineVariables.toggleDevDependency(["@types/systemjs"], _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-decorators-legacy", true);
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "__moduleName", true, true);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "module", true, true);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", true);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, true);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, true);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, true);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", { severity: "warning" }, true);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", { severity: "warning" }, true);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "interface-name", false, true);
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
            let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, [
                `app.component${sourceExtension}`,
                `app.module${sourceExtension}`,
                `child/child.component${sourceExtension}`,
                `bootstrapper${sourceExtension}`,
                `entryPoint${sourceExtension}`
            ]);
            if (ret === 0) {
                ret = yield _super("generateAppHtml").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.component.html", "child/child.component.html"]);
                if (ret === 0) {
                    ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.component", "child/child.component"]);
                    if (ret === 0) {
                        ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`]);
                        if (ret === 0) {
                            ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`bootstrapper.spec${sourceExtension}`], true);
                            if (ret === 0) {
                                ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`app.module.spec${sourceExtension}`], false);
                                if (ret === 0) {
                                    ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        });
    }
    uninstall(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleDependencies(logger, uniteConfiguration, engineVariables, false);
            engineVariables.toggleDevDependency(["gulp-inline-ng2-template"], false);
            engineVariables.toggleDevDependency(["babel-plugin-transform-decorators-legacy"], false);
            engineVariables.toggleDevDependency(["babel-eslint"], false);
            engineVariables.toggleDevDependency(["@types/systemjs"], false);
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-decorators-legacy", false);
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "__moduleName", true, false);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "module", true, false);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", false);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, false);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, false);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, false);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", undefined, false);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", undefined, false);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "interface-name", undefined, false);
            }
            return 0;
        });
    }
    toggleDependencies(logger, uniteConfiguration, engineVariables, toggle) {
        const packages = ["core", "common", "compiler", "platform-browser", "platform-browser-dynamic", "http", "router", "forms"];
        packages.forEach(pkg => {
            const testAdditions = {};
            if (pkg !== "forms") {
                testAdditions[`@angular/${pkg}/testing`] = `bundles/${pkg}-testing.umd.js`;
            }
            engineVariables.toggleClientPackage(`@angular/${pkg}`, `bundles/${pkg}.umd.js`, `bundles/${pkg}.umd.min.js`, testAdditions, false, "both", "none", false, undefined, undefined, undefined, undefined, toggle);
        });
        engineVariables.toggleClientPackage("rxjs", "*", undefined, undefined, false, "both", "none", false, undefined, undefined, undefined, undefined, toggle);
        engineVariables.toggleClientPackage("core-js", "client/shim.js", undefined, undefined, false, "both", "both", false, undefined, undefined, undefined, undefined, toggle);
        engineVariables.toggleClientPackage("zone.js", "dist/zone.js", "dist/zone.min.js", {
            "long-stack-trace-zone": "dist/long-stack-trace-zone.js",
            proxy: "dist/proxy.js",
            "sync-test": "dist/sync-test.js",
            "runner-patch": super.condition(uniteConfiguration.unitTestFramework, "Jasmine") ? "dist/jasmine-patch.js" : "dist/mocha-patch.js",
            "async-test": "dist/async-test.js",
            "fake-async-test": "dist/fake-async-test.js"
        }, false, "both", "both", false, undefined, undefined, undefined, undefined, toggle);
        engineVariables.toggleClientPackage("reflect-metadata", "Reflect.js", undefined, undefined, false, "both", "both", false, undefined, undefined, undefined, undefined, toggle);
    }
}
exports.Angular = Angular;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
