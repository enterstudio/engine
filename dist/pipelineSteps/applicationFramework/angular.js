"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate scaffolding for angular application.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const templateHelper_1 = require("../../helpers/templateHelper");
const sharedAppFramework_1 = require("../sharedAppFramework");
class Angular extends sharedAppFramework_1.SharedAppFramework {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.applicationFramework, "Angular");
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                if (_super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                    logger.error(`Angular does not currently support bundling with ${uniteConfiguration.bundler}`);
                    return 1;
                }
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.viewExtensions, "html", true);
            }
            return 0;
        });
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleDependencies(logger, uniteConfiguration, engineVariables, mainCondition);
            const usingGulp = _super("condition").call(this, uniteConfiguration.taskManager, "Gulp");
            if (mainCondition && usingGulp) {
                engineVariables.buildTranspileInclude.push("const inline = require(\"gulp-inline-ng2-template\");");
                engineVariables.buildTranspileInclude.push("const replace = require(\"gulp-replace\");");
                engineVariables.buildTranspilePreBuild.push("        .pipe(buildConfiguration.bundle ? inline({");
                engineVariables.buildTranspilePreBuild.push("                useRelativePaths: true,");
                engineVariables.buildTranspilePreBuild.push("                removeLineBreaks: true,");
                engineVariables.buildTranspilePreBuild.push("                customFilePath: (ext, inlinePath) => ext[0] === \".css\" ?");
                engineVariables.buildTranspilePreBuild.push("                    inlinePath.replace(`\${path.sep}src\${path.sep}`, `\${path.sep}dist\${path.sep}`) : inlinePath");
                engineVariables.buildTranspilePreBuild.push("        }) : gutil.noop())");
                const moduleIdRegEx = engineVariables.moduleId.replace(/\./g, "\\.").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
                engineVariables.buildTranspilePreBuild.push(`        .pipe(buildConfiguration.bundle ? replace(/moduleId: ${moduleIdRegEx},/, "") : gutil.noop())`);
            }
            engineVariables.toggleDevDependency(["gulp-inline-ng2-template"], mainCondition && usingGulp);
            engineVariables.toggleDevDependency(["unitejs-protractor-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "Protractor"));
            engineVariables.toggleDevDependency(["unitejs-webdriver-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO"));
            engineVariables.toggleDevDependency(["babel-plugin-transform-decorators-legacy", "babel-plugin-transform-class-properties"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["babel-eslint"], mainCondition && _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            engineVariables.toggleDevDependency(["@types/systemjs"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            const protractorConfiguration = engineVariables.getConfiguration("Protractor");
            if (protractorConfiguration) {
                const plugin = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, fileSystem.pathCombine(engineVariables.www.package, "unitejs-protractor-plugin")));
                arrayHelper_1.ArrayHelper.addRemove(protractorConfiguration.plugins, { path: plugin }, mainCondition, (object, item) => object.path === item.path);
            }
            const webdriverIoPlugins = engineVariables.getConfiguration("WebdriverIO.Plugins");
            if (webdriverIoPlugins) {
                arrayHelper_1.ArrayHelper.addRemove(webdriverIoPlugins, "unitejs-webdriver-plugin", mainCondition);
            }
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-decorators-legacy", mainCondition);
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-class-properties", mainCondition);
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "__moduleName", true, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "module", true, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, mainCondition);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "interface-name", false, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "variable-name", [true, "allow-leading-underscore"], mainCondition);
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, [
                    `app.component${sourceExtension}`,
                    `app.module${sourceExtension}`,
                    `child/child.component${sourceExtension}`,
                    `bootstrapper${sourceExtension}`
                ], false);
                if (ret === 0) {
                    ret = yield _super("generateAppSource").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`entryPoint${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppHtml").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.component.html", "child/child.component.html"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.component", "child/child.component"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`bootstrapper.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`app.module.spec${sourceExtension}`], false);
                }
                if (ret === 0) {
                    ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                }
                return ret;
            }
            else {
                return 0;
            }
        });
    }
    toggleDependencies(logger, uniteConfiguration, engineVariables, mainCondition) {
        const packages = ["core", "common", "compiler", "platform-browser", "platform-browser-dynamic", "http", "router", "forms"];
        packages.forEach(pkg => {
            const testAdditions = {};
            if (pkg !== "forms") {
                testAdditions[`@angular/${pkg}/testing`] = `bundles/${pkg}-testing.umd.js`;
            }
            engineVariables.toggleClientPackage(`@angular/${pkg}`, {
                name: `@angular/${pkg}`,
                main: `bundles/${pkg}.umd.js`,
                mainMinified: `bundles/${pkg}.umd.min.js`,
                testingAdditions: testAdditions
            }, mainCondition);
        });
        engineVariables.toggleClientPackage("rxjs", {
            name: "rxjs",
            main: "*",
            mainLib: ["*.js",
                "add/**/*.js",
                "observable/**/*.js",
                "operator/**/*.js",
                "operators/**/*.js",
                "scheduler/**/*.js",
                "symbol/**/*.js",
                "testing/**/*.js",
                "util/**/*.js"
            ]
        }, mainCondition);
        engineVariables.toggleClientPackage("core-js", {
            name: "core-js",
            main: "client/shim.js",
            mainMinified: "client/shim.min.js",
            scriptIncludeMode: "both"
        }, mainCondition);
        engineVariables.toggleClientPackage("zone.js", {
            name: "zone.js",
            main: "dist/zone.js",
            mainMinified: "dist/zone.min.js",
            testingAdditions: {
                "long-stack-trace-zone": "dist/long-stack-trace-zone.js",
                proxy: "dist/proxy.js",
                "sync-test": "dist/sync-test.js",
                "runner-patch": super.condition(uniteConfiguration.unitTestFramework, "Jasmine") ? "dist/jasmine-patch.js" : "dist/mocha-patch.js",
                "async-test": "dist/async-test.js",
                "fake-async-test": "dist/fake-async-test.js"
            },
            scriptIncludeMode: "both"
        }, mainCondition);
        // main condition false to always remove, since ng5 no longer requires
        engineVariables.toggleClientPackage("reflect-metadata", {
            name: "reflect-metadata"
        }, false);
    }
    insertRoutes(logger, fileSystem, uniteConfiguration, engineVariables, routes) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
            const bracketSpacing = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? " " : "";
            let routerItems = [];
            const importItems = [];
            let declarationItems = [];
            const routeItems = [];
            let navigationLinks = [];
            const keys = Object.keys(routes || {});
            for (let i = 0; i < keys.length; i++) {
                const route = routes[keys[i]];
                const words = templateHelper_1.TemplateHelper.generateWords(route.moduleType);
                const human = templateHelper_1.TemplateHelper.createHuman(words);
                importItems.push(`import {${bracketSpacing}${route.moduleType}${bracketSpacing}} from "${route.modulePath}";`);
                routerItems.push(`{${bracketSpacing}path: "${keys[i]}", component: ${route.moduleType}${bracketSpacing}}`);
                declarationItems.push(route.moduleType);
                routeItems.push(`/${keys[i]}`);
                navigationLinks.push(`<a routerLink="/${keys[i]}">${human}</a>`);
            }
            const remainingInserts = {};
            let ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app.module${sourceExtension}`, (srcContent) => {
                let content = srcContent;
                const importsRemaining = _super("insertReplaceImports").call(this, content, importItems);
                content = importsRemaining.content;
                remainingInserts.imports = importsRemaining.remaining;
                const routerRegEx = /(const appRoutes = \[)([\s]*)([\s\S]*?)(\];)/;
                const routerResults = routerRegEx.exec(content);
                if (routerResults && routerResults.length > 3) {
                    const currentRouters = routerResults[3].trim();
                    routerItems = routerItems.filter(ri => currentRouters.replace(/\s/g, "").indexOf(ri.replace(/\s/g, "")) < 0);
                    if (routerItems.length > 0) {
                        const routerVar = routerResults[1];
                        const routerNewline = routerResults[2];
                        const routerEnd = routerResults[4];
                        let replaceRouters = `${routerNewline}${currentRouters},${routerNewline}`;
                        replaceRouters += `${routerItems.map(ri => ri.replace(/\n/g, routerNewline)).join(`,${routerNewline}`)}\n`;
                        content = content.replace(routerResults[0], `${routerVar}${replaceRouters}${routerEnd}`);
                    }
                }
                else {
                    remainingInserts.router = routerItems;
                }
                const declarationRegEx = /(declarations: \[)(\s*)([\s\S]*?)(\s*\])/;
                const declarationResults = declarationRegEx.exec(content);
                if (declarationResults && declarationResults.length > 3) {
                    const currentDeclarations = declarationResults[3];
                    declarationItems = declarationItems.filter(di => currentDeclarations.indexOf(di) < 0);
                    if (declarationItems.length > 0) {
                        const declarationStart = declarationResults[1];
                        const declarationNewline = declarationResults[2];
                        const declarationEnd = declarationResults[4];
                        let replaceDeclarations = `${declarationNewline}${currentDeclarations},${declarationNewline}`;
                        replaceDeclarations += `${declarationItems.join(`,${declarationNewline}`)}`;
                        content = content.replace(declarationResults[0], `${declarationStart}${replaceDeclarations}${declarationEnd}`);
                    }
                }
                else {
                    remainingInserts.declarations = declarationItems;
                }
                return content;
            });
            if (ret === 0) {
                ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app.component.html`, (srcContent) => {
                    let content = srcContent;
                    const navigationRegEx = /(<nav.*>)(\s*)([\s|\S]*?)((\s*)<\/nav>)/;
                    const navigationResults = navigationRegEx.exec(content);
                    if (navigationResults && navigationResults.length > 4) {
                        const currentLinks = navigationResults[3].trim();
                        navigationLinks = navigationLinks.filter(ri => currentLinks.replace(/\s/g, "").indexOf(ri.replace(/\s/g, "")) < 0);
                        if (navigationLinks.length > 0) {
                            const navigationStart = navigationResults[1];
                            const navigationNewline = navigationResults[2];
                            const nvaigationEnd = navigationResults[4];
                            let replaceRouters = `${navigationNewline}${currentLinks}${navigationNewline}`;
                            replaceRouters += `${navigationLinks.map(ri => ri.replace(/\n/g, navigationNewline)).join(`${navigationNewline}`)}`;
                            content = content.replace(navigationResults[0], `${navigationStart}${replaceRouters}${nvaigationEnd}`);
                        }
                    }
                    else {
                        remainingInserts.navigationLinks = navigationLinks;
                    }
                    return content;
                });
            }
            if (ret === 0) {
                _super("insertCompletion").call(this, logger, remainingInserts, routeItems);
            }
            return ret;
        });
    }
}
exports.Angular = Angular;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waXBlbGluZVN0ZXBzL2FwcGxpY2F0aW9uRnJhbWV3b3JrL2FuZ3VsYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsNEVBQXlFO0FBQ3pFLDhFQUEyRTtBQVkzRSxpRUFBOEQ7QUFFOUQsOERBQTJEO0FBRTNELGFBQXFCLFNBQVEsdUNBQWtCO0lBQ3BDLGFBQWEsQ0FBQyxrQkFBc0MsRUFBRSxlQUFnQztRQUN6RixNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRVksVUFBVSxDQUFDLE1BQWUsRUFBRSxVQUF1QixFQUFFLGtCQUFzQyxFQUFFLGVBQWdDLEVBQUUsYUFBc0I7OztZQUM5SixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixFQUFFLENBQUMsQ0FBQyxtQkFBZSxZQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNELE1BQU0sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7b0JBQy9GLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsQ0FBQztnQkFDRCx5QkFBVyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNFLENBQUM7WUFDRCxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2IsQ0FBQztLQUFBO0lBRVksU0FBUyxDQUFDLE1BQWUsRUFBRSxVQUF1QixFQUFFLGtCQUFzQyxFQUFFLGVBQWdDLEVBQUUsYUFBc0I7OztZQUM3SixJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVwRixNQUFNLFNBQVMsR0FBRyxtQkFBZSxZQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMxRSxFQUFFLENBQUMsQ0FBQyxhQUFhLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDN0IsZUFBZSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO2dCQUNwRyxlQUFlLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7Z0JBRXpGLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsb0RBQW9ELENBQUMsQ0FBQztnQkFDbEcsZUFBZSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO2dCQUN2RixlQUFlLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLHlDQUF5QyxDQUFDLENBQUM7Z0JBQ3ZGLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsNEVBQTRFLENBQUMsQ0FBQztnQkFDMUgsZUFBZSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxvSEFBb0gsQ0FBQyxDQUFDO2dCQUNsSyxlQUFlLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7Z0JBRTFFLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBRWpILGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZ0VBQWdFLGFBQWEseUJBQXlCLENBQUMsQ0FBQztZQUN4SixDQUFDO1lBRUQsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsMEJBQTBCLENBQUMsRUFBRSxhQUFhLElBQUksU0FBUyxDQUFDLENBQUM7WUFFOUYsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsMkJBQTJCLENBQUMsRUFBRSxhQUFhLElBQUksbUJBQWUsWUFBQyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNySixlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLGFBQWEsSUFBSSxtQkFBZSxZQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBRXJKLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLDBDQUEwQyxFQUFFLHlDQUF5QyxDQUFDLEVBQ3ZGLGFBQWEsSUFBSSxtQkFBZSxZQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3ZILGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLGFBQWEsSUFBSSxtQkFBZSxZQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzdILGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEVBQ25CLGFBQWEsSUFBSSxtQkFBZSxZQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBRXZILE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUEwQixZQUFZLENBQUMsQ0FBQztZQUN4RyxFQUFFLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQzdCLFVBQVUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25KLHlCQUFXLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6SSxDQUFDO1lBQ0QsTUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQVcscUJBQXFCLENBQUMsQ0FBQztZQUM3RixFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLHlCQUFXLENBQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFLDBCQUEwQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQ3pGLENBQUM7WUFFRCxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBcUIsT0FBTyxDQUFDLENBQUM7WUFDekYsRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO2dCQUNyQix5QkFBVyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQ2hHLHlCQUFXLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNuRyxDQUFDO1lBRUQsTUFBTSxtQkFBbUIsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQXNCLFFBQVEsQ0FBQyxDQUFDO1lBQzVGLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztnQkFDdEIsMkJBQVksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQ3pGLDJCQUFZLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUNuRiwyQkFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUNyRiwyQkFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzFGLENBQUM7WUFFRCxNQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBMEIsWUFBWSxDQUFDLENBQUM7WUFDeEcsRUFBRSxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO2dCQUMxQiwyQkFBWSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQ25ILENBQUM7WUFFRCxNQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBMEIsWUFBWSxDQUFDLENBQUM7WUFDeEcsRUFBRSxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO2dCQUMxQiwyQkFBWSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQ25ILENBQUM7WUFFRCxNQUFNLG1CQUFtQixHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBc0IsUUFBUSxDQUFDLENBQUM7WUFDNUYsRUFBRSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO2dCQUN0QiwyQkFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUN0RywyQkFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQ2hILDJCQUFZLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQzFGLDJCQUFZLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUMxSCxDQUFDO1lBRUQsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUM7S0FBQTtJQUVZLFFBQVEsQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQyxFQUFFLGFBQXNCOzs7WUFDNUosRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxlQUFlLEdBQUcsbUJBQWUsWUFBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFFekcsSUFBSSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUU7b0JBQzVGLGdCQUFnQixlQUFlLEVBQUU7b0JBQ2pDLGFBQWEsZUFBZSxFQUFFO29CQUM5Qix3QkFBd0IsZUFBZSxFQUFFO29CQUN6QyxlQUFlLGVBQWUsRUFBRTtpQkFDbkMsRUFDc0MsS0FBSyxDQUFDLENBQUM7Z0JBRTlDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNaLEdBQUcsR0FBRyxNQUFNLDJCQUF1QixZQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLENBQUMsYUFBYSxlQUFlLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN6SSxDQUFDO2dCQUVELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNaLEdBQUcsR0FBRyxNQUFNLHlCQUFxQixZQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO2dCQUNySixDQUFDO2dCQUVELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNaLEdBQUcsR0FBRyxNQUFNLHdCQUFvQixZQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLENBQUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQztnQkFDMUksQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWixHQUFHLEdBQUcsTUFBTSx5QkFBcUIsWUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxDQUFDLFdBQVcsZUFBZSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDckksQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWixHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsQ0FBQyxvQkFBb0IsZUFBZSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDOUksQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWixHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsQ0FBQyxrQkFBa0IsZUFBZSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDN0ksQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWixHQUFHLEdBQUcsTUFBTSxxQkFBaUIsWUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxDQUFDO2dCQUMzRixDQUFDO2dCQUVELE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDZixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNiLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFTSxrQkFBa0IsQ0FBQyxNQUFlLEVBQUUsa0JBQXNDLEVBQUUsZUFBZ0MsRUFBRSxhQUFzQjtRQUN2SSxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0gsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQixNQUFNLGFBQWEsR0FBNkIsRUFBRSxDQUFDO1lBQ25ELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixhQUFhLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztZQUMvRSxDQUFDO1lBRUQsZUFBZSxDQUFDLG1CQUFtQixDQUFDLFlBQVksR0FBRyxFQUFFLEVBQUU7Z0JBQ25ELElBQUksRUFBRSxZQUFZLEdBQUcsRUFBRTtnQkFDdkIsSUFBSSxFQUFFLFdBQVcsR0FBRyxTQUFTO2dCQUM3QixZQUFZLEVBQUUsV0FBVyxHQUFHLGFBQWE7Z0JBQ3pDLGdCQUFnQixFQUFFLGFBQWE7YUFDbEMsRUFDbUMsYUFBYSxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxlQUFlLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO1lBQ3hDLElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSSxFQUFFLEdBQUc7WUFDVCxPQUFPLEVBQUUsQ0FBQyxNQUFNO2dCQUNaLGFBQWE7Z0JBQ2Isb0JBQW9CO2dCQUNwQixrQkFBa0I7Z0JBQ2xCLG1CQUFtQjtnQkFDbkIsbUJBQW1CO2dCQUNuQixnQkFBZ0I7Z0JBQ2hCLGlCQUFpQjtnQkFDakIsY0FBYzthQUNqQjtTQUNKLEVBQ21DLGFBQWEsQ0FBQyxDQUFDO1FBRW5ELGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUU7WUFDM0MsSUFBSSxFQUFFLFNBQVM7WUFDZixJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLFlBQVksRUFBRSxvQkFBb0I7WUFDbEMsaUJBQWlCLEVBQUUsTUFBTTtTQUM1QixFQUNtQyxhQUFhLENBQUMsQ0FBQztRQUVuRCxlQUFlLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFO1lBQzNDLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLGNBQWM7WUFDcEIsWUFBWSxFQUFFLGtCQUFrQjtZQUNoQyxnQkFBZ0IsRUFBRTtnQkFDZCx1QkFBdUIsRUFBRSwrQkFBK0I7Z0JBQ3hELEtBQUssRUFBRSxlQUFlO2dCQUN0QixXQUFXLEVBQUUsbUJBQW1CO2dCQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtnQkFDbEksWUFBWSxFQUFFLG9CQUFvQjtnQkFDbEMsaUJBQWlCLEVBQUUseUJBQXlCO2FBQy9DO1lBQ0QsaUJBQWlCLEVBQUUsTUFBTTtTQUM1QixFQUNtQyxhQUFhLENBQUMsQ0FBQztRQUVuRCxzRUFBc0U7UUFDdEUsZUFBZSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixFQUFFO1lBQ3BELElBQUksRUFBRSxrQkFBa0I7U0FDM0IsRUFDbUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVZLFlBQVksQ0FBQyxNQUFlLEVBQ2YsVUFBdUIsRUFDdkIsa0JBQXNDLEVBQ3RDLGVBQWdDLEVBQ2hDLE1BQXdEOzs7WUFDOUUsTUFBTSxlQUFlLEdBQUcsbUJBQWUsWUFBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUN6RyxNQUFNLGNBQWMsR0FBRyxtQkFBZSxZQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBRW5HLElBQUksV0FBVyxHQUFhLEVBQUUsQ0FBQztZQUMvQixNQUFNLFdBQVcsR0FBYSxFQUFFLENBQUM7WUFDakMsSUFBSSxnQkFBZ0IsR0FBYSxFQUFFLENBQUM7WUFDcEMsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1lBQ2hDLElBQUksZUFBZSxHQUFhLEVBQUUsQ0FBQztZQUVuQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN2QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDbkMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUU5QixNQUFNLEtBQUssR0FBRywrQkFBYyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzdELE1BQU0sS0FBSyxHQUFHLCtCQUFjLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUVoRCxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsY0FBYyxHQUFHLEtBQUssQ0FBQyxVQUFVLEdBQUcsY0FBYyxXQUFXLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDO2dCQUMvRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksY0FBYyxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEtBQUssQ0FBQyxVQUFVLEdBQUcsY0FBYyxHQUFHLENBQUMsQ0FBQztnQkFDM0csZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDeEMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQy9CLGVBQWUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ3JFLENBQUM7WUFFRCxNQUFNLGdCQUFnQixHQUErQixFQUFFLENBQUM7WUFFeEQsSUFBSSxHQUFHLEdBQUcsTUFBTSx1QkFBbUIsWUFBQyxNQUFNLEVBQ04sVUFBVSxFQUNWLGVBQWUsRUFDZixhQUFhLGVBQWUsRUFBRSxFQUM5QixDQUFDLFVBQVUsRUFBRSxFQUFFO2dCQUMzQyxJQUFJLE9BQU8sR0FBRyxVQUFVLENBQUM7Z0JBRXpCLE1BQU0sZ0JBQWdCLEdBQUcsOEJBQTBCLFlBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUMxRSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO2dCQUNuQyxnQkFBZ0IsQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO2dCQUV0RCxNQUFNLFdBQVcsR0FBRyw4Q0FBOEMsQ0FBQztnQkFDbkUsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDaEQsRUFBRSxDQUFDLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUMsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUUvQyxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUU3RyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3pCLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN2QyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBRW5DLElBQUksY0FBYyxHQUFHLEdBQUcsYUFBYSxHQUFHLGNBQWMsSUFBSSxhQUFhLEVBQUUsQ0FBQzt3QkFDMUUsY0FBYyxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDO3dCQUMzRyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxTQUFTLEdBQUcsY0FBYyxHQUFHLFNBQVMsRUFBRSxDQUFDLENBQUM7b0JBQzdGLENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDO2dCQUMxQyxDQUFDO2dCQUVELE1BQU0sZ0JBQWdCLEdBQUcsMENBQTBDLENBQUM7Z0JBRXBFLE1BQU0sa0JBQWtCLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMxRCxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdEQsTUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFbEQsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUV0RixFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDOUIsTUFBTSxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDL0MsTUFBTSxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDakQsTUFBTSxjQUFjLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzdDLElBQUksbUJBQW1CLEdBQUcsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO3dCQUM5RixtQkFBbUIsSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLGtCQUFrQixFQUFFLENBQUMsRUFBRSxDQUFDO3dCQUM1RSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLGdCQUFnQixHQUFHLG1CQUFtQixHQUFHLGNBQWMsRUFBRSxDQUFDLENBQUM7b0JBQ25ILENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixnQkFBZ0IsQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQ3JELENBQUM7Z0JBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztZQUVQLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNaLEdBQUcsR0FBRyxNQUFNLHVCQUFtQixZQUFDLE1BQU0sRUFDTixVQUFVLEVBQ1YsZUFBZSxFQUNmLG9CQUFvQixFQUNwQixDQUFDLFVBQVUsRUFBRSxFQUFFO29CQUN2QyxJQUFJLE9BQU8sR0FBRyxVQUFVLENBQUM7b0JBRXpCLE1BQU0sZUFBZSxHQUFHLHlDQUF5QyxDQUFDO29CQUNsRSxNQUFNLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3hELEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNwRCxNQUFNLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzt3QkFFakQsZUFBZSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzt3QkFFbkgsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUM3QixNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDN0MsTUFBTSxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDL0MsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBRTNDLElBQUksY0FBYyxHQUFHLEdBQUcsaUJBQWlCLEdBQUcsWUFBWSxHQUFHLGlCQUFpQixFQUFFLENBQUM7NEJBQy9FLGNBQWMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLENBQUM7NEJBQ3BILE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsZUFBZSxHQUFHLGNBQWMsR0FBRyxhQUFhLEVBQUUsQ0FBQyxDQUFDO3dCQUMzRyxDQUFDO29CQUNMLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osZ0JBQWdCLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztvQkFDdkQsQ0FBQztvQkFFRCxNQUFNLENBQUMsT0FBTyxDQUFDO2dCQUNuQixDQUFDLENBQUMsQ0FBQztZQUNYLENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWiwwQkFBc0IsWUFBQyxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFO1lBQ2pFLENBQUM7WUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ2YsQ0FBQztLQUFBO0NBQ0o7QUF0VUQsMEJBc1VDIiwiZmlsZSI6InBpcGVsaW5lU3RlcHMvYXBwbGljYXRpb25GcmFtZXdvcmsvYW5ndWxhci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGlwZWxpbmUgc3RlcCB0byBnZW5lcmF0ZSBzY2FmZm9sZGluZyBmb3IgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqL1xuaW1wb3J0IHsgQXJyYXlIZWxwZXIgfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9oZWxwZXJzL2FycmF5SGVscGVyXCI7XG5pbXBvcnQgeyBPYmplY3RIZWxwZXIgfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9oZWxwZXJzL29iamVjdEhlbHBlclwiO1xuaW1wb3J0IHsgSUZpbGVTeXN0ZW0gfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9pbnRlcmZhY2VzL0lGaWxlU3lzdGVtXCI7XG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSBcInVuaXRlanMtZnJhbWV3b3JrL2Rpc3QvaW50ZXJmYWNlcy9JTG9nZ2VyXCI7XG5pbXBvcnQgeyBCYWJlbENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvYmFiZWwvYmFiZWxDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBFc0xpbnRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL2VzbGludC9lc0xpbnRDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBQcm90cmFjdG9yQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi8uLi9jb25maWd1cmF0aW9uL21vZGVscy9wcm90cmFjdG9yL3Byb3RyYWN0b3JDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBUc0xpbnRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL3RzbGludC90c0xpbnRDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBUeXBlU2NyaXB0Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi8uLi9jb25maWd1cmF0aW9uL21vZGVscy90eXBlU2NyaXB0L3R5cGVTY3JpcHRDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBVbml0ZUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGUvdW5pdGVDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBVbml0ZVBhY2thZ2VSb3V0ZUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGVQYWNrYWdlcy91bml0ZVBhY2thZ2VSb3V0ZUNvbmZpZ3VyYXRpb25cIjtcbmltcG9ydCB7IEphdmFTY3JpcHRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL3ZzY29kZS9qYXZhU2NyaXB0Q29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgRW5naW5lVmFyaWFibGVzIH0gZnJvbSBcIi4uLy4uL2VuZ2luZS9lbmdpbmVWYXJpYWJsZXNcIjtcbmltcG9ydCB7IFRlbXBsYXRlSGVscGVyIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvdGVtcGxhdGVIZWxwZXJcIjtcbmltcG9ydCB7IElBcHBsaWNhdGlvbkZyYW1ld29yayB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL0lBcHBsaWNhdGlvbkZyYW1ld29ya1wiO1xuaW1wb3J0IHsgU2hhcmVkQXBwRnJhbWV3b3JrIH0gZnJvbSBcIi4uL3NoYXJlZEFwcEZyYW1ld29ya1wiO1xuXG5leHBvcnQgY2xhc3MgQW5ndWxhciBleHRlbmRzIFNoYXJlZEFwcEZyYW1ld29yayBpbXBsZW1lbnRzIElBcHBsaWNhdGlvbkZyYW1ld29yayB7XG4gICAgcHVibGljIG1haW5Db25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLmFwcGxpY2F0aW9uRnJhbWV3b3JrLCBcIkFuZ3VsYXJcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGluaXRpYWxpc2UobG9nZ2VyOiBJTG9nZ2VyLCBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzLCBtYWluQ29uZGl0aW9uOiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgaWYgKG1haW5Db25kaXRpb24pIHtcbiAgICAgICAgICAgIGlmIChzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLmJ1bmRsZXIsIFwiUmVxdWlyZUpTXCIpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBBbmd1bGFyIGRvZXMgbm90IGN1cnJlbnRseSBzdXBwb3J0IGJ1bmRsaW5nIHdpdGggJHt1bml0ZUNvbmZpZ3VyYXRpb24uYnVuZGxlcn1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEFycmF5SGVscGVyLmFkZFJlbW92ZSh1bml0ZUNvbmZpZ3VyYXRpb24udmlld0V4dGVuc2lvbnMsIFwiaHRtbFwiLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgY29uZmlndXJlKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbjogYm9vbGVhbik6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIHRoaXMudG9nZ2xlRGVwZW5kZW5jaWVzKGxvZ2dlciwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb24pO1xuXG4gICAgICAgIGNvbnN0IHVzaW5nR3VscCA9IHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24udGFza01hbmFnZXIsIFwiR3VscFwiKTtcbiAgICAgICAgaWYgKG1haW5Db25kaXRpb24gJiYgdXNpbmdHdWxwKSB7XG4gICAgICAgICAgICBlbmdpbmVWYXJpYWJsZXMuYnVpbGRUcmFuc3BpbGVJbmNsdWRlLnB1c2goXCJjb25zdCBpbmxpbmUgPSByZXF1aXJlKFxcXCJndWxwLWlubGluZS1uZzItdGVtcGxhdGVcXFwiKTtcIik7XG4gICAgICAgICAgICBlbmdpbmVWYXJpYWJsZXMuYnVpbGRUcmFuc3BpbGVJbmNsdWRlLnB1c2goXCJjb25zdCByZXBsYWNlID0gcmVxdWlyZShcXFwiZ3VscC1yZXBsYWNlXFxcIik7XCIpO1xuXG4gICAgICAgICAgICBlbmdpbmVWYXJpYWJsZXMuYnVpbGRUcmFuc3BpbGVQcmVCdWlsZC5wdXNoKFwiICAgICAgICAucGlwZShidWlsZENvbmZpZ3VyYXRpb24uYnVuZGxlID8gaW5saW5lKHtcIik7XG4gICAgICAgICAgICBlbmdpbmVWYXJpYWJsZXMuYnVpbGRUcmFuc3BpbGVQcmVCdWlsZC5wdXNoKFwiICAgICAgICAgICAgICAgIHVzZVJlbGF0aXZlUGF0aHM6IHRydWUsXCIpO1xuICAgICAgICAgICAgZW5naW5lVmFyaWFibGVzLmJ1aWxkVHJhbnNwaWxlUHJlQnVpbGQucHVzaChcIiAgICAgICAgICAgICAgICByZW1vdmVMaW5lQnJlYWtzOiB0cnVlLFwiKTtcbiAgICAgICAgICAgIGVuZ2luZVZhcmlhYmxlcy5idWlsZFRyYW5zcGlsZVByZUJ1aWxkLnB1c2goXCIgICAgICAgICAgICAgICAgY3VzdG9tRmlsZVBhdGg6IChleHQsIGlubGluZVBhdGgpID0+IGV4dFswXSA9PT0gXFxcIi5jc3NcXFwiID9cIik7XG4gICAgICAgICAgICBlbmdpbmVWYXJpYWJsZXMuYnVpbGRUcmFuc3BpbGVQcmVCdWlsZC5wdXNoKFwiICAgICAgICAgICAgICAgICAgICBpbmxpbmVQYXRoLnJlcGxhY2UoYFxcJHtwYXRoLnNlcH1zcmNcXCR7cGF0aC5zZXB9YCwgYFxcJHtwYXRoLnNlcH1kaXN0XFwke3BhdGguc2VwfWApIDogaW5saW5lUGF0aFwiKTtcbiAgICAgICAgICAgIGVuZ2luZVZhcmlhYmxlcy5idWlsZFRyYW5zcGlsZVByZUJ1aWxkLnB1c2goXCIgICAgICAgIH0pIDogZ3V0aWwubm9vcCgpKVwiKTtcblxuICAgICAgICAgICAgY29uc3QgbW9kdWxlSWRSZWdFeCA9IGVuZ2luZVZhcmlhYmxlcy5tb2R1bGVJZC5yZXBsYWNlKC9cXC4vZywgXCJcXFxcLlwiKS5yZXBsYWNlKC9cXCgvZywgXCJcXFxcKFwiKS5yZXBsYWNlKC9cXCkvZywgXCJcXFxcKVwiKTtcblxuICAgICAgICAgICAgZW5naW5lVmFyaWFibGVzLmJ1aWxkVHJhbnNwaWxlUHJlQnVpbGQucHVzaChgICAgICAgICAucGlwZShidWlsZENvbmZpZ3VyYXRpb24uYnVuZGxlID8gcmVwbGFjZSgvbW9kdWxlSWQ6ICR7bW9kdWxlSWRSZWdFeH0sLywgXCJcIikgOiBndXRpbC5ub29wKCkpYCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJndWxwLWlubGluZS1uZzItdGVtcGxhdGVcIl0sIG1haW5Db25kaXRpb24gJiYgdXNpbmdHdWxwKTtcblxuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJ1bml0ZWpzLXByb3RyYWN0b3ItcGx1Z2luXCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uZTJlVGVzdFJ1bm5lciwgXCJQcm90cmFjdG9yXCIpKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1widW5pdGVqcy13ZWJkcml2ZXItcGx1Z2luXCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uZTJlVGVzdFJ1bm5lciwgXCJXZWJkcml2ZXJJT1wiKSk7XG5cbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1kZWNvcmF0b3JzLWxlZ2FjeVwiLCBcImJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tY2xhc3MtcHJvcGVydGllc1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkNvbmRpdGlvbiAmJiBzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLnNvdXJjZUxhbmd1YWdlLCBcIkphdmFTY3JpcHRcIikpO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJiYWJlbC1lc2xpbnRcIl0sIG1haW5Db25kaXRpb24gJiYgc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5saW50ZXIsIFwiRVNMaW50XCIpKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiQHR5cGVzL3N5c3RlbWpzXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlTGFuZ3VhZ2UsIFwiVHlwZVNjcmlwdFwiKSk7XG5cbiAgICAgICAgY29uc3QgcHJvdHJhY3RvckNvbmZpZ3VyYXRpb24gPSBlbmdpbmVWYXJpYWJsZXMuZ2V0Q29uZmlndXJhdGlvbjxQcm90cmFjdG9yQ29uZmlndXJhdGlvbj4oXCJQcm90cmFjdG9yXCIpO1xuICAgICAgICBpZiAocHJvdHJhY3RvckNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbiA9IGZpbGVTeXN0ZW0ucGF0aFRvV2ViKGZpbGVTeXN0ZW0ucGF0aEZpbGVSZWxhdGl2ZShlbmdpbmVWYXJpYWJsZXMud3d3Um9vdEZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy53d3cucGFja2FnZSwgXCJ1bml0ZWpzLXByb3RyYWN0b3ItcGx1Z2luXCIpKSk7XG4gICAgICAgICAgICBBcnJheUhlbHBlci5hZGRSZW1vdmUocHJvdHJhY3RvckNvbmZpZ3VyYXRpb24ucGx1Z2lucywgeyBwYXRoOiBwbHVnaW4gfSwgbWFpbkNvbmRpdGlvbiwgKG9iamVjdCwgaXRlbSkgPT4gb2JqZWN0LnBhdGggPT09IGl0ZW0ucGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2ViZHJpdmVySW9QbHVnaW5zID0gZW5naW5lVmFyaWFibGVzLmdldENvbmZpZ3VyYXRpb248c3RyaW5nW10+KFwiV2ViZHJpdmVySU8uUGx1Z2luc1wiKTtcbiAgICAgICAgaWYgKHdlYmRyaXZlcklvUGx1Z2lucykge1xuICAgICAgICAgICAgQXJyYXlIZWxwZXIuYWRkUmVtb3ZlKHdlYmRyaXZlcklvUGx1Z2lucywgXCJ1bml0ZWpzLXdlYmRyaXZlci1wbHVnaW5cIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBiYWJlbENvbmZpZ3VyYXRpb24gPSBlbmdpbmVWYXJpYWJsZXMuZ2V0Q29uZmlndXJhdGlvbjxCYWJlbENvbmZpZ3VyYXRpb24+KFwiQmFiZWxcIik7XG4gICAgICAgIGlmIChiYWJlbENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIEFycmF5SGVscGVyLmFkZFJlbW92ZShiYWJlbENvbmZpZ3VyYXRpb24ucGx1Z2lucywgXCJ0cmFuc2Zvcm0tZGVjb3JhdG9ycy1sZWdhY3lcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgICAgICBBcnJheUhlbHBlci5hZGRSZW1vdmUoYmFiZWxDb25maWd1cmF0aW9uLnBsdWdpbnMsIFwidHJhbnNmb3JtLWNsYXNzLXByb3BlcnRpZXNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlc0xpbnRDb25maWd1cmF0aW9uID0gZW5naW5lVmFyaWFibGVzLmdldENvbmZpZ3VyYXRpb248RXNMaW50Q29uZmlndXJhdGlvbj4oXCJFU0xpbnRcIik7XG4gICAgICAgIGlmIChlc0xpbnRDb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICBPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKGVzTGludENvbmZpZ3VyYXRpb24uZ2xvYmFscywgXCJfX21vZHVsZU5hbWVcIiwgdHJ1ZSwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgICAgICBPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKGVzTGludENvbmZpZ3VyYXRpb24uZ2xvYmFscywgXCJtb2R1bGVcIiwgdHJ1ZSwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgICAgICBPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKGVzTGludENvbmZpZ3VyYXRpb24sIFwicGFyc2VyXCIsIFwiYmFiZWwtZXNsaW50XCIsIG1haW5Db25kaXRpb24pO1xuICAgICAgICAgICAgT2JqZWN0SGVscGVyLmFkZFJlbW92ZShlc0xpbnRDb25maWd1cmF0aW9uLnJ1bGVzLCBcIm5vLXVudXNlZC12YXJzXCIsIDEsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHlwZVNjcmlwdENvbmZpZ3VyYXRpb24gPSBlbmdpbmVWYXJpYWJsZXMuZ2V0Q29uZmlndXJhdGlvbjxUeXBlU2NyaXB0Q29uZmlndXJhdGlvbj4oXCJUeXBlU2NyaXB0XCIpO1xuICAgICAgICBpZiAodHlwZVNjcmlwdENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIE9iamVjdEhlbHBlci5hZGRSZW1vdmUodHlwZVNjcmlwdENvbmZpZ3VyYXRpb24uY29tcGlsZXJPcHRpb25zLCBcImV4cGVyaW1lbnRhbERlY29yYXRvcnNcIiwgdHJ1ZSwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBqYXZhU2NyaXB0Q29uZmlndXJhdGlvbiA9IGVuZ2luZVZhcmlhYmxlcy5nZXRDb25maWd1cmF0aW9uPEphdmFTY3JpcHRDb25maWd1cmF0aW9uPihcIkphdmFTY3JpcHRcIik7XG4gICAgICAgIGlmIChqYXZhU2NyaXB0Q29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgT2JqZWN0SGVscGVyLmFkZFJlbW92ZShqYXZhU2NyaXB0Q29uZmlndXJhdGlvbi5jb21waWxlck9wdGlvbnMsIFwiZXhwZXJpbWVudGFsRGVjb3JhdG9yc1wiLCB0cnVlLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRzTGludENvbmZpZ3VyYXRpb24gPSBlbmdpbmVWYXJpYWJsZXMuZ2V0Q29uZmlndXJhdGlvbjxUc0xpbnRDb25maWd1cmF0aW9uPihcIlRTTGludFwiKTtcbiAgICAgICAgaWYgKHRzTGludENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIE9iamVjdEhlbHBlci5hZGRSZW1vdmUodHNMaW50Q29uZmlndXJhdGlvbi5ydWxlcywgXCJuby1lbXB0eVwiLCB7IHNldmVyaXR5OiBcIndhcm5pbmdcIiB9LCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgICAgIE9iamVjdEhlbHBlci5hZGRSZW1vdmUodHNMaW50Q29uZmlndXJhdGlvbi5ydWxlcywgXCJuby1lbXB0eS1pbnRlcmZhY2VcIiwgeyBzZXZlcml0eTogXCJ3YXJuaW5nXCIgfSwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgICAgICBPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKHRzTGludENvbmZpZ3VyYXRpb24ucnVsZXMsIFwiaW50ZXJmYWNlLW5hbWVcIiwgZmFsc2UsIG1haW5Db25kaXRpb24pO1xuICAgICAgICAgICAgT2JqZWN0SGVscGVyLmFkZFJlbW92ZSh0c0xpbnRDb25maWd1cmF0aW9uLnJ1bGVzLCBcInZhcmlhYmxlLW5hbWVcIiwgW3RydWUsIFwiYWxsb3ctbGVhZGluZy11bmRlcnNjb3JlXCJdLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBmaW5hbGlzZShsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb246IGJvb2xlYW4pOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBpZiAobWFpbkNvbmRpdGlvbikge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlRXh0ZW5zaW9uID0gc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5zb3VyY2VMYW5ndWFnZSwgXCJUeXBlU2NyaXB0XCIpID8gXCIudHNcIiA6IFwiLmpzXCI7XG5cbiAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCB0aGlzLmdlbmVyYXRlQXBwU291cmNlKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIFtcbiAgICAgICAgICAgICAgICBgYXBwLmNvbXBvbmVudCR7c291cmNlRXh0ZW5zaW9ufWAsXG4gICAgICAgICAgICAgICAgYGFwcC5tb2R1bGUke3NvdXJjZUV4dGVuc2lvbn1gLFxuICAgICAgICAgICAgICAgIGBjaGlsZC9jaGlsZC5jb21wb25lbnQke3NvdXJjZUV4dGVuc2lvbn1gLFxuICAgICAgICAgICAgICAgIGBib290c3RyYXBwZXIke3NvdXJjZUV4dGVuc2lvbn1gXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgc3VwZXIuZ2VuZXJhdGVBcHBTb3VyY2UobG9nZ2VyLCBmaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlcywgW2BlbnRyeVBvaW50JHtzb3VyY2VFeHRlbnNpb259YF0sIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgc3VwZXIuZ2VuZXJhdGVBcHBIdG1sKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIFtcImFwcC5jb21wb25lbnQuaHRtbFwiLCBcImNoaWxkL2NoaWxkLmNvbXBvbmVudC5odG1sXCJdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldCA9IGF3YWl0IHN1cGVyLmdlbmVyYXRlQXBwQ3NzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIFtcImFwcC5jb21wb25lbnRcIiwgXCJjaGlsZC9jaGlsZC5jb21wb25lbnRcIl0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgc3VwZXIuZ2VuZXJhdGVFMmVUZXN0KGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIFtgYXBwLnNwZWMke3NvdXJjZUV4dGVuc2lvbn1gXSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLmdlbmVyYXRlVW5pdFRlc3QobG9nZ2VyLCBmaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlcywgW2Bib290c3RyYXBwZXIuc3BlYyR7c291cmNlRXh0ZW5zaW9ufWBdLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVVbml0VGVzdChsb2dnZXIsIGZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzLCBbYGFwcC5tb2R1bGUuc3BlYyR7c291cmNlRXh0ZW5zaW9ufWBdLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCBzdXBlci5nZW5lcmF0ZUNzcyhsb2dnZXIsIGZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHRvZ2dsZURlcGVuZGVuY2llcyhsb2dnZXI6IElMb2dnZXIsIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCBwYWNrYWdlcyA9IFtcImNvcmVcIiwgXCJjb21tb25cIiwgXCJjb21waWxlclwiLCBcInBsYXRmb3JtLWJyb3dzZXJcIiwgXCJwbGF0Zm9ybS1icm93c2VyLWR5bmFtaWNcIiwgXCJodHRwXCIsIFwicm91dGVyXCIsIFwiZm9ybXNcIl07XG5cbiAgICAgICAgcGFja2FnZXMuZm9yRWFjaChwa2cgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGVzdEFkZGl0aW9uczogeyBbaWQ6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgICAgICAgICBpZiAocGtnICE9PSBcImZvcm1zXCIpIHtcbiAgICAgICAgICAgICAgICB0ZXN0QWRkaXRpb25zW2BAYW5ndWxhci8ke3BrZ30vdGVzdGluZ2BdID0gYGJ1bmRsZXMvJHtwa2d9LXRlc3RpbmcudW1kLmpzYDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZUNsaWVudFBhY2thZ2UoYEBhbmd1bGFyLyR7cGtnfWAsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBgQGFuZ3VsYXIvJHtwa2d9YCxcbiAgICAgICAgICAgICAgICBtYWluOiBgYnVuZGxlcy8ke3BrZ30udW1kLmpzYCxcbiAgICAgICAgICAgICAgICBtYWluTWluaWZpZWQ6IGBidW5kbGVzLyR7cGtnfS51bWQubWluLmpzYCxcbiAgICAgICAgICAgICAgICB0ZXN0aW5nQWRkaXRpb25zOiB0ZXN0QWRkaXRpb25zXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVDbGllbnRQYWNrYWdlKFwicnhqc1wiLCB7XG4gICAgICAgICAgICBuYW1lOiBcInJ4anNcIixcbiAgICAgICAgICAgIG1haW46IFwiKlwiLFxuICAgICAgICAgICAgbWFpbkxpYjogW1wiKi5qc1wiLFxuICAgICAgICAgICAgICAgIFwiYWRkLyoqLyouanNcIixcbiAgICAgICAgICAgICAgICBcIm9ic2VydmFibGUvKiovKi5qc1wiLFxuICAgICAgICAgICAgICAgIFwib3BlcmF0b3IvKiovKi5qc1wiLFxuICAgICAgICAgICAgICAgIFwib3BlcmF0b3JzLyoqLyouanNcIixcbiAgICAgICAgICAgICAgICBcInNjaGVkdWxlci8qKi8qLmpzXCIsXG4gICAgICAgICAgICAgICAgXCJzeW1ib2wvKiovKi5qc1wiLFxuICAgICAgICAgICAgICAgIFwidGVzdGluZy8qKi8qLmpzXCIsXG4gICAgICAgICAgICAgICAgXCJ1dGlsLyoqLyouanNcIlxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQ29uZGl0aW9uKTtcblxuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlQ2xpZW50UGFja2FnZShcImNvcmUtanNcIiwge1xuICAgICAgICAgICAgbmFtZTogXCJjb3JlLWpzXCIsXG4gICAgICAgICAgICBtYWluOiBcImNsaWVudC9zaGltLmpzXCIsXG4gICAgICAgICAgICBtYWluTWluaWZpZWQ6IFwiY2xpZW50L3NoaW0ubWluLmpzXCIsXG4gICAgICAgICAgICBzY3JpcHRJbmNsdWRlTW9kZTogXCJib3RoXCJcbiAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkNvbmRpdGlvbik7XG5cbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZUNsaWVudFBhY2thZ2UoXCJ6b25lLmpzXCIsIHtcbiAgICAgICAgICAgIG5hbWU6IFwiem9uZS5qc1wiLFxuICAgICAgICAgICAgbWFpbjogXCJkaXN0L3pvbmUuanNcIixcbiAgICAgICAgICAgIG1haW5NaW5pZmllZDogXCJkaXN0L3pvbmUubWluLmpzXCIsXG4gICAgICAgICAgICB0ZXN0aW5nQWRkaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgXCJsb25nLXN0YWNrLXRyYWNlLXpvbmVcIjogXCJkaXN0L2xvbmctc3RhY2stdHJhY2Utem9uZS5qc1wiLFxuICAgICAgICAgICAgICAgIHByb3h5OiBcImRpc3QvcHJveHkuanNcIixcbiAgICAgICAgICAgICAgICBcInN5bmMtdGVzdFwiOiBcImRpc3Qvc3luYy10ZXN0LmpzXCIsXG4gICAgICAgICAgICAgICAgXCJydW5uZXItcGF0Y2hcIjogc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi51bml0VGVzdEZyYW1ld29yaywgXCJKYXNtaW5lXCIpID8gXCJkaXN0L2phc21pbmUtcGF0Y2guanNcIiA6IFwiZGlzdC9tb2NoYS1wYXRjaC5qc1wiLFxuICAgICAgICAgICAgICAgIFwiYXN5bmMtdGVzdFwiOiBcImRpc3QvYXN5bmMtdGVzdC5qc1wiLFxuICAgICAgICAgICAgICAgIFwiZmFrZS1hc3luYy10ZXN0XCI6IFwiZGlzdC9mYWtlLWFzeW5jLXRlc3QuanNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjcmlwdEluY2x1ZGVNb2RlOiBcImJvdGhcIlxuICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQ29uZGl0aW9uKTtcblxuICAgICAgICAvLyBtYWluIGNvbmRpdGlvbiBmYWxzZSB0byBhbHdheXMgcmVtb3ZlLCBzaW5jZSBuZzUgbm8gbG9uZ2VyIHJlcXVpcmVzXG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVDbGllbnRQYWNrYWdlKFwicmVmbGVjdC1tZXRhZGF0YVwiLCB7XG4gICAgICAgICAgICBuYW1lOiBcInJlZmxlY3QtbWV0YWRhdGFcIlxuICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGluc2VydFJvdXRlcyhsb2dnZXI6IElMb2dnZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXM6IHsgW2lkOiBzdHJpbmddOiBVbml0ZVBhY2thZ2VSb3V0ZUNvbmZpZ3VyYXRpb24gfSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUV4dGVuc2lvbiA9IHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlTGFuZ3VhZ2UsIFwiVHlwZVNjcmlwdFwiKSA/IFwiLnRzXCIgOiBcIi5qc1wiO1xuICAgICAgICBjb25zdCBicmFja2V0U3BhY2luZyA9IHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlTGFuZ3VhZ2UsIFwiVHlwZVNjcmlwdFwiKSA/IFwiIFwiIDogXCJcIjtcblxuICAgICAgICBsZXQgcm91dGVySXRlbXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGNvbnN0IGltcG9ydEl0ZW1zOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsZXQgZGVjbGFyYXRpb25JdGVtczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3Qgcm91dGVJdGVtczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IG5hdmlnYXRpb25MaW5rczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocm91dGVzIHx8IHt9KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByb3V0ZSA9IHJvdXRlc1trZXlzW2ldXTtcblxuICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBUZW1wbGF0ZUhlbHBlci5nZW5lcmF0ZVdvcmRzKHJvdXRlLm1vZHVsZVR5cGUpO1xuICAgICAgICAgICAgY29uc3QgaHVtYW4gPSBUZW1wbGF0ZUhlbHBlci5jcmVhdGVIdW1hbih3b3Jkcyk7XG5cbiAgICAgICAgICAgIGltcG9ydEl0ZW1zLnB1c2goYGltcG9ydCB7JHticmFja2V0U3BhY2luZ30ke3JvdXRlLm1vZHVsZVR5cGV9JHticmFja2V0U3BhY2luZ319IGZyb20gXCIke3JvdXRlLm1vZHVsZVBhdGh9XCI7YCk7XG4gICAgICAgICAgICByb3V0ZXJJdGVtcy5wdXNoKGB7JHticmFja2V0U3BhY2luZ31wYXRoOiBcIiR7a2V5c1tpXX1cIiwgY29tcG9uZW50OiAke3JvdXRlLm1vZHVsZVR5cGV9JHticmFja2V0U3BhY2luZ319YCk7XG4gICAgICAgICAgICBkZWNsYXJhdGlvbkl0ZW1zLnB1c2gocm91dGUubW9kdWxlVHlwZSk7XG4gICAgICAgICAgICByb3V0ZUl0ZW1zLnB1c2goYC8ke2tleXNbaV19YCk7XG4gICAgICAgICAgICBuYXZpZ2F0aW9uTGlua3MucHVzaChgPGEgcm91dGVyTGluaz1cIi8ke2tleXNbaV19XCI+JHtodW1hbn08L2E+YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZW1haW5pbmdJbnNlcnRzOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nW10gfSA9IHt9O1xuXG4gICAgICAgIGxldCByZXQgPSBhd2FpdCBzdXBlci5pbnNlcnRDb250ZW50KGxvZ2dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lVmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgYXBwLm1vZHVsZSR7c291cmNlRXh0ZW5zaW9ufWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzcmNDb250ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBzcmNDb250ZW50O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaW1wb3J0c1JlbWFpbmluZyA9IHN1cGVyLmluc2VydFJlcGxhY2VJbXBvcnRzKGNvbnRlbnQsIGltcG9ydEl0ZW1zKTtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gaW1wb3J0c1JlbWFpbmluZy5jb250ZW50O1xuICAgICAgICAgICAgICAgIHJlbWFpbmluZ0luc2VydHMuaW1wb3J0cyA9IGltcG9ydHNSZW1haW5pbmcucmVtYWluaW5nO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGVyUmVnRXggPSAvKGNvbnN0IGFwcFJvdXRlcyA9IFxcWykoW1xcc10qKShbXFxzXFxTXSo/KShcXF07KS87XG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGVyUmVzdWx0cyA9IHJvdXRlclJlZ0V4LmV4ZWMoY29udGVudCk7XG4gICAgICAgICAgICAgICAgaWYgKHJvdXRlclJlc3VsdHMgJiYgcm91dGVyUmVzdWx0cy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3V0ZXJzID0gcm91dGVyUmVzdWx0c1szXS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcm91dGVySXRlbXMgPSByb3V0ZXJJdGVtcy5maWx0ZXIocmkgPT4gY3VycmVudFJvdXRlcnMucmVwbGFjZSgvXFxzL2csIFwiXCIpLmluZGV4T2YocmkucmVwbGFjZSgvXFxzL2csIFwiXCIpKSA8IDApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3V0ZXJJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3V0ZXJWYXIgPSByb3V0ZXJSZXN1bHRzWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm91dGVyTmV3bGluZSA9IHJvdXRlclJlc3VsdHNbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3V0ZXJFbmQgPSByb3V0ZXJSZXN1bHRzWzRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZVJvdXRlcnMgPSBgJHtyb3V0ZXJOZXdsaW5lfSR7Y3VycmVudFJvdXRlcnN9LCR7cm91dGVyTmV3bGluZX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVJvdXRlcnMgKz0gYCR7cm91dGVySXRlbXMubWFwKHJpID0+IHJpLnJlcGxhY2UoL1xcbi9nLCByb3V0ZXJOZXdsaW5lKSkuam9pbihgLCR7cm91dGVyTmV3bGluZX1gKX1cXG5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShyb3V0ZXJSZXN1bHRzWzBdLCBgJHtyb3V0ZXJWYXJ9JHtyZXBsYWNlUm91dGVyc30ke3JvdXRlckVuZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0luc2VydHMucm91dGVyID0gcm91dGVySXRlbXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25SZWdFeCA9IC8oZGVjbGFyYXRpb25zOiBcXFspKFxccyopKFtcXHNcXFNdKj8pKFxccypcXF0pLztcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uUmVzdWx0cyA9IGRlY2xhcmF0aW9uUmVnRXguZXhlYyhjb250ZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25SZXN1bHRzICYmIGRlY2xhcmF0aW9uUmVzdWx0cy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREZWNsYXJhdGlvbnMgPSBkZWNsYXJhdGlvblJlc3VsdHNbM107XG5cbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25JdGVtcyA9IGRlY2xhcmF0aW9uSXRlbXMuZmlsdGVyKGRpID0+IGN1cnJlbnREZWNsYXJhdGlvbnMuaW5kZXhPZihkaSkgPCAwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25JdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWNsYXJhdGlvblN0YXJ0ID0gZGVjbGFyYXRpb25SZXN1bHRzWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25OZXdsaW5lID0gZGVjbGFyYXRpb25SZXN1bHRzWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25FbmQgPSBkZWNsYXJhdGlvblJlc3VsdHNbNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZURlY2xhcmF0aW9ucyA9IGAke2RlY2xhcmF0aW9uTmV3bGluZX0ke2N1cnJlbnREZWNsYXJhdGlvbnN9LCR7ZGVjbGFyYXRpb25OZXdsaW5lfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlRGVjbGFyYXRpb25zICs9IGAke2RlY2xhcmF0aW9uSXRlbXMuam9pbihgLCR7ZGVjbGFyYXRpb25OZXdsaW5lfWApfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKGRlY2xhcmF0aW9uUmVzdWx0c1swXSwgYCR7ZGVjbGFyYXRpb25TdGFydH0ke3JlcGxhY2VEZWNsYXJhdGlvbnN9JHtkZWNsYXJhdGlvbkVuZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0luc2VydHMuZGVjbGFyYXRpb25zID0gZGVjbGFyYXRpb25JdGVtcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXQgPT09IDApIHtcbiAgICAgICAgICAgIHJldCA9IGF3YWl0IHN1cGVyLmluc2VydENvbnRlbnQobG9nZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmdpbmVWYXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBhcHAuY29tcG9uZW50Lmh0bWxgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3JjQ29udGVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IHNyY0NvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmF2aWdhdGlvblJlZ0V4ID0gLyg8bmF2Lio+KShcXHMqKShbXFxzfFxcU10qPykoKFxccyopPFxcL25hdj4pLztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmF2aWdhdGlvblJlc3VsdHMgPSBuYXZpZ2F0aW9uUmVnRXguZXhlYyhjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRpb25SZXN1bHRzICYmIG5hdmlnYXRpb25SZXN1bHRzLmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRMaW5rcyA9IG5hdmlnYXRpb25SZXN1bHRzWzNdLnRyaW0oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbkxpbmtzID0gbmF2aWdhdGlvbkxpbmtzLmZpbHRlcihyaSA9PiBjdXJyZW50TGlua3MucmVwbGFjZSgvXFxzL2csIFwiXCIpLmluZGV4T2YocmkucmVwbGFjZSgvXFxzL2csIFwiXCIpKSA8IDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmF2aWdhdGlvbkxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYXZpZ2F0aW9uU3RhcnQgPSBuYXZpZ2F0aW9uUmVzdWx0c1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYXZpZ2F0aW9uTmV3bGluZSA9IG5hdmlnYXRpb25SZXN1bHRzWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG52YWlnYXRpb25FbmQgPSBuYXZpZ2F0aW9uUmVzdWx0c1s0XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXBsYWNlUm91dGVycyA9IGAke25hdmlnYXRpb25OZXdsaW5lfSR7Y3VycmVudExpbmtzfSR7bmF2aWdhdGlvbk5ld2xpbmV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlUm91dGVycyArPSBgJHtuYXZpZ2F0aW9uTGlua3MubWFwKHJpID0+IHJpLnJlcGxhY2UoL1xcbi9nLCBuYXZpZ2F0aW9uTmV3bGluZSkpLmpvaW4oYCR7bmF2aWdhdGlvbk5ld2xpbmV9YCl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG5hdmlnYXRpb25SZXN1bHRzWzBdLCBgJHtuYXZpZ2F0aW9uU3RhcnR9JHtyZXBsYWNlUm91dGVyc30ke252YWlnYXRpb25FbmR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdJbnNlcnRzLm5hdmlnYXRpb25MaW5rcyA9IG5hdmlnYXRpb25MaW5rcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgc3VwZXIuaW5zZXJ0Q29tcGxldGlvbihsb2dnZXIsIHJlbWFpbmluZ0luc2VydHMsIHJvdXRlSXRlbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG59XG4iXX0=
