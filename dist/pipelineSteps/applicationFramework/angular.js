"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate scaffolding for angular application.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const pipelineKey_1 = require("../../engine/pipelineKey");
const sharedAppFramework_1 = require("../sharedAppFramework");
class Angular extends sharedAppFramework_1.SharedAppFramework {
    influences() {
        return [
            new pipelineKey_1.PipelineKey("unite", "uniteConfigurationJson"),
            new pipelineKey_1.PipelineKey("content", "packageJson"),
            new pipelineKey_1.PipelineKey("language", "javaScript"),
            new pipelineKey_1.PipelineKey("language", "typeScript"),
            new pipelineKey_1.PipelineKey("linter", "esLint")
        ];
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (_super("condition").call(this, uniteConfiguration.applicationFramework, "Angular")) {
                if (_super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                    logger.error(`Angular does not currently support bundling with ${uniteConfiguration.bundler}`);
                    return 1;
                }
            }
            return 0;
        });
    }
    process(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleDependencies(logger, fileSystem, uniteConfiguration, engineVariables);
            engineVariables.toggleDevDependency(["babel-plugin-transform-decorators-legacy"], _super("condition").call(this, uniteConfiguration.applicationFramework, "Angular") && _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["babel-eslint"], _super("condition").call(this, uniteConfiguration.applicationFramework, "Angular") && _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-decorators-legacy", _super("condition").call(this, uniteConfiguration.applicationFramework, "Angular"));
            }
            if (_super("condition").call(this, uniteConfiguration.applicationFramework, "Angular")) {
                const esLintConfiguration = engineVariables.getConfiguration("ESLint");
                if (esLintConfiguration) {
                    esLintConfiguration.parser = "babel-eslint";
                }
                const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
                if (typeScriptConfiguration) {
                    typeScriptConfiguration.compilerOptions.experimentalDecorators = true;
                }
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, ["app.component", "app.module", "child/child.component", "bootstrapper", "entryPoint"]);
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app"]);
                    if (ret === 0) {
                        ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, ["bootstrapper"], true);
                        if (ret === 0) {
                            ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, ["app.module"], false);
                            if (ret === 0) {
                                ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                            }
                        }
                    }
                }
                return ret;
            }
            return 0;
        });
    }
    toggleDependencies(logger, fileSystem, uniteConfiguration, engineVariables) {
        const packages = ["core", "common", "compiler", "platform-browser", "platform-browser-dynamic", "http", "router", "forms"];
        packages.forEach(pkg => {
            const testAdditions = {};
            if (pkg !== "forms") {
                testAdditions[`@angular/${pkg}/testing`] = `bundles/${pkg}-testing.umd.js`;
            }
            engineVariables.toggleClientPackage(`@angular/${pkg}`, `bundles/${pkg}.umd.js`, `bundles/${pkg}.umd.min.js`, testAdditions, false, "both", "none", false, undefined, undefined, undefined, super.condition(uniteConfiguration.applicationFramework, "Angular"));
        });
        engineVariables.toggleClientPackage("rxjs", "*", undefined, undefined, false, "both", "none", false, undefined, undefined, undefined, super.condition(uniteConfiguration.applicationFramework, "Angular"));
        engineVariables.toggleClientPackage("core-js", "client/shim.js", undefined, undefined, false, "both", "both", false, undefined, undefined, undefined, super.condition(uniteConfiguration.applicationFramework, "Angular"));
        engineVariables.toggleClientPackage("zone.js", "dist/zone.js", "dist/zone.min.js", {
            "long-stack-trace-zone": "dist/long-stack-trace-zone.js",
            proxy: "dist/proxy.js",
            "sync-test": "dist/sync-test.js",
            "runner-patch": super.condition(uniteConfiguration.unitTestFramework, "Jasmine") ? "dist/jasmine-patch.js" : "dist/mocha-patch.js",
            "async-test": "dist/async-test.js",
            "fake-async-test": "dist/fake-async-test.js"
        }, false, "both", "both", false, undefined, undefined, undefined, super.condition(uniteConfiguration.applicationFramework, "Angular"));
        engineVariables.toggleClientPackage("reflect-metadata", "Reflect.js", undefined, undefined, false, "both", "both", false, undefined, undefined, undefined, super.condition(uniteConfiguration.applicationFramework, "Angular"));
    }
}
exports.Angular = Angular;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
