"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sharedAppFramework_1 = require("./sharedAppFramework");
class React extends sharedAppFramework_1.SharedAppFramework {
    process(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["babel-preset-react"], uniteConfiguration.applicationFramework === "React" && uniteConfiguration.sourceLanguage === "JavaScript");
            engineVariables.toggleDevDependency(["eslint-plugin-react"], uniteConfiguration.applicationFramework === "React" && uniteConfiguration.linter === "ESLint");
            engineVariables.toggleDevDependency(["@types/react", "@types/react-dom", "@types/react-router-dom"], uniteConfiguration.applicationFramework === "React" && uniteConfiguration.sourceLanguage === "TypeScript");
            engineVariables.toggleDevDependency(["unitejs-react-protractor-plugin"], uniteConfiguration.applicationFramework === "React" && uniteConfiguration.e2eTestRunner === "Protractor");
            engineVariables.e2ePlugins["unitejs-react-protractor-plugin"] = uniteConfiguration.applicationFramework === "React" && uniteConfiguration.e2eTestRunner === "Protractor";
            engineVariables.toggleDevDependency(["unitejs-react-webdriver-plugin"], uniteConfiguration.applicationFramework === "React" && uniteConfiguration.e2eTestRunner === "WebdriverIO");
            engineVariables.e2ePlugins["unitejs-react-webdriver-plugin"] = uniteConfiguration.applicationFramework === "React" && uniteConfiguration.e2eTestRunner === "WebdriverIO";
            engineVariables.toggleClientPackage("react", "dist/react.js", "dist/react.min.js", false, "both", false, undefined, uniteConfiguration.applicationFramework === "React");
            engineVariables.toggleClientPackage("react-dom", "dist/react-dom.js", "dist/react-dom.min.js", false, "both", false, undefined, uniteConfiguration.applicationFramework === "React");
            engineVariables.toggleClientPackage("react-router-dom", "umd/react-router-dom.js", "umd/react-router-dom.min.js", false, "both", false, undefined, uniteConfiguration.applicationFramework === "React");
            engineVariables.transpilePresets.react = uniteConfiguration.applicationFramework === "React" && uniteConfiguration.sourceLanguage === "JavaScript";
            engineVariables.lintFeatures.jsx = { required: uniteConfiguration.applicationFramework === "React" && uniteConfiguration.linter === "ESLint", object: true };
            engineVariables.lintExtends["plugin:react/recommended"] = uniteConfiguration.applicationFramework === "React" && uniteConfiguration.linter === "ESLint";
            engineVariables.lintPlugins.react = uniteConfiguration.applicationFramework === "React" && uniteConfiguration.linter === "ESLint";
            engineVariables.transpileProperties.jsx = { required: uniteConfiguration.applicationFramework === "React" && uniteConfiguration.sourceLanguage === "TypeScript", object: "react" };
            if (uniteConfiguration.applicationFramework === "React") {
                const codeExtension = `!${engineVariables.sourceLanguageExt}x`;
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, [
                    `app${codeExtension}`,
                    `child/child${codeExtension}`,
                    "bootstrapper",
                    "entryPoint"
                ]);
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app"]);
                    if (ret === 0) {
                        ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, ["app", "bootstrapper"]);
                        if (ret === 0) {
                            ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                        }
                    }
                }
                return ret;
            }
            return 0;
        });
    }
}
exports.React = React;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
