"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate scaffolding for Polymer application.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const sharedAppFramework_1 = require("../sharedAppFramework");
class Polymer extends sharedAppFramework_1.SharedAppFramework {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.applicationFramework, "Polymer");
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                if (_super("condition").call(this, uniteConfiguration.unitTestEngine, "PhantomJS") || _super("condition").call(this, uniteConfiguration.unitTestEngine, "JSDom")) {
                    logger.error(`Polymer does not support unit testing with ${uniteConfiguration.unitTestEngine}`);
                    return 1;
                }
                if (_super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                    logger.error(`Polymer does not currently support bundling with ${uniteConfiguration.bundler}`);
                    return 1;
                }
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.viewExtensions, "html", true);
            }
            return 0;
        });
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["unitejs-protractor-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "Protractor"));
            engineVariables.toggleDevDependency(["unitejs-webdriver-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO"));
            engineVariables.toggleDevDependency(["babel-plugin-transform-decorators-legacy", "babel-plugin-transform-class-properties"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["babel-eslint"], mainCondition && _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            engineVariables.toggleDevDependency(["@types/polymer"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            engineVariables.toggleClientPackage("@webcomponents/webcomponentsjs-es5adapter", {
                name: "@webcomponents/webcomponentsjs",
                main: "custom-elements-es5-adapter.js",
                mainMinified: "custom-elements-es5-adapter.js",
                includeMode: "both",
                scriptIncludeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@webcomponents/webcomponentsjs", {
                name: "@webcomponents/webcomponentsjs",
                main: "webcomponents-lite.js",
                mainMinified: "webcomponents-lite.js",
                includeMode: "both",
                scriptIncludeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@webcomponents/shadycss", {
                name: "@webcomponents/shadycss",
                transpile: {
                    alias: "@webcomponents-transpiled/shadycss",
                    sources: ["entrypoints/*.js", "src/**/*.js"],
                    language: "JavaScript"
                },
                main: "*",
                includeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@polymer/polymer", {
                name: "@polymer/polymer",
                transpile: {
                    alias: "@polymer-transpiled/polymer",
                    sources: ["polymer.js", "polymer-element.js", "lib/**/*.js"],
                    language: "JavaScript",
                    stripExt: true,
                    modules: ["@webcomponents"]
                },
                main: "*",
                includeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@polymer/app-route", {
                name: "@polymer/app-route",
                transpile: {
                    alias: "@polymer-transpiled/app-route",
                    language: "JavaScript",
                    sources: ["*.js"]
                },
                main: "*",
                includeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@polymer/iron-location", {
                name: "@polymer/iron-location",
                transpile: {
                    alias: "@polymer-transpiled/iron-location",
                    language: "JavaScript",
                    sources: ["*.js"]
                },
                main: "*",
                includeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@polymer/decorators", {
                name: "@polymer/decorators",
                transpile: {
                    alias: "@polymer-transpiled/decorators",
                    language: "TypeScript",
                    sources: ["src/*.ts"]
                },
                main: "*",
                includeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("requirejs-text", {
                name: "requirejs-text",
                main: "text.js",
                includeMode: "both",
                map: { text: "requirejs-text" }
            }, mainCondition && _super("condition").call(this, uniteConfiguration.moduleType, "AMD"));
            engineVariables.toggleClientPackage("systemjs-plugin-text", {
                name: "systemjs-plugin-text",
                includeMode: "both",
                main: "text.js",
                map: {
                    text: "systemjs-plugin-text"
                },
                loaders: {
                    "*.html": "text",
                    "*.css": "text"
                }
            }, mainCondition &&
                (_super("condition").call(this, uniteConfiguration.bundler, "Browserify") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "SystemJSBuilder") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "Webpack")));
            if (mainCondition && _super("condition").call(this, uniteConfiguration.taskManager, "Gulp") && _super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                _super("createLoaderReplacement").call(this, engineVariables, "css", "text", true);
                _super("createLoaderReplacement").call(this, engineVariables, "html", "text", false);
            }
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-class-properties", mainCondition);
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, "transform-decorators-legacy", mainCondition);
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, mainCondition);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "variable-name", [true, "allow-leading-underscore"], mainCondition);
            }
            const protractorConfiguration = engineVariables.getConfiguration("Protractor");
            if (protractorConfiguration) {
                const plugin = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, fileSystem.pathCombine(engineVariables.www.packageFolder, "unitejs-protractor-plugin")));
                arrayHelper_1.ArrayHelper.addRemove(protractorConfiguration.plugins, { path: plugin }, mainCondition, (object, item) => object.path === item.path);
            }
            const webdriverIoPlugins = engineVariables.getConfiguration("WebdriverIO.Plugins");
            if (webdriverIoPlugins) {
                arrayHelper_1.ArrayHelper.addRemove(webdriverIoPlugins, "unitejs-webdriver-plugin", mainCondition);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                const isTypeScript = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript");
                const sourceExtension = isTypeScript ? ".ts" : ".js";
                const srcFiles = [
                    `app${sourceExtension}`,
                    `child/child${sourceExtension}`,
                    `bootstrapper${sourceExtension}`
                ];
                if (isTypeScript) {
                    srcFiles.push("customTypes/polymer-module.d.ts");
                    srcFiles.push("customTypes/polymer-element.d.ts");
                }
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, srcFiles, false);
                if (ret === 0) {
                    ret = yield _super("generateAppSource").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`entryPoint${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppHtml").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.html", "child/child.html"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["child/child"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`]);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`, `bootstrapper.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                }
                return ret;
            }
            else {
                return 0;
            }
        });
    }
}
exports.Polymer = Polymer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
