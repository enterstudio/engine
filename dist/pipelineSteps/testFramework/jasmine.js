"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate jasmine configuration.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const enginePipelineStepBase_1 = require("../../engine/enginePipelineStepBase");
class Jasmine extends enginePipelineStepBase_1.EnginePipelineStepBase {
    process(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            logger.info("Generating Jasmine Configuration");
            const isUnit = _super("condition").call(this, uniteConfiguration.unitTestFramework, "Jasmine");
            const isE2E = _super("condition").call(this, uniteConfiguration.e2eTestFramework, "Jasmine");
            const isEither = isUnit || isE2E;
            engineVariables.toggleDevDependency(["jasmine-core"], isEither);
            engineVariables.toggleDevDependency(["@types/jasmine"], _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") && isEither);
            engineVariables.toggleDevDependency(["karma-jasmine"], _super("condition").call(this, uniteConfiguration.unitTestRunner, "Karma") && isUnit);
            engineVariables.toggleDevDependency(["protractor-jasmine2-html-reporter", "jasmine-spec-reporter"], _super("condition").call(this, uniteConfiguration.e2eTestRunner, "Protractor") && isE2E);
            engineVariables.toggleDevDependency(["wdio-jasmine-framework"], _super("condition").call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO") && isE2E);
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.env, "jasmine", true, isEither);
            }
            const karmaConfiguration = engineVariables.getConfiguration("Karma");
            if (karmaConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(karmaConfiguration.frameworks, "jasmine", isUnit);
            }
            if (isE2E) {
                const protractorConfiguration = engineVariables.getConfiguration("Protractor");
                if (protractorConfiguration) {
                    protractorConfiguration.framework = "jasmine";
                    protractorConfiguration.jasmineNodeOpts = { showColors: true };
                }
                const protractorScriptStart = engineVariables.getConfiguration("Protractor.ScriptStart");
                if (protractorScriptStart) {
                    protractorScriptStart.push("const Jasmine2HtmlReporter = require('protractor-jasmine2-html-reporter');");
                    protractorScriptStart.push("const SpecReporter = require('jasmine-spec-reporter').SpecReporter;");
                }
                const protractorScriptEnd = engineVariables.getConfiguration("Protractor.ScriptEnd");
                if (protractorScriptEnd) {
                    const reportsFolder = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, engineVariables.www.reportsFolder));
                    protractorScriptEnd.push("exports.config.onPrepare = () => {");
                    protractorScriptEnd.push("    jasmine.getEnv().clearReporters();");
                    protractorScriptEnd.push("    jasmine.getEnv().addReporter(");
                    protractorScriptEnd.push("        new Jasmine2HtmlReporter({");
                    protractorScriptEnd.push(`            savePath: '${reportsFolder}/e2e/',`);
                    protractorScriptEnd.push("            fileName: 'index'");
                    protractorScriptEnd.push("        })");
                    protractorScriptEnd.push("    );");
                    protractorScriptEnd.push("    jasmine.getEnv().addReporter(");
                    protractorScriptEnd.push("        new SpecReporter({");
                    protractorScriptEnd.push("            displayStacktrace: 'all'");
                    protractorScriptEnd.push("        })");
                    protractorScriptEnd.push("    );");
                    protractorScriptEnd.push("};");
                }
                const webdriverIoConfiguration = engineVariables.getConfiguration("WebdriverIO");
                if (webdriverIoConfiguration) {
                    webdriverIoConfiguration.framework = "jasmine";
                }
            }
            return 0;
        });
    }
}
exports.Jasmine = Jasmine;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
