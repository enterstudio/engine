"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pipelineStepBase_1 = require("../../engine/pipelineStepBase");
class Gulp extends pipelineStepBase_1.PipelineStepBase {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.taskManager, "Gulp");
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency([
                "gulp",
                "require-dir",
                "gulp-rename",
                "gulp-replace",
                "minimist",
                "gulp-uglify",
                "uglify-js",
                "mkdirp",
                "stream-to-promise",
                "through2"
            ], mainCondition);
            this.generateBuildDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateUnitDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateE2eDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateServeDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateUtilsDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            this._tasksFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build/tasks");
            this._utilFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build/tasks/util");
            this._distFolder = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/dist/tasks/");
            this._files = [];
            const assetGulp = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/dist/");
            this.toggleFile(assetGulp, "gulpfile.js", engineVariables.wwwRootFolder, "gulpfile.js", mainCondition);
            this.generateBuildFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateUnitFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateE2eFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateServeFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateThemeFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            this.generateUtilsFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition);
            for (let i = 0; i < this._files.length; i++) {
                let ret;
                if (this._files[i].keep) {
                    ret = yield _super("copyFile").call(this, logger, fileSystem, this._files[i].sourceFolder, this._files[i].sourceFile, this._files[i].destFolder, this._files[i].destFile, engineVariables.force, Object.assign({ "\\\"../../../util/": ["\"./util/"], "\\\"../../util/": ["\"./util/"], "\\\"../util/": ["\"./util/"] }, this._files[i].replacements));
                }
                else {
                    ret = yield _super("fileDeleteText").call(this, logger, fileSystem, this._files[i].destFolder, this._files[i].destFile, engineVariables.force);
                }
                if (ret !== 0) {
                    return ret;
                }
            }
            return 0;
        });
    }
    generateBuildDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        engineVariables.toggleDevDependency([
            "del",
            "delete-empty",
            "run-sequence",
            "gulp-sourcemaps",
            "gulp-concat",
            "gulp-insert",
            "gulp-htmlmin",
            "html-minifier",
            "node-glob"
        ], mainCondition);
        // Babel and TypeScript are always needed now as client packages can be transpiled from either source language
        engineVariables.toggleDevDependency(["gulp-babel"], mainCondition);
        engineVariables.toggleDevDependency(["gulp-typescript", "typescript"], mainCondition);
        engineVariables.toggleDevDependency(["gulp-eslint"], mainCondition && super.condition(uniteConfiguration.linter, "ESLint"));
        engineVariables.toggleDevDependency(["gulp-tslint"], mainCondition && super.condition(uniteConfiguration.linter, "TSLint"));
        engineVariables.toggleDevDependency(["webpack-stream"], mainCondition && super.condition(uniteConfiguration.bundler, "Webpack"));
        engineVariables.toggleDevDependency(["vinyl-source-stream", "vinyl-buffer"], mainCondition && super.condition(uniteConfiguration.bundler, "Browserify"));
        engineVariables.toggleDevDependency(["gulp-less"], mainCondition && super.condition(uniteConfiguration.cssPre, "Less"));
        engineVariables.toggleDevDependency(["gulp-sass"], mainCondition && super.condition(uniteConfiguration.cssPre, "Sass"));
        engineVariables.toggleDevDependency(["gulp-stylus"], mainCondition && super.condition(uniteConfiguration.cssPre, "Stylus"));
        engineVariables.toggleDevDependency(["gulp-postcss"], mainCondition && super.condition(uniteConfiguration.cssPost, "PostCss"));
        engineVariables.toggleDevDependency(["gulp-cssnano"], mainCondition);
        engineVariables.toggleDevDependency(["gulp-stylelint"], mainCondition && super.condition(uniteConfiguration.cssLinter, "StyleLint"));
        engineVariables.toggleDevDependency(["gulp-sass-lint"], mainCondition && super.condition(uniteConfiguration.cssLinter, "SassLint"));
        engineVariables.toggleDevDependency(["gulp-lesshint"], mainCondition && super.condition(uniteConfiguration.cssLinter, "LessHint"));
        engineVariables.toggleDevDependency(["gulp-stylint"], mainCondition && super.condition(uniteConfiguration.cssLinter, "Stylint"));
    }
    generateBuildFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        logger.info("Generating gulp tasks for build in", { gulpTasksFolder: this._tasksFolder });
        const assetTasksLanguage = fileSystem.pathCombine(this._distFolder, `sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
        const assetTasksBundler = fileSystem.pathCombine(this._distFolder, `bundler/${uniteConfiguration.bundler.toLowerCase()}/`);
        const assetTasksLinter = fileSystem.pathCombine(this._distFolder, `linter/${uniteConfiguration.linter.toLowerCase()}/`);
        const assetTasksCssPre = fileSystem.pathCombine(this._distFolder, `cssPre/${uniteConfiguration.cssPre.toLowerCase()}/`);
        const assetTasksCssPost = fileSystem.pathCombine(this._distFolder, `cssPost/${uniteConfiguration.cssPost.toLowerCase()}/`);
        const assetTasksCssLinter = fileSystem.pathCombine(this._distFolder, `cssLinter/${uniteConfiguration.cssLinter.toLowerCase()}/`);
        const assetTasksDocumentor = fileSystem.pathCombine(this._distFolder, `documentor/${uniteConfiguration.documentor.toLowerCase()}/`);
        this.toggleFile(assetTasksLanguage, "build-transpile.js", this._tasksFolder, "build-transpile.js", mainCondition, {
            "^(?:.*){TRANSPILEINCLUDE}(?:.*)": engineVariables.buildTranspileInclude,
            "^(?:.*){TRANSPILEPREBUILD}(?:.*)": engineVariables.buildTranspilePreBuild,
            "^(?:.*){TRANSPILEPOSTBUILD}(?:.*)": engineVariables.buildTranspilePostBuild
        });
        this.toggleFile(assetTasksBundler, "build-bundle-app.js", this._tasksFolder, "build-bundle-app.js", mainCondition);
        this.toggleFile(assetTasksBundler, "build-bundle-vendor.js", this._tasksFolder, "build-bundle-vendor.js", mainCondition);
        this.toggleFile(assetTasksLinter, "build-lint.js", this._tasksFolder, "build-lint.js", mainCondition);
        this.toggleFile(assetTasksCssPre, "build-css-app.js", this._tasksFolder, "build-css-app.js", mainCondition);
        this.toggleFile(assetTasksCssPre, "build-css-components.js", this._tasksFolder, "build-css-components.js", mainCondition);
        this.toggleFile(assetTasksCssLinter, "build-css-lint-app.js", this._tasksFolder, "build-css-lint-app.js", mainCondition);
        this.toggleFile(assetTasksCssLinter, "build-css-lint-components.js", this._tasksFolder, "build-css-lint-components.js", mainCondition);
        this.toggleFile(assetTasksCssPost, "build-css-post-app.js", this._tasksFolder, "build-css-post-app.js", mainCondition);
        this.toggleFile(assetTasksCssPost, "build-css-post-components.js", this._tasksFolder, "build-css-post-components.js", mainCondition);
        this.toggleFile(assetTasksDocumentor, "doc-generate.js", this._tasksFolder, "doc-generate.js", mainCondition);
        this.toggleFile(this._distFolder, "build.js", this._tasksFolder, "build.js", mainCondition);
        this.toggleFile(this._distFolder, "build-transpile-modules.js", this._tasksFolder, "build-transpile-modules.js", mainCondition);
        this.toggleFile(this._distFolder, "version.js", this._tasksFolder, "version.js", mainCondition);
        this.toggleFile(this._distFolder, "doc.js", this._tasksFolder, "doc.js", mainCondition);
    }
    generateUnitDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
    }
    generateUnitFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const hasUnit = !super.condition(uniteConfiguration.unitTestRunner, "None");
        logger.info("Generating gulp tasks for unit in", { gulpTasksFolder: this._tasksFolder });
        const assetUnitTestLanguage = fileSystem.pathCombine(this._distFolder, `sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
        const assetLinter = fileSystem.pathCombine(this._distFolder, `linter/${uniteConfiguration.linter.toLowerCase()}/`);
        const assetUnitTestRunner = fileSystem.pathCombine(this._distFolder, `unitTestRunner/${uniteConfiguration.unitTestRunner.toLowerCase()}/`);
        this.toggleFile(this._distFolder, "unit.js", this._tasksFolder, "unit.js", hasUnit);
        this.toggleFile(assetUnitTestLanguage, "unit-transpile.js", this._tasksFolder, "unit-transpile.js", hasUnit);
        this.toggleFile(assetLinter, "unit-lint.js", this._tasksFolder, "unit-lint.js", hasUnit);
        this.toggleFile(assetUnitTestRunner, "unit-runner.js", this._tasksFolder, "unit-runner.js", hasUnit);
    }
    generateE2eDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        engineVariables.toggleDevDependency(["gulp-webdriver", "browser-sync"], mainCondition && super.condition(uniteConfiguration.e2eTestRunner, "WebdriverIO"));
        engineVariables.toggleDevDependency(["browser-sync"], mainCondition && super.condition(uniteConfiguration.e2eTestRunner, "Protractor"));
    }
    generateE2eFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const hasE2e = !super.condition(uniteConfiguration.e2eTestRunner, "None");
        logger.info("Generating gulp tasks for e2e in", { gulpTasksFolder: this._tasksFolder });
        const assetUnitTestLanguage = fileSystem.pathCombine(this._distFolder, `sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
        const assetLinter = fileSystem.pathCombine(this._distFolder, `linter/${uniteConfiguration.linter.toLowerCase()}/`);
        const assetE2eTestRunner = fileSystem.pathCombine(this._distFolder, `e2eTestRunner/${uniteConfiguration.e2eTestRunner.toLowerCase()}/`);
        this.toggleFile(this._distFolder, "e2e.js", this._tasksFolder, "e2e.js", hasE2e);
        this.toggleFile(assetUnitTestLanguage, "e2e-transpile.js", this._tasksFolder, "e2e-transpile.js", hasE2e);
        this.toggleFile(assetLinter, "e2e-lint.js", this._tasksFolder, "e2e-lint.js", hasE2e);
        this.toggleFile(assetE2eTestRunner, "e2e-runner.js", this._tasksFolder, "e2e-runner.js", hasE2e);
        this.toggleFile(assetE2eTestRunner, "e2e-install.js", this._tasksFolder, "e2e-install.js", hasE2e);
    }
    generateServeDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        engineVariables.toggleDevDependency(["browser-sync"], mainCondition && super.condition(uniteConfiguration.server, "BrowserSync"));
    }
    generateServeFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        logger.info("Generating gulp tasks serve in", { gulpTasksFolder: this._tasksFolder });
        const assetTasksServer = fileSystem.pathCombine(this._distFolder, `server/${uniteConfiguration.server.toLowerCase()}`);
        this.toggleFile(assetTasksServer, "serve.js", this._tasksFolder, "serve.js", mainCondition);
    }
    generateThemeFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        logger.info("Generating gulp tasks theme in", { gulpTasksFolder: this._tasksFolder });
        this.toggleFile(this._distFolder, "theme.js", this._tasksFolder, "theme.js", mainCondition);
    }
    generateUtilsDependencies(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        engineVariables.toggleDevDependency(["gulp-util", "gulp-rename"], mainCondition);
    }
    generateUtilsFiles(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        logger.info("Generating gulp tasks utils in", { gulpUtilFolder: this._utilFolder });
        const assetUtils = fileSystem.pathCombine(this._distFolder, "util/");
        this.toggleFile(assetUtils, "async-util.js", this._utilFolder, "async-util.js", mainCondition);
        this.toggleFile(assetUtils, "client-packages.js", this._utilFolder, "client-packages.js", mainCondition);
        this.toggleFile(assetUtils, "config-utils.js", this._utilFolder, "config-utils.js", mainCondition);
        this.toggleFile(assetUtils, "display.js", this._utilFolder, "display.js", mainCondition);
        this.toggleFile(assetUtils, "exec.js", this._utilFolder, "exec.js", mainCondition);
        this.toggleFile(assetUtils, "env-util.js", this._utilFolder, "env-util.js", mainCondition);
        this.toggleFile(assetUtils, "error-util.js", this._utilFolder, "error-util.js", mainCondition);
        this.toggleFile(assetUtils, "json-helper.js", this._utilFolder, "json-helper.js", mainCondition);
        this.toggleFile(assetUtils, "module-config.js", this._utilFolder, "module-config.js", mainCondition);
        this.toggleFile(assetUtils, "package-config.js", this._utilFolder, "package-config.js", mainCondition);
        this.toggleFile(assetUtils, "platform-utils.js", this._utilFolder, "platform-utils.js", mainCondition);
        this.toggleFile(assetUtils, "regex-utils.js", this._utilFolder, "regex-utils.js", mainCondition);
        this.toggleFile(assetUtils, "theme-utils.js", this._utilFolder, "theme-utils.js", mainCondition);
        this.toggleFile(assetUtils, "unite-config.js", this._utilFolder, "unite-config.js", mainCondition);
        // no longer used so always delete
        this.toggleFile(assetUtils, "bundle.js", this._utilFolder, "bundle.js", false);
    }
    toggleFile(sourceFolder, sourceFile, destFolder, destFile, keep, replacements) {
        this._files.push({ sourceFolder, sourceFile, destFolder, destFile, keep, replacements });
    }
}
exports.Gulp = Gulp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waXBlbGluZVN0ZXBzL3Rhc2tNYW5hZ2VyL2d1bHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQU9BLG9FQUFpRTtBQUVqRSxVQUFrQixTQUFRLG1DQUFnQjtJQU8vQixhQUFhLENBQUMsa0JBQXNDLEVBQUUsZUFBZ0M7UUFDekYsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFWSxTQUFTLENBQUMsTUFBZSxFQUFFLFVBQXVCLEVBQUUsa0JBQXNDLEVBQUUsZUFBZ0MsRUFBRSxhQUFzQjs7WUFDN0osZUFBZSxDQUFDLG1CQUFtQixDQUFDO2dCQUNJLE1BQU07Z0JBQ04sYUFBYTtnQkFDYixhQUFhO2dCQUNiLGNBQWM7Z0JBQ2QsVUFBVTtnQkFDVixhQUFhO2dCQUNiLFdBQVc7Z0JBQ1gsUUFBUTtnQkFDUixtQkFBbUI7Z0JBQ25CLFVBQVU7YUFDYixFQUNELGFBQWEsQ0FBQyxDQUFDO1lBRW5ELElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUN2RyxJQUFJLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDdEcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQ3JHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUN2RyxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDdkcsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUM7S0FBQTtJQUVZLFFBQVEsQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQyxFQUFFLGFBQXNCOzs7WUFDNUosSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDekYsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUM3RixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLGtCQUFrQixFQUFFLGtCQUFrQixDQUFDLENBQUM7WUFFbEcsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFFakIsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDM0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsYUFBYSxFQUFFLGVBQWUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXZHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNoRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDL0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzlGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNoRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDaEcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRWhHLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDMUMsSUFBSSxHQUFHLENBQUM7Z0JBRVIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN0QixHQUFHLEdBQUcsTUFBTSxrQkFBYyxZQUFDLE1BQU0sRUFDTixVQUFVLEVBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQ3ZCLGVBQWUsQ0FBQyxLQUFLLGtCQUVoQixvQkFBb0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUNuQyxpQkFBaUIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUNoQyxjQUFjLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQ2hDLENBQUM7Z0JBQ25DLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osR0FBRyxHQUFHLE1BQU0sd0JBQW9CLFlBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3BJLENBQUM7Z0JBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ1osTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDZixDQUFDO1lBQ0wsQ0FBQztZQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDO0tBQUE7SUFFTyx5QkFBeUIsQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQyxFQUFFLGFBQXNCO1FBQ3hLLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQztZQUNJLEtBQUs7WUFDTCxjQUFjO1lBQ2QsY0FBYztZQUNkLGlCQUFpQjtZQUNqQixhQUFhO1lBQ2IsYUFBYTtZQUNiLGNBQWM7WUFDZCxlQUFlO1lBQ2YsV0FBVztTQUNkLEVBQ0QsYUFBYSxDQUFDLENBQUM7UUFFbkQsOEdBQThHO1FBQzlHLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ25FLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRXRGLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzVILGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzVILGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsYUFBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDakksZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMscUJBQXFCLEVBQUUsY0FBYyxDQUFDLEVBQUUsYUFBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDekosZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsYUFBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDeEgsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsYUFBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDeEgsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsYUFBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDNUgsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsYUFBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDL0gsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDckUsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxhQUFhLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNySSxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3BJLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ25JLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3JJLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQyxFQUFFLGFBQXNCO1FBQ2pLLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFFMUYsTUFBTSxrQkFBa0IsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUksTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzNILE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4SCxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEgsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzNILE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLGFBQWEsa0JBQWtCLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNqSSxNQUFNLG9CQUFvQixHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxjQUFjLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFcEksSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLG9CQUFvQixFQUFFLGFBQWEsRUFBRTtZQUM5RyxpQ0FBaUMsRUFBRSxlQUFlLENBQUMscUJBQXFCO1lBQ3hFLGtDQUFrQyxFQUFFLGVBQWUsQ0FBQyxzQkFBc0I7WUFDMUUsbUNBQW1DLEVBQUUsZUFBZSxDQUFDLHVCQUF1QjtTQUMvRSxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLHFCQUFxQixFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUscUJBQXFCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDbkgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLHdCQUF3QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pILElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3RHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUM1RyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLHlCQUF5QixFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUseUJBQXlCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDMUgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pILElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsOEJBQThCLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSw4QkFBOEIsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN2SSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLHVCQUF1QixFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdkgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSw4QkFBOEIsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLDhCQUE4QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRXJJLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUU5RyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzVGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSw0QkFBNEIsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLDRCQUE0QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2hJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDaEcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRU8sd0JBQXdCLENBQUMsTUFBZSxFQUFFLFVBQXVCLEVBQUUsa0JBQXNDLEVBQUUsZUFBZ0MsRUFBRSxhQUFzQjtJQUMzSyxDQUFDO0lBRU8saUJBQWlCLENBQUMsTUFBZSxFQUFFLFVBQXVCLEVBQUUsa0JBQXNDLEVBQUUsZUFBZ0MsRUFBRSxhQUFzQjtRQUNoSyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUNBQW1DLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFFekYsTUFBTSxxQkFBcUIsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQ2hCLGtCQUFrQixrQkFBa0IsQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTNILE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFDaEIsVUFBVSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWpHLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUNoQixrQkFBa0Isa0JBQWtCLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV6SCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3RyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pHLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQyxFQUFFLGFBQXNCO1FBQ3RLLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQzNKLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQzVJLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQyxFQUFFLGFBQXNCO1FBQy9KLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUUsTUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUV4RixNQUFNLHFCQUFxQixHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFDaEIsa0JBQWtCLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFM0gsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUNoQixVQUFVLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFakcsTUFBTSxrQkFBa0IsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQ2hCLGlCQUFpQixrQkFBa0IsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXRILElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RixJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdkcsQ0FBQztJQUVPLHlCQUF5QixDQUFDLE1BQWUsRUFBRSxVQUF1QixFQUFFLGtCQUFzQyxFQUFFLGVBQWdDLEVBQUUsYUFBc0I7UUFDeEssZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsYUFBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDdEksQ0FBQztJQUVPLGtCQUFrQixDQUFDLE1BQWUsRUFBRSxVQUF1QixFQUFFLGtCQUFzQyxFQUFFLGVBQWdDLEVBQUUsYUFBc0I7UUFDakssTUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUV0RixNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFdkgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDaEcsQ0FBQztJQUVPLGtCQUFrQixDQUFDLE1BQWUsRUFBRSxVQUF1QixFQUFFLGtCQUFzQyxFQUFFLGVBQWdDLEVBQUUsYUFBc0I7UUFDakssTUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUV0RixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFTyx5QkFBeUIsQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQyxFQUFFLGFBQXNCO1FBQ3hLLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRU8sa0JBQWtCLENBQUMsTUFBZSxFQUFFLFVBQXVCLEVBQUUsa0JBQXNDLEVBQUUsZUFBZ0MsRUFBRSxhQUFzQjtRQUNqSyxNQUFNLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBRXBGLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVyRSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUMvRixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDckcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDakcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRW5HLGtDQUFrQztRQUNsQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVPLFVBQVUsQ0FBQyxZQUFvQixFQUFFLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxRQUFnQixFQUFFLElBQWEsRUFBRSxZQUF3QztRQUN0SixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUM3RixDQUFDO0NBQ0o7QUFuUEQsb0JBbVBDIiwiZmlsZSI6InBpcGVsaW5lU3RlcHMvdGFza01hbmFnZXIvZ3VscC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGlwZWxpbmUgc3RlcCB0byBnZW5lcmF0ZSBjb25maWd1cmF0aW9uIGZvciBndWxwLlxuICovXG5pbXBvcnQgeyBJRmlsZVN5c3RlbSB9IGZyb20gXCJ1bml0ZWpzLWZyYW1ld29yay9kaXN0L2ludGVyZmFjZXMvSUZpbGVTeXN0ZW1cIjtcbmltcG9ydCB7IElMb2dnZXIgfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9pbnRlcmZhY2VzL0lMb2dnZXJcIjtcbmltcG9ydCB7IFVuaXRlQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi8uLi9jb25maWd1cmF0aW9uL21vZGVscy91bml0ZS91bml0ZUNvbmZpZ3VyYXRpb25cIjtcbmltcG9ydCB7IEVuZ2luZVZhcmlhYmxlcyB9IGZyb20gXCIuLi8uLi9lbmdpbmUvZW5naW5lVmFyaWFibGVzXCI7XG5pbXBvcnQgeyBQaXBlbGluZVN0ZXBCYXNlIH0gZnJvbSBcIi4uLy4uL2VuZ2luZS9waXBlbGluZVN0ZXBCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBHdWxwIGV4dGVuZHMgUGlwZWxpbmVTdGVwQmFzZSB7XG4gICAgcHJpdmF0ZSBfdGFza3NGb2xkZXI6IHN0cmluZztcbiAgICBwcml2YXRlIF91dGlsRm9sZGVyOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfZGlzdEZvbGRlcjogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBfZmlsZXM6IHsgc291cmNlRm9sZGVyOiBzdHJpbmc7IHNvdXJjZUZpbGU6IHN0cmluZzsgZGVzdEZvbGRlcjogc3RyaW5nOyBkZXN0RmlsZTogc3RyaW5nOyBrZWVwOiBib29sZWFuOyByZXBsYWNlbWVudHM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmdbXX0gfVtdO1xuXG4gICAgcHVibGljIG1haW5Db25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzKSA6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi50YXNrTWFuYWdlciwgXCJHdWxwXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjb25maWd1cmUobG9nZ2VyOiBJTG9nZ2VyLCBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzLCBtYWluQ29uZGl0aW9uOiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcXVpcmUtZGlyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImd1bHAtcmVuYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImd1bHAtcmVwbGFjZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtaW5pbWlzdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLXVnbGlmeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1Z2xpZnktanNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWtkaXJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0cmVhbS10by1wcm9taXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRocm91Z2gyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkNvbmRpdGlvbik7XG5cbiAgICAgICAgdGhpcy5nZW5lcmF0ZUJ1aWxkRGVwZW5kZW5jaWVzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLmdlbmVyYXRlVW5pdERlcGVuZGVuY2llcyhsb2dnZXIsIGZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUUyZURlcGVuZGVuY2llcyhsb2dnZXIsIGZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVNlcnZlRGVwZW5kZW5jaWVzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLmdlbmVyYXRlVXRpbHNEZXBlbmRlbmNpZXMobG9nZ2VyLCBmaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBmaW5hbGlzZShsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb246IGJvb2xlYW4pOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICB0aGlzLl90YXNrc0ZvbGRlciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLnd3d1Jvb3RGb2xkZXIsIFwiYnVpbGQvdGFza3NcIik7XG4gICAgICAgIHRoaXMuX3V0aWxGb2xkZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy53d3dSb290Rm9sZGVyLCBcImJ1aWxkL3Rhc2tzL3V0aWxcIik7XG4gICAgICAgIHRoaXMuX2Rpc3RGb2xkZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsIFwiZ3VscC9kaXN0L3Rhc2tzL1wiKTtcblxuICAgICAgICB0aGlzLl9maWxlcyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0R3VscCA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlciwgXCJndWxwL2Rpc3QvXCIpO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRHdWxwLCBcImd1bHBmaWxlLmpzXCIsIGVuZ2luZVZhcmlhYmxlcy53d3dSb290Rm9sZGVyLCBcImd1bHBmaWxlLmpzXCIsIG1haW5Db25kaXRpb24pO1xuXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVCdWlsZEZpbGVzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLmdlbmVyYXRlVW5pdEZpbGVzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLmdlbmVyYXRlRTJlRmlsZXMobG9nZ2VyLCBmaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVTZXJ2ZUZpbGVzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLmdlbmVyYXRlVGhlbWVGaWxlcyhsb2dnZXIsIGZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVV0aWxzRmlsZXMobG9nZ2VyLCBmaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9maWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJldDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpbGVzW2ldLmtlZXApIHtcbiAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCBzdXBlci5jb3B5RmlsZShsb2dnZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlc1tpXS5zb3VyY2VGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlsZXNbaV0uc291cmNlRmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlc1tpXS5kZXN0Rm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVzW2ldLmRlc3RGaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZ2luZVZhcmlhYmxlcy5mb3JjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcXFxcXFwiLi4vLi4vLi4vdXRpbC9cIjogW1wiXFxcIi4vdXRpbC9cIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcXFxcXFwiLi4vLi4vdXRpbC9cIjogW1wiXFxcIi4vdXRpbC9cIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcXFxcXFwiLi4vdXRpbC9cIjogW1wiXFxcIi4vdXRpbC9cIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLl9maWxlc1tpXS5yZXBsYWNlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldCA9IGF3YWl0IHN1cGVyLmZpbGVEZWxldGVUZXh0KGxvZ2dlciwgZmlsZVN5c3RlbSwgdGhpcy5fZmlsZXNbaV0uZGVzdEZvbGRlciwgdGhpcy5fZmlsZXNbaV0uZGVzdEZpbGUsIGVuZ2luZVZhcmlhYmxlcy5mb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUJ1aWxkRGVwZW5kZW5jaWVzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZWxldGUtZW1wdHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicnVuLXNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImd1bHAtc291cmNlbWFwc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLWNvbmNhdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLWluc2VydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLWh0bWxtaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaHRtbC1taW5pZmllclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlLWdsb2JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluQ29uZGl0aW9uKTtcblxuICAgICAgICAvLyBCYWJlbCBhbmQgVHlwZVNjcmlwdCBhcmUgYWx3YXlzIG5lZWRlZCBub3cgYXMgY2xpZW50IHBhY2thZ2VzIGNhbiBiZSB0cmFuc3BpbGVkIGZyb20gZWl0aGVyIHNvdXJjZSBsYW5ndWFnZVxuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJndWxwLWJhYmVsXCJdLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC10eXBlc2NyaXB0XCIsIFwidHlwZXNjcmlwdFwiXSwgbWFpbkNvbmRpdGlvbik7XG5cbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC1lc2xpbnRcIl0sIG1haW5Db25kaXRpb24gJiYgc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5saW50ZXIsIFwiRVNMaW50XCIpKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC10c2xpbnRcIl0sIG1haW5Db25kaXRpb24gJiYgc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5saW50ZXIsIFwiVFNMaW50XCIpKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wid2VicGFjay1zdHJlYW1cIl0sIG1haW5Db25kaXRpb24gJiYgc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5idW5kbGVyLCBcIldlYnBhY2tcIikpO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJ2aW55bC1zb3VyY2Utc3RyZWFtXCIsIFwidmlueWwtYnVmZmVyXCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uYnVuZGxlciwgXCJCcm93c2VyaWZ5XCIpKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC1sZXNzXCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uY3NzUHJlLCBcIkxlc3NcIikpO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJndWxwLXNhc3NcIl0sIG1haW5Db25kaXRpb24gJiYgc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5jc3NQcmUsIFwiU2Fzc1wiKSk7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtc3R5bHVzXCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uY3NzUHJlLCBcIlN0eWx1c1wiKSk7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtcG9zdGNzc1wiXSwgbWFpbkNvbmRpdGlvbiAmJiBzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLmNzc1Bvc3QsIFwiUG9zdENzc1wiKSk7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtY3NzbmFub1wiXSwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtc3R5bGVsaW50XCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uY3NzTGludGVyLCBcIlN0eWxlTGludFwiKSk7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtc2Fzcy1saW50XCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uY3NzTGludGVyLCBcIlNhc3NMaW50XCIpKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC1sZXNzaGludFwiXSwgbWFpbkNvbmRpdGlvbiAmJiBzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLmNzc0xpbnRlciwgXCJMZXNzSGludFwiKSk7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtc3R5bGludFwiXSwgbWFpbkNvbmRpdGlvbiAmJiBzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLmNzc0xpbnRlciwgXCJTdHlsaW50XCIpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlQnVpbGRGaWxlcyhsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb246IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJHZW5lcmF0aW5nIGd1bHAgdGFza3MgZm9yIGJ1aWxkIGluXCIsIHsgZ3VscFRhc2tzRm9sZGVyOiB0aGlzLl90YXNrc0ZvbGRlciB9KTtcblxuICAgICAgICBjb25zdCBhc3NldFRhc2tzTGFuZ3VhZ2UgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsIGBzb3VyY2VMYW5ndWFnZS8ke3VuaXRlQ29uZmlndXJhdGlvbi5zb3VyY2VMYW5ndWFnZS50b0xvd2VyQ2FzZSgpfS9gKTtcbiAgICAgICAgY29uc3QgYXNzZXRUYXNrc0J1bmRsZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsIGBidW5kbGVyLyR7dW5pdGVDb25maWd1cmF0aW9uLmJ1bmRsZXIudG9Mb3dlckNhc2UoKX0vYCk7XG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NMaW50ZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsIGBsaW50ZXIvJHt1bml0ZUNvbmZpZ3VyYXRpb24ubGludGVyLnRvTG93ZXJDYXNlKCl9L2ApO1xuICAgICAgICBjb25zdCBhc3NldFRhc2tzQ3NzUHJlID0gZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh0aGlzLl9kaXN0Rm9sZGVyLCBgY3NzUHJlLyR7dW5pdGVDb25maWd1cmF0aW9uLmNzc1ByZS50b0xvd2VyQ2FzZSgpfS9gKTtcbiAgICAgICAgY29uc3QgYXNzZXRUYXNrc0Nzc1Bvc3QgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsIGBjc3NQb3N0LyR7dW5pdGVDb25maWd1cmF0aW9uLmNzc1Bvc3QudG9Mb3dlckNhc2UoKX0vYCk7XG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NDc3NMaW50ZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsIGBjc3NMaW50ZXIvJHt1bml0ZUNvbmZpZ3VyYXRpb24uY3NzTGludGVyLnRvTG93ZXJDYXNlKCl9L2ApO1xuICAgICAgICBjb25zdCBhc3NldFRhc2tzRG9jdW1lbnRvciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5fZGlzdEZvbGRlciwgYGRvY3VtZW50b3IvJHt1bml0ZUNvbmZpZ3VyYXRpb24uZG9jdW1lbnRvci50b0xvd2VyQ2FzZSgpfS9gKTtcblxuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrc0xhbmd1YWdlLCBcImJ1aWxkLXRyYW5zcGlsZS5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJidWlsZC10cmFuc3BpbGUuanNcIiwgbWFpbkNvbmRpdGlvbiwge1xuICAgICAgICAgICAgXCJeKD86Liope1RSQU5TUElMRUlOQ0xVREV9KD86LiopXCI6IGVuZ2luZVZhcmlhYmxlcy5idWlsZFRyYW5zcGlsZUluY2x1ZGUsXG4gICAgICAgICAgICBcIl4oPzouKil7VFJBTlNQSUxFUFJFQlVJTER9KD86LiopXCI6IGVuZ2luZVZhcmlhYmxlcy5idWlsZFRyYW5zcGlsZVByZUJ1aWxkLFxuICAgICAgICAgICAgXCJeKD86Liope1RSQU5TUElMRVBPU1RCVUlMRH0oPzouKilcIjogZW5naW5lVmFyaWFibGVzLmJ1aWxkVHJhbnNwaWxlUG9zdEJ1aWxkXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrc0J1bmRsZXIsIFwiYnVpbGQtYnVuZGxlLWFwcC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJidWlsZC1idW5kbGUtYXBwLmpzXCIsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrc0J1bmRsZXIsIFwiYnVpbGQtYnVuZGxlLXZlbmRvci5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJidWlsZC1idW5kbGUtdmVuZG9yLmpzXCIsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrc0xpbnRlciwgXCJidWlsZC1saW50LmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImJ1aWxkLWxpbnQuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQ3NzUHJlLCBcImJ1aWxkLWNzcy1hcHAuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiYnVpbGQtY3NzLWFwcC5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VGFza3NDc3NQcmUsIFwiYnVpbGQtY3NzLWNvbXBvbmVudHMuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiYnVpbGQtY3NzLWNvbXBvbmVudHMuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQ3NzTGludGVyLCBcImJ1aWxkLWNzcy1saW50LWFwcC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJidWlsZC1jc3MtbGludC1hcHAuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQ3NzTGludGVyLCBcImJ1aWxkLWNzcy1saW50LWNvbXBvbmVudHMuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiYnVpbGQtY3NzLWxpbnQtY29tcG9uZW50cy5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VGFza3NDc3NQb3N0LCBcImJ1aWxkLWNzcy1wb3N0LWFwcC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJidWlsZC1jc3MtcG9zdC1hcHAuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQ3NzUG9zdCwgXCJidWlsZC1jc3MtcG9zdC1jb21wb25lbnRzLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImJ1aWxkLWNzcy1wb3N0LWNvbXBvbmVudHMuanNcIiwgbWFpbkNvbmRpdGlvbik7XG5cbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VGFza3NEb2N1bWVudG9yLCBcImRvYy1nZW5lcmF0ZS5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJkb2MtZ2VuZXJhdGUuanNcIiwgbWFpbkNvbmRpdGlvbik7XG5cbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKHRoaXMuX2Rpc3RGb2xkZXIsIFwiYnVpbGQuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiYnVpbGQuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZSh0aGlzLl9kaXN0Rm9sZGVyLCBcImJ1aWxkLXRyYW5zcGlsZS1tb2R1bGVzLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImJ1aWxkLXRyYW5zcGlsZS1tb2R1bGVzLmpzXCIsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUodGhpcy5fZGlzdEZvbGRlciwgXCJ2ZXJzaW9uLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInZlcnNpb24uanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZSh0aGlzLl9kaXN0Rm9sZGVyLCBcImRvYy5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJkb2MuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVVuaXREZXBlbmRlbmNpZXMobG9nZ2VyOiBJTG9nZ2VyLCBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzLCBtYWluQ29uZGl0aW9uOiBib29sZWFuKTogdm9pZCB7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVVuaXRGaWxlcyhsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb246IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGFzVW5pdCA9ICFzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0UnVubmVyLCBcIk5vbmVcIik7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiR2VuZXJhdGluZyBndWxwIHRhc2tzIGZvciB1bml0IGluXCIsIHsgZ3VscFRhc2tzRm9sZGVyOiB0aGlzLl90YXNrc0ZvbGRlciB9KTtcblxuICAgICAgICBjb25zdCBhc3NldFVuaXRUZXN0TGFuZ3VhZ2UgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHNvdXJjZUxhbmd1YWdlLyR7dW5pdGVDb25maWd1cmF0aW9uLnNvdXJjZUxhbmd1YWdlLnRvTG93ZXJDYXNlKCl9L2ApO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0TGludGVyID0gZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh0aGlzLl9kaXN0Rm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGxpbnRlci8ke3VuaXRlQ29uZmlndXJhdGlvbi5saW50ZXIudG9Mb3dlckNhc2UoKX0vYCk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRVbml0VGVzdFJ1bm5lciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5fZGlzdEZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHVuaXRUZXN0UnVubmVyLyR7dW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0UnVubmVyLnRvTG93ZXJDYXNlKCl9L2ApO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZSh0aGlzLl9kaXN0Rm9sZGVyLCBcInVuaXQuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwidW5pdC5qc1wiLCBoYXNVbml0KTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VW5pdFRlc3RMYW5ndWFnZSwgXCJ1bml0LXRyYW5zcGlsZS5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJ1bml0LXRyYW5zcGlsZS5qc1wiLCBoYXNVbml0KTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0TGludGVyLCBcInVuaXQtbGludC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJ1bml0LWxpbnQuanNcIiwgaGFzVW5pdCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFVuaXRUZXN0UnVubmVyLCBcInVuaXQtcnVubmVyLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInVuaXQtcnVubmVyLmpzXCIsIGhhc1VuaXQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVFMmVEZXBlbmRlbmNpZXMobG9nZ2VyOiBJTG9nZ2VyLCBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzLCBtYWluQ29uZGl0aW9uOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtd2ViZHJpdmVyXCIsIFwiYnJvd3Nlci1zeW5jXCJdLCBtYWluQ29uZGl0aW9uICYmIHN1cGVyLmNvbmRpdGlvbih1bml0ZUNvbmZpZ3VyYXRpb24uZTJlVGVzdFJ1bm5lciwgXCJXZWJkcml2ZXJJT1wiKSk7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImJyb3dzZXItc3luY1wiXSwgbWFpbkNvbmRpdGlvbiAmJiBzdXBlci5jb25kaXRpb24odW5pdGVDb25maWd1cmF0aW9uLmUyZVRlc3RSdW5uZXIsIFwiUHJvdHJhY3RvclwiKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUUyZUZpbGVzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCBoYXNFMmUgPSAhc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5lMmVUZXN0UnVubmVyLCBcIk5vbmVcIik7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiR2VuZXJhdGluZyBndWxwIHRhc2tzIGZvciBlMmUgaW5cIiwgeyBndWxwVGFza3NGb2xkZXI6IHRoaXMuX3Rhc2tzRm9sZGVyIH0pO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0VW5pdFRlc3RMYW5ndWFnZSA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5fZGlzdEZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgc291cmNlTGFuZ3VhZ2UvJHt1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlTGFuZ3VhZ2UudG9Mb3dlckNhc2UoKX0vYCk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRMaW50ZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbGludGVyLyR7dW5pdGVDb25maWd1cmF0aW9uLmxpbnRlci50b0xvd2VyQ2FzZSgpfS9gKTtcblxuICAgICAgICBjb25zdCBhc3NldEUyZVRlc3RSdW5uZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGUyZVRlc3RSdW5uZXIvJHt1bml0ZUNvbmZpZ3VyYXRpb24uZTJlVGVzdFJ1bm5lci50b0xvd2VyQ2FzZSgpfS9gKTtcblxuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUodGhpcy5fZGlzdEZvbGRlciwgXCJlMmUuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiZTJlLmpzXCIsIGhhc0UyZSk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFVuaXRUZXN0TGFuZ3VhZ2UsIFwiZTJlLXRyYW5zcGlsZS5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJlMmUtdHJhbnNwaWxlLmpzXCIsIGhhc0UyZSk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldExpbnRlciwgXCJlMmUtbGludC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJlMmUtbGludC5qc1wiLCBoYXNFMmUpO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRFMmVUZXN0UnVubmVyLCBcImUyZS1ydW5uZXIuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiZTJlLXJ1bm5lci5qc1wiLCBoYXNFMmUpO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRFMmVUZXN0UnVubmVyLCBcImUyZS1pbnN0YWxsLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImUyZS1pbnN0YWxsLmpzXCIsIGhhc0UyZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVNlcnZlRGVwZW5kZW5jaWVzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJicm93c2VyLXN5bmNcIl0sIG1haW5Db25kaXRpb24gJiYgc3VwZXIuY29uZGl0aW9uKHVuaXRlQ29uZmlndXJhdGlvbi5zZXJ2ZXIsIFwiQnJvd3NlclN5bmNcIikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVTZXJ2ZUZpbGVzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBsb2dnZXIuaW5mbyhcIkdlbmVyYXRpbmcgZ3VscCB0YXNrcyBzZXJ2ZSBpblwiLCB7IGd1bHBUYXNrc0ZvbGRlcjogdGhpcy5fdGFza3NGb2xkZXIgfSk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRUYXNrc1NlcnZlciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5fZGlzdEZvbGRlciwgYHNlcnZlci8ke3VuaXRlQ29uZmlndXJhdGlvbi5zZXJ2ZXIudG9Mb3dlckNhc2UoKX1gKTtcblxuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrc1NlcnZlciwgXCJzZXJ2ZS5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJzZXJ2ZS5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlVGhlbWVGaWxlcyhsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb246IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJHZW5lcmF0aW5nIGd1bHAgdGFza3MgdGhlbWUgaW5cIiwgeyBndWxwVGFza3NGb2xkZXI6IHRoaXMuX3Rhc2tzRm9sZGVyIH0pO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZSh0aGlzLl9kaXN0Rm9sZGVyLCBcInRoZW1lLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInRoZW1lLmpzXCIsIG1haW5Db25kaXRpb24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVVdGlsc0RlcGVuZGVuY2llcyhsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIG1haW5Db25kaXRpb246IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC11dGlsXCIsIFwiZ3VscC1yZW5hbWVcIl0sIG1haW5Db25kaXRpb24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVVdGlsc0ZpbGVzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgbWFpbkNvbmRpdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBsb2dnZXIuaW5mbyhcIkdlbmVyYXRpbmcgZ3VscCB0YXNrcyB1dGlscyBpblwiLCB7IGd1bHBVdGlsRm9sZGVyOiB0aGlzLl91dGlsRm9sZGVyIH0pO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0VXRpbHMgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMuX2Rpc3RGb2xkZXIsIFwidXRpbC9cIik7XG5cbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwiYXN5bmMtdXRpbC5qc1wiLCB0aGlzLl91dGlsRm9sZGVyLCBcImFzeW5jLXV0aWwuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxzLCBcImNsaWVudC1wYWNrYWdlcy5qc1wiLCB0aGlzLl91dGlsRm9sZGVyLCBcImNsaWVudC1wYWNrYWdlcy5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwiY29uZmlnLXV0aWxzLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwiY29uZmlnLXV0aWxzLmpzXCIsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRVdGlscywgXCJkaXNwbGF5LmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwiZGlzcGxheS5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwiZXhlYy5qc1wiLCB0aGlzLl91dGlsRm9sZGVyLCBcImV4ZWMuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxzLCBcImVudi11dGlsLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwiZW52LXV0aWwuanNcIiwgbWFpbkNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxzLCBcImVycm9yLXV0aWwuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJlcnJvci11dGlsLmpzXCIsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRVdGlscywgXCJqc29uLWhlbHBlci5qc1wiLCB0aGlzLl91dGlsRm9sZGVyLCBcImpzb24taGVscGVyLmpzXCIsIG1haW5Db25kaXRpb24pO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRVdGlscywgXCJtb2R1bGUtY29uZmlnLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwibW9kdWxlLWNvbmZpZy5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwicGFja2FnZS1jb25maWcuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJwYWNrYWdlLWNvbmZpZy5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwicGxhdGZvcm0tdXRpbHMuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJwbGF0Zm9ybS11dGlscy5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwicmVnZXgtdXRpbHMuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJyZWdleC11dGlscy5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwidGhlbWUtdXRpbHMuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJ0aGVtZS11dGlscy5qc1wiLCBtYWluQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwidW5pdGUtY29uZmlnLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwidW5pdGUtY29uZmlnLmpzXCIsIG1haW5Db25kaXRpb24pO1xuXG4gICAgICAgIC8vIG5vIGxvbmdlciB1c2VkIHNvIGFsd2F5cyBkZWxldGVcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwiYnVuZGxlLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwiYnVuZGxlLmpzXCIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRvZ2dsZUZpbGUoc291cmNlRm9sZGVyOiBzdHJpbmcsIHNvdXJjZUZpbGU6IHN0cmluZywgZGVzdEZvbGRlcjogc3RyaW5nLCBkZXN0RmlsZTogc3RyaW5nLCBrZWVwOiBib29sZWFuLCByZXBsYWNlbWVudHM/OiB7IFtpZDogc3RyaW5nXTogc3RyaW5nW119KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2ZpbGVzLnB1c2goeyBzb3VyY2VGb2xkZXIsIHNvdXJjZUZpbGUsIGRlc3RGb2xkZXIsIGRlc3RGaWxlLCBrZWVwLCByZXBsYWNlbWVudHMgfSk7XG4gICAgfVxufVxuIl19
