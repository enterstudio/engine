"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enginePipelineStepBase_1 = require("../../engine/enginePipelineStepBase");
class Gulp extends enginePipelineStepBase_1.EnginePipelineStepBase {
    initialise(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            this._buildFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build");
            this._tasksFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build/tasks");
            this._utilFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build/tasks/util");
            this._files = [];
            return 0;
        });
    }
    process(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const isGulp = uniteConfiguration.taskManager === "Gulp";
            engineVariables.toggleDevDependency([
                "gulp",
                "bluebird",
                "require-dir",
                "gulp-rename",
                "gulp-replace",
                "minimist",
                "gulp-uglify",
                "uglify-js",
                "mkdirp"
            ], isGulp);
            const assetGulp = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp");
            this.toggleFile(assetGulp, "gulpfile.js", engineVariables.wwwRootFolder, "gulpfile.js", isGulp);
            this.generateBuildTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp);
            this.generateUnitTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp);
            this.generateE2eTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp);
            this.generateServeTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp);
            this.generateThemeTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp);
            this.generateUtils(logger, fileSystem, uniteConfiguration, engineVariables, isGulp);
            for (let i = 0; i < this._files.length; i++) {
                let ret;
                if (this._files[i].keep) {
                    ret = yield _super("copyFile").call(this, logger, fileSystem, this._files[i].sourceFolder, this._files[i].sourceFile, this._files[i].destFolder, this._files[i].destFile, engineVariables.force);
                }
                else {
                    ret = yield _super("deleteFile").call(this, logger, fileSystem, this._files[i].destFolder, this._files[i].destFile, engineVariables.force);
                }
                if (ret !== 0) {
                    return ret;
                }
            }
            if (!isGulp) {
                try {
                    logger.info("Deleting Gulp Build Directory", { gulpBuildFolder: this._buildFolder });
                    const exists = yield fileSystem.directoryExists(engineVariables.wwwRootFolder);
                    if (exists) {
                        yield fileSystem.directoryDelete(this._buildFolder);
                    }
                }
                catch (err) {
                    logger.error("Deleting Gulp Build Directory failed", err, { gulpBuildFolder: this._buildFolder });
                    return 1;
                }
            }
            return 0;
        });
    }
    generateBuildTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp) {
        engineVariables.toggleDevDependency([
            "del",
            "delete-empty",
            "run-sequence",
            "gulp-sourcemaps",
            "gulp-concat",
            "gulp-insert",
            "gulp-htmlmin",
            "html-minifier",
            "node-glob"
        ], isGulp);
        engineVariables.toggleDevDependency(["gulp-babel"], isGulp && uniteConfiguration.sourceLanguage === "JavaScript");
        engineVariables.toggleDevDependency(["gulp-typescript"], isGulp && uniteConfiguration.sourceLanguage === "TypeScript");
        engineVariables.toggleDevDependency(["gulp-eslint"], isGulp && uniteConfiguration.linter === "ESLint");
        engineVariables.toggleDevDependency(["gulp-tslint"], isGulp && uniteConfiguration.linter === "TSLint");
        engineVariables.toggleDevDependency(["webpack-stream"], isGulp && uniteConfiguration.bundler === "Webpack");
        engineVariables.toggleDevDependency(["vinyl-source-stream", "vinyl-buffer"], isGulp && uniteConfiguration.bundler === "Browserify");
        engineVariables.toggleDevDependency(["gulp-less"], isGulp && uniteConfiguration.cssPre === "Less");
        engineVariables.toggleDevDependency(["gulp-sass"], isGulp && uniteConfiguration.cssPre === "Sass");
        engineVariables.toggleDevDependency(["gulp-stylus"], isGulp && uniteConfiguration.cssPre === "Stylus");
        engineVariables.toggleDevDependency(["gulp-postcss"], isGulp && uniteConfiguration.cssPost === "PostCss");
        engineVariables.toggleDevDependency(["gulp-cssnano"], isGulp && uniteConfiguration.cssPost === "None");
        logger.info("Generating gulp tasks for build in", { gulpTasksFolder: this._tasksFolder });
        const assetTasks = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
        const assetTasksLanguage = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
        const assetTasksBundler = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/bundler/${uniteConfiguration.bundler.toLowerCase()}/`);
        const assetTasksLinter = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/linter/${uniteConfiguration.linter.toLowerCase()}/`);
        const assetTasksCssPre = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/cssPre/${uniteConfiguration.cssPre.toLowerCase()}/`);
        const assetTasksCssPost = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/cssPost/${uniteConfiguration.cssPost.toLowerCase()}/`);
        this.toggleFile(assetTasksLanguage, "build-transpile.js", this._tasksFolder, "build-transpile.js", isGulp);
        this.toggleFile(assetTasksBundler, "build-bundle-app.js", this._tasksFolder, "build-bundle-app.js", isGulp);
        this.toggleFile(assetTasksBundler, "build-bundle-vendor.js", this._tasksFolder, "build-bundle-vendor.js", isGulp);
        this.toggleFile(assetTasksLinter, "build-lint.js", this._tasksFolder, "build-lint.js", isGulp);
        this.toggleFile(assetTasksCssPre, "build-css-app.js", this._tasksFolder, "build-css-app.js", isGulp);
        this.toggleFile(assetTasksCssPre, "build-css-components.js", this._tasksFolder, "build-css-components.js", isGulp);
        this.toggleFile(assetTasksCssPost, "build-css-post-app.js", this._tasksFolder, "build-css-post-app.js", isGulp);
        this.toggleFile(assetTasksCssPost, "build-css-post-components.js", this._tasksFolder, "build-css-post-components.js", isGulp);
        this.toggleFile(assetTasks, "build.js", this._tasksFolder, "build.js", isGulp);
        this.toggleFile(assetTasks, "version.js", this._tasksFolder, "version.js", isGulp);
    }
    generateUnitTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp) {
        engineVariables.toggleDevDependency(["gulp-karma-runner"], isGulp && uniteConfiguration.unitTestRunner === "Karma");
        const hasUnit = uniteConfiguration.unitTestRunner !== "None";
        logger.info("Generating gulp tasks for unit in", { gulpTasksFolder: this._tasksFolder });
        const assetUnitTest = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
        const assetUnitTestLanguage = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
        const assetLinter = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/linter/${uniteConfiguration.linter.toLowerCase()}/`);
        const assetUnitTestRunner = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/unitTestRunner/${uniteConfiguration.unitTestRunner.toLowerCase()}/`);
        this.toggleFile(assetUnitTest, "unit.js", this._tasksFolder, "unit.js", isGulp && hasUnit);
        this.toggleFile(assetUnitTestLanguage, "unit-transpile.js", this._tasksFolder, "unit-transpile.js", isGulp && hasUnit);
        this.toggleFile(assetLinter, "unit-lint.js", this._tasksFolder, "unit-lint.js", isGulp && hasUnit);
        this.toggleFile(assetUnitTestRunner, "unit-runner.js", this._tasksFolder, "unit-runner.js", isGulp && hasUnit);
    }
    generateE2eTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp) {
        engineVariables.toggleDevDependency(["gulp-webdriver", "browser-sync"], isGulp && uniteConfiguration.e2eTestRunner === "WebdriverIO");
        engineVariables.toggleDevDependency(["browser-sync"], isGulp && uniteConfiguration.e2eTestRunner === "Protractor");
        const hasE2e = uniteConfiguration.e2eTestRunner !== "None";
        logger.info("Generating gulp tasks for e2e in", { gulpTasksFolder: this._tasksFolder });
        const assetE2eTest = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
        const assetUnitTestLanguage = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
        const assetLinter = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/linter/${uniteConfiguration.linter.toLowerCase()}/`);
        const assetE2eTestRunner = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/e2eTestRunner/${uniteConfiguration.e2eTestRunner.toLowerCase()}/`);
        this.toggleFile(assetE2eTest, "e2e.js", this._tasksFolder, "e2e.js", isGulp && hasE2e);
        this.toggleFile(assetUnitTestLanguage, "e2e-transpile.js", this._tasksFolder, "e2e-transpile.js", isGulp && hasE2e);
        this.toggleFile(assetLinter, "e2e-lint.js", this._tasksFolder, "e2e-lint.js", isGulp && hasE2e);
        this.toggleFile(assetE2eTestRunner, "e2e-runner.js", this._tasksFolder, "e2e-runner.js", isGulp && hasE2e);
        this.toggleFile(assetE2eTestRunner, "e2e-install.js", this._tasksFolder, "e2e-install.js", isGulp && hasE2e);
    }
    generateServeTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp) {
        logger.info("Generating gulp tasks serve in", { gulpTasksFolder: this._tasksFolder });
        const assetTasksServer = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/server/${uniteConfiguration.server.toLowerCase()}`);
        this.toggleFile(assetTasksServer, "serve.js", this._tasksFolder, "serve.js", isGulp);
    }
    generateThemeTasks(logger, fileSystem, uniteConfiguration, engineVariables, isGulp) {
        logger.info("Generating gulp tasks theme in", { gulpTasksFolder: this._tasksFolder });
        const assetTasksTheme = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
        this.toggleFile(assetTasksTheme, "theme.js", this._tasksFolder, "theme.js", isGulp);
    }
    generateUtils(logger, fileSystem, uniteConfiguration, engineVariables, isGulp) {
        engineVariables.toggleDevDependency(["gulp-util", "gulp-rename"], isGulp);
        logger.info("Generating gulp tasks utils in", { gulpUtilFolder: this._utilFolder });
        const assetUtils = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/util/");
        const assetUtilModuleType = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/moduleType/${uniteConfiguration.moduleType.toLowerCase()}/util/`);
        this.toggleFile(assetUtils, "async-util.js", this._utilFolder, "async-util.js", isGulp);
        this.toggleFile(assetUtils, "bundle.js", this._utilFolder, "bundle.js", isGulp);
        this.toggleFile(assetUtils, "client-packages.js", this._utilFolder, "client-packages.js", isGulp);
        this.toggleFile(assetUtils, "display.js", this._utilFolder, "display.js", isGulp);
        this.toggleFile(assetUtils, "exec.js", this._utilFolder, "exec.js", isGulp);
        this.toggleFile(assetUtils, "package-config.js", this._utilFolder, "package-config.js", isGulp);
        this.toggleFile(assetUtils, "platform-utils.js", this._utilFolder, "platform-utils.js", isGulp);
        this.toggleFile(assetUtils, "theme-utils.js", this._utilFolder, "theme-utils.js", isGulp);
        this.toggleFile(assetUtils, "unite-config.js", this._utilFolder, "unite-config.js", isGulp);
        this.toggleFile(assetUtilModuleType, "module-config.js", this._utilFolder, "module-config.js", isGulp);
    }
    toggleFile(sourceFolder, sourceFile, destFolder, destFile, keep) {
        this._files.push({ sourceFolder, sourceFile, destFolder, destFile, keep });
    }
}
exports.Gulp = Gulp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waXBlbGluZVN0ZXBzL3Rhc2tNYW5hZ2VyL2d1bHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQU1BLGdGQUE2RTtBQUc3RSxVQUFrQixTQUFRLCtDQUFzQjtJQU8vQixVQUFVLENBQUMsTUFBZSxFQUFFLFVBQXVCLEVBQUUsa0JBQXNDLEVBQUUsZUFBZ0M7O1lBQ3RJLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ25GLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQ3pGLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLGtCQUFrQixDQUFDLENBQUM7WUFDN0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFFakIsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUM7S0FBQTtJQUVZLE9BQU8sQ0FBQyxNQUFlLEVBQUUsVUFBdUIsRUFBRSxrQkFBc0MsRUFBRSxlQUFnQzs7O1lBQ25JLE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLFdBQVcsS0FBSyxNQUFNLENBQUM7WUFFekQsZUFBZSxDQUFDLG1CQUFtQixDQUFDO2dCQUNJLE1BQU07Z0JBQ04sVUFBVTtnQkFDVixhQUFhO2dCQUNiLGFBQWE7Z0JBQ2IsY0FBYztnQkFDZCxVQUFVO2dCQUNWLGFBQWE7Z0JBQ2IsV0FBVztnQkFDWCxRQUFRO2FBQ1gsRUFDRCxNQUFNLENBQUMsQ0FBQztZQUU1QyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxhQUFhLEVB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QUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTVGLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzRyxDQUFDO0lBRU8sVUFBVSxDQUFDLFlBQW9CLEVBQUUsVUFBa0IsRUFBRSxVQUFrQixFQUFFLFFBQWdCLEVBQUUsSUFBYTtRQUM1RyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLENBQUM7Q0FDSjtBQWhORCxvQkFnTkMiLCJmaWxlIjoicGlwZWxpbmVTdGVwcy90YXNrTWFuYWdlci9ndWxwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQaXBlbGluZSBzdGVwIHRvIGdlbmVyYXRlIGNvbmZpZ3VyYXRpb24gZm9yIGd1bHAuXG4gKi9cbmltcG9ydCB7IElGaWxlU3lzdGVtIH0gZnJvbSBcInVuaXRlanMtZnJhbWV3b3JrL2Rpc3QvaW50ZXJmYWNlcy9JRmlsZVN5c3RlbVwiO1xuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gXCJ1bml0ZWpzLWZyYW1ld29yay9kaXN0L2ludGVyZmFjZXMvSUxvZ2dlclwiO1xuaW1wb3J0IHsgVW5pdGVDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbmZpZ3VyYXRpb24vbW9kZWxzL3VuaXRlL3VuaXRlQ29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgRW5naW5lUGlwZWxpbmVTdGVwQmFzZSB9IGZyb20gXCIuLi8uLi9lbmdpbmUvZW5naW5lUGlwZWxpbmVTdGVwQmFzZVwiO1xuaW1wb3J0IHsgRW5naW5lVmFyaWFibGVzIH0gZnJvbSBcIi4uLy4uL2VuZ2luZS9lbmdpbmVWYXJpYWJsZXNcIjtcblxuZXhwb3J0IGNsYXNzIEd1bHAgZXh0ZW5kcyBFbmdpbmVQaXBlbGluZVN0ZXBCYXNlIHtcbiAgICBwcml2YXRlIF9idWlsZEZvbGRlcjogc3RyaW5nO1xuICAgIHByaXZhdGUgX3Rhc2tzRm9sZGVyOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfdXRpbEZvbGRlcjogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBfZmlsZXM6IHsgc291cmNlRm9sZGVyOiBzdHJpbmc7IHNvdXJjZUZpbGU6IHN0cmluZzsgZGVzdEZvbGRlcjogc3RyaW5nOyBkZXN0RmlsZTogc3RyaW5nOyBrZWVwOiBib29sZWFuIH1bXTtcblxuICAgIHB1YmxpYyBhc3luYyBpbml0aWFsaXNlKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcyk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIHRoaXMuX2J1aWxkRm9sZGVyID0gZmlsZVN5c3RlbS5wYXRoQ29tYmluZShlbmdpbmVWYXJpYWJsZXMud3d3Um9vdEZvbGRlciwgXCJidWlsZFwiKTtcbiAgICAgICAgdGhpcy5fdGFza3NGb2xkZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy53d3dSb290Rm9sZGVyLCBcImJ1aWxkL3Rhc2tzXCIpO1xuICAgICAgICB0aGlzLl91dGlsRm9sZGVyID0gZmlsZVN5c3RlbS5wYXRoQ29tYmluZShlbmdpbmVWYXJpYWJsZXMud3d3Um9vdEZvbGRlciwgXCJidWlsZC90YXNrcy91dGlsXCIpO1xuICAgICAgICB0aGlzLl9maWxlcyA9IFtdO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBwcm9jZXNzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcyk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGNvbnN0IGlzR3VscCA9IHVuaXRlQ29uZmlndXJhdGlvbi50YXNrTWFuYWdlciA9PT0gXCJHdWxwXCI7XG5cbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJsdWViaXJkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcXVpcmUtZGlyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImd1bHAtcmVuYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImd1bHAtcmVwbGFjZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtaW5pbWlzdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLXVnbGlmeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1Z2xpZnktanNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWtkaXJwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNHdWxwKTtcblxuICAgICAgICBjb25zdCBhc3NldEd1bHAgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsIFwiZ3VscFwiKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0R3VscCwgXCJndWxwZmlsZS5qc1wiLCBlbmdpbmVWYXJpYWJsZXMud3d3Um9vdEZvbGRlciwgXCJndWxwZmlsZS5qc1wiLCBpc0d1bHApO1xuXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVCdWlsZFRhc2tzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIGlzR3VscCk7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVVbml0VGFza3MobG9nZ2VyLCBmaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlcywgaXNHdWxwKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUUyZVRhc2tzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIGlzR3VscCk7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVTZXJ2ZVRhc2tzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIGlzR3VscCk7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVUaGVtZVRhc2tzKGxvZ2dlciwgZmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXMsIGlzR3VscCk7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVVdGlscyhsb2dnZXIsIGZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzLCBpc0d1bHApO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZXQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9maWxlc1tpXS5rZWVwKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgc3VwZXIuY29weUZpbGUobG9nZ2VyLCBmaWxlU3lzdGVtLCB0aGlzLl9maWxlc1tpXS5zb3VyY2VGb2xkZXIsIHRoaXMuX2ZpbGVzW2ldLnNvdXJjZUZpbGUsIHRoaXMuX2ZpbGVzW2ldLmRlc3RGb2xkZXIsIHRoaXMuX2ZpbGVzW2ldLmRlc3RGaWxlLCBlbmdpbmVWYXJpYWJsZXMuZm9yY2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCBzdXBlci5kZWxldGVGaWxlKGxvZ2dlciwgZmlsZVN5c3RlbSwgdGhpcy5fZmlsZXNbaV0uZGVzdEZvbGRlciwgdGhpcy5fZmlsZXNbaV0uZGVzdEZpbGUsIGVuZ2luZVZhcmlhYmxlcy5mb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0d1bHApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJEZWxldGluZyBHdWxwIEJ1aWxkIERpcmVjdG9yeVwiLCB7IGd1bHBCdWlsZEZvbGRlcjogdGhpcy5fYnVpbGRGb2xkZXIgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdHMgPSBhd2FpdCBmaWxlU3lzdGVtLmRpcmVjdG9yeUV4aXN0cyhlbmdpbmVWYXJpYWJsZXMud3d3Um9vdEZvbGRlcik7XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmaWxlU3lzdGVtLmRpcmVjdG9yeURlbGV0ZSh0aGlzLl9idWlsZEZvbGRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRGVsZXRpbmcgR3VscCBCdWlsZCBEaXJlY3RvcnkgZmFpbGVkXCIsIGVyciwgeyBndWxwQnVpbGRGb2xkZXI6IHRoaXMuX2J1aWxkRm9sZGVyIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcHVibGljIGdlbmVyYXRlQnVpbGRUYXNrcyhsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIGlzR3VscDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZWxldGUtZW1wdHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicnVuLXNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImd1bHAtc291cmNlbWFwc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLWNvbmNhdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLWluc2VydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJndWxwLWh0bWxtaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaHRtbC1taW5pZmllclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlLWdsb2JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0d1bHApO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJndWxwLWJhYmVsXCJdLCBpc0d1bHAgJiYgdW5pdGVDb25maWd1cmF0aW9uLnNvdXJjZUxhbmd1YWdlID09PSBcIkphdmFTY3JpcHRcIik7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtdHlwZXNjcmlwdFwiXSwgaXNHdWxwICYmIHVuaXRlQ29uZmlndXJhdGlvbi5zb3VyY2VMYW5ndWFnZSA9PT0gXCJUeXBlU2NyaXB0XCIpO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJndWxwLWVzbGludFwiXSwgaXNHdWxwICYmIHVuaXRlQ29uZmlndXJhdGlvbi5saW50ZXIgPT09IFwiRVNMaW50XCIpO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJndWxwLXRzbGludFwiXSwgaXNHdWxwICYmIHVuaXRlQ29uZmlndXJhdGlvbi5saW50ZXIgPT09IFwiVFNMaW50XCIpO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJ3ZWJwYWNrLXN0cmVhbVwiXSwgaXNHdWxwICYmIHVuaXRlQ29uZmlndXJhdGlvbi5idW5kbGVyID09PSBcIldlYnBhY2tcIik7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcInZpbnlsLXNvdXJjZS1zdHJlYW1cIiwgXCJ2aW55bC1idWZmZXJcIl0sIGlzR3VscCAmJiB1bml0ZUNvbmZpZ3VyYXRpb24uYnVuZGxlciA9PT0gXCJCcm93c2VyaWZ5XCIpO1xuICAgICAgICBlbmdpbmVWYXJpYWJsZXMudG9nZ2xlRGV2RGVwZW5kZW5jeShbXCJndWxwLWxlc3NcIl0sIGlzR3VscCAmJiB1bml0ZUNvbmZpZ3VyYXRpb24uY3NzUHJlID09PSBcIkxlc3NcIik7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtc2Fzc1wiXSwgaXNHdWxwICYmIHVuaXRlQ29uZmlndXJhdGlvbi5jc3NQcmUgPT09IFwiU2Fzc1wiKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC1zdHlsdXNcIl0sIGlzR3VscCAmJiB1bml0ZUNvbmZpZ3VyYXRpb24uY3NzUHJlID09PSBcIlN0eWx1c1wiKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC1wb3N0Y3NzXCJdLCBpc0d1bHAgJiYgdW5pdGVDb25maWd1cmF0aW9uLmNzc1Bvc3QgPT09IFwiUG9zdENzc1wiKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC1jc3NuYW5vXCJdLCBpc0d1bHAgJiYgdW5pdGVDb25maWd1cmF0aW9uLmNzc1Bvc3QgPT09IFwiTm9uZVwiKTtcblxuICAgICAgICBsb2dnZXIuaW5mbyhcIkdlbmVyYXRpbmcgZ3VscCB0YXNrcyBmb3IgYnVpbGQgaW5cIiwgeyBndWxwVGFza3NGb2xkZXI6IHRoaXMuX3Rhc2tzRm9sZGVyIH0pO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3MgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsIFwiZ3VscC90YXNrcy9cIik7XG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NMYW5ndWFnZSA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlciwgYGd1bHAvdGFza3Mvc291cmNlTGFuZ3VhZ2UvJHt1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlTGFuZ3VhZ2UudG9Mb3dlckNhc2UoKX0vYCk7XG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NCdW5kbGVyID0gZmlsZVN5c3RlbS5wYXRoQ29tYmluZShlbmdpbmVWYXJpYWJsZXMuZW5naW5lQXNzZXRzRm9sZGVyLCBgZ3VscC90YXNrcy9idW5kbGVyLyR7dW5pdGVDb25maWd1cmF0aW9uLmJ1bmRsZXIudG9Mb3dlckNhc2UoKX0vYCk7XG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NMaW50ZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsIGBndWxwL3Rhc2tzL2xpbnRlci8ke3VuaXRlQ29uZmlndXJhdGlvbi5saW50ZXIudG9Mb3dlckNhc2UoKX0vYCk7XG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NDc3NQcmUgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsIGBndWxwL3Rhc2tzL2Nzc1ByZS8ke3VuaXRlQ29uZmlndXJhdGlvbi5jc3NQcmUudG9Mb3dlckNhc2UoKX0vYCk7XG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NDc3NQb3N0ID0gZmlsZVN5c3RlbS5wYXRoQ29tYmluZShlbmdpbmVWYXJpYWJsZXMuZW5naW5lQXNzZXRzRm9sZGVyLCBgZ3VscC90YXNrcy9jc3NQb3N0LyR7dW5pdGVDb25maWd1cmF0aW9uLmNzc1Bvc3QudG9Mb3dlckNhc2UoKX0vYCk7XG5cbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VGFza3NMYW5ndWFnZSwgXCJidWlsZC10cmFuc3BpbGUuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiYnVpbGQtdHJhbnNwaWxlLmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQnVuZGxlciwgXCJidWlsZC1idW5kbGUtYXBwLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImJ1aWxkLWJ1bmRsZS1hcHAuanNcIiwgaXNHdWxwKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VGFza3NCdW5kbGVyLCBcImJ1aWxkLWJ1bmRsZS12ZW5kb3IuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiYnVpbGQtYnVuZGxlLXZlbmRvci5qc1wiLCBpc0d1bHApO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrc0xpbnRlciwgXCJidWlsZC1saW50LmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImJ1aWxkLWxpbnQuanNcIiwgaXNHdWxwKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VGFza3NDc3NQcmUsIFwiYnVpbGQtY3NzLWFwcC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJidWlsZC1jc3MtYXBwLmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQ3NzUHJlLCBcImJ1aWxkLWNzcy1jb21wb25lbnRzLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImJ1aWxkLWNzcy1jb21wb25lbnRzLmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQ3NzUG9zdCwgXCJidWlsZC1jc3MtcG9zdC1hcHAuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiYnVpbGQtY3NzLXBvc3QtYXBwLmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzQ3NzUG9zdCwgXCJidWlsZC1jc3MtcG9zdC1jb21wb25lbnRzLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImJ1aWxkLWNzcy1wb3N0LWNvbXBvbmVudHMuanNcIiwgaXNHdWxwKTtcblxuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrcywgXCJidWlsZC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJidWlsZC5qc1wiLCBpc0d1bHApO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrcywgXCJ2ZXJzaW9uLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInZlcnNpb24uanNcIiwgaXNHdWxwKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlVW5pdFRhc2tzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgaXNHdWxwOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAta2FybWEtcnVubmVyXCJdLCBpc0d1bHAgJiYgdW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0UnVubmVyID09PSBcIkthcm1hXCIpO1xuXG4gICAgICAgIGNvbnN0IGhhc1VuaXQgPSB1bml0ZUNvbmZpZ3VyYXRpb24udW5pdFRlc3RSdW5uZXIgIT09IFwiTm9uZVwiO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIkdlbmVyYXRpbmcgZ3VscCB0YXNrcyBmb3IgdW5pdCBpblwiLCB7IGd1bHBUYXNrc0ZvbGRlcjogdGhpcy5fdGFza3NGb2xkZXIgfSk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRVbml0VGVzdCA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlciwgXCJndWxwL3Rhc2tzL1wiKTtcblxuICAgICAgICBjb25zdCBhc3NldFVuaXRUZXN0TGFuZ3VhZ2UgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGd1bHAvdGFza3Mvc291cmNlTGFuZ3VhZ2UvJHt1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlTGFuZ3VhZ2UudG9Mb3dlckNhc2UoKX0vYCk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRMaW50ZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZ3VscC90YXNrcy9saW50ZXIvJHt1bml0ZUNvbmZpZ3VyYXRpb24ubGludGVyLnRvTG93ZXJDYXNlKCl9L2ApO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0VW5pdFRlc3RSdW5uZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBndWxwL3Rhc2tzL3VuaXRUZXN0UnVubmVyLyR7dW5pdGVDb25maWd1cmF0aW9uLnVuaXRUZXN0UnVubmVyLnRvTG93ZXJDYXNlKCl9L2ApO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFVuaXRUZXN0LCBcInVuaXQuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwidW5pdC5qc1wiLCBpc0d1bHAgJiYgaGFzVW5pdCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFVuaXRUZXN0TGFuZ3VhZ2UsIFwidW5pdC10cmFuc3BpbGUuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwidW5pdC10cmFuc3BpbGUuanNcIiwgaXNHdWxwICYmIGhhc1VuaXQpO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRMaW50ZXIsIFwidW5pdC1saW50LmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInVuaXQtbGludC5qc1wiLCBpc0d1bHAgJiYgaGFzVW5pdCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFVuaXRUZXN0UnVubmVyLCBcInVuaXQtcnVubmVyLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInVuaXQtcnVubmVyLmpzXCIsIGlzR3VscCAmJiBoYXNVbml0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlRTJlVGFza3MobG9nZ2VyOiBJTG9nZ2VyLCBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzLCBpc0d1bHA6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiZ3VscC13ZWJkcml2ZXJcIiwgXCJicm93c2VyLXN5bmNcIl0sIGlzR3VscCAmJiB1bml0ZUNvbmZpZ3VyYXRpb24uZTJlVGVzdFJ1bm5lciA9PT0gXCJXZWJkcml2ZXJJT1wiKTtcbiAgICAgICAgZW5naW5lVmFyaWFibGVzLnRvZ2dsZURldkRlcGVuZGVuY3koW1wiYnJvd3Nlci1zeW5jXCJdLCBpc0d1bHAgJiYgdW5pdGVDb25maWd1cmF0aW9uLmUyZVRlc3RSdW5uZXIgPT09IFwiUHJvdHJhY3RvclwiKTtcblxuICAgICAgICBjb25zdCBoYXNFMmUgPSB1bml0ZUNvbmZpZ3VyYXRpb24uZTJlVGVzdFJ1bm5lciAhPT0gXCJOb25lXCI7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiR2VuZXJhdGluZyBndWxwIHRhc2tzIGZvciBlMmUgaW5cIiwgeyBndWxwVGFza3NGb2xkZXI6IHRoaXMuX3Rhc2tzRm9sZGVyIH0pO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0RTJlVGVzdCA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlciwgXCJndWxwL3Rhc2tzL1wiKTtcblxuICAgICAgICBjb25zdCBhc3NldFVuaXRUZXN0TGFuZ3VhZ2UgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGd1bHAvdGFza3Mvc291cmNlTGFuZ3VhZ2UvJHt1bml0ZUNvbmZpZ3VyYXRpb24uc291cmNlTGFuZ3VhZ2UudG9Mb3dlckNhc2UoKX0vYCk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRMaW50ZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKGVuZ2luZVZhcmlhYmxlcy5lbmdpbmVBc3NldHNGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZ3VscC90YXNrcy9saW50ZXIvJHt1bml0ZUNvbmZpZ3VyYXRpb24ubGludGVyLnRvTG93ZXJDYXNlKCl9L2ApO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0RTJlVGVzdFJ1bm5lciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZ3VscC90YXNrcy9lMmVUZXN0UnVubmVyLyR7dW5pdGVDb25maWd1cmF0aW9uLmUyZVRlc3RSdW5uZXIudG9Mb3dlckNhc2UoKX0vYCk7XG5cbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0RTJlVGVzdCwgXCJlMmUuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiZTJlLmpzXCIsIGlzR3VscCAmJiBoYXNFMmUpO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRVbml0VGVzdExhbmd1YWdlLCBcImUyZS10cmFuc3BpbGUuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiZTJlLXRyYW5zcGlsZS5qc1wiLCBpc0d1bHAgJiYgaGFzRTJlKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0TGludGVyLCBcImUyZS1saW50LmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcImUyZS1saW50LmpzXCIsIGlzR3VscCAmJiBoYXNFMmUpO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRFMmVUZXN0UnVubmVyLCBcImUyZS1ydW5uZXIuanNcIiwgdGhpcy5fdGFza3NGb2xkZXIsIFwiZTJlLXJ1bm5lci5qc1wiLCBpc0d1bHAgJiYgaGFzRTJlKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0RTJlVGVzdFJ1bm5lciwgXCJlMmUtaW5zdGFsbC5qc1wiLCB0aGlzLl90YXNrc0ZvbGRlciwgXCJlMmUtaW5zdGFsbC5qc1wiLCBpc0d1bHAgJiYgaGFzRTJlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlU2VydmVUYXNrcyhsb2dnZXI6IElMb2dnZXIsIGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCB1bml0ZUNvbmZpZ3VyYXRpb246IFVuaXRlQ29uZmlndXJhdGlvbiwgZW5naW5lVmFyaWFibGVzOiBFbmdpbmVWYXJpYWJsZXMsIGlzR3VscDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBsb2dnZXIuaW5mbyhcIkdlbmVyYXRpbmcgZ3VscCB0YXNrcyBzZXJ2ZSBpblwiLCB7IGd1bHBUYXNrc0ZvbGRlcjogdGhpcy5fdGFza3NGb2xkZXIgfSk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRUYXNrc1NlcnZlciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlciwgYGd1bHAvdGFza3Mvc2VydmVyLyR7dW5pdGVDb25maWd1cmF0aW9uLnNlcnZlci50b0xvd2VyQ2FzZSgpfWApO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFRhc2tzU2VydmVyLCBcInNlcnZlLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInNlcnZlLmpzXCIsIGlzR3VscCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVRoZW1lVGFza3MobG9nZ2VyOiBJTG9nZ2VyLCBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSwgdW5pdGVDb25maWd1cmF0aW9uOiBVbml0ZUNvbmZpZ3VyYXRpb24sIGVuZ2luZVZhcmlhYmxlczogRW5naW5lVmFyaWFibGVzLCBpc0d1bHA6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJHZW5lcmF0aW5nIGd1bHAgdGFza3MgdGhlbWUgaW5cIiwgeyBndWxwVGFza3NGb2xkZXI6IHRoaXMuX3Rhc2tzRm9sZGVyIH0pO1xuXG4gICAgICAgIGNvbnN0IGFzc2V0VGFza3NUaGVtZSA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlciwgXCJndWxwL3Rhc2tzL1wiKTtcblxuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRUYXNrc1RoZW1lLCBcInRoZW1lLmpzXCIsIHRoaXMuX3Rhc2tzRm9sZGVyLCBcInRoZW1lLmpzXCIsIGlzR3VscCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVV0aWxzKGxvZ2dlcjogSUxvZ2dlciwgZmlsZVN5c3RlbTogSUZpbGVTeXN0ZW0sIHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBlbmdpbmVWYXJpYWJsZXM6IEVuZ2luZVZhcmlhYmxlcywgaXNHdWxwOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGVuZ2luZVZhcmlhYmxlcy50b2dnbGVEZXZEZXBlbmRlbmN5KFtcImd1bHAtdXRpbFwiLCBcImd1bHAtcmVuYW1lXCJdLCBpc0d1bHApO1xuXG4gICAgICAgIGxvZ2dlci5pbmZvKFwiR2VuZXJhdGluZyBndWxwIHRhc2tzIHV0aWxzIGluXCIsIHsgZ3VscFV0aWxGb2xkZXI6IHRoaXMuX3V0aWxGb2xkZXIgfSk7XG5cbiAgICAgICAgY29uc3QgYXNzZXRVdGlscyA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUoZW5naW5lVmFyaWFibGVzLmVuZ2luZUFzc2V0c0ZvbGRlciwgXCJndWxwL3Rhc2tzL3V0aWwvXCIpO1xuICAgICAgICBjb25zdCBhc3NldFV0aWxNb2R1bGVUeXBlID0gZmlsZVN5c3RlbS5wYXRoQ29tYmluZShlbmdpbmVWYXJpYWJsZXMuZW5naW5lQXNzZXRzRm9sZGVyLCBgZ3VscC90YXNrcy9tb2R1bGVUeXBlLyR7dW5pdGVDb25maWd1cmF0aW9uLm1vZHVsZVR5cGUudG9Mb3dlckNhc2UoKX0vdXRpbC9gKTtcblxuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRVdGlscywgXCJhc3luYy11dGlsLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwiYXN5bmMtdXRpbC5qc1wiLCBpc0d1bHApO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRVdGlscywgXCJidW5kbGUuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJidW5kbGUuanNcIiwgaXNHdWxwKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwiY2xpZW50LXBhY2thZ2VzLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwiY2xpZW50LXBhY2thZ2VzLmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxzLCBcImRpc3BsYXkuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJkaXNwbGF5LmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxzLCBcImV4ZWMuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJleGVjLmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxzLCBcInBhY2thZ2UtY29uZmlnLmpzXCIsIHRoaXMuX3V0aWxGb2xkZXIsIFwicGFja2FnZS1jb25maWcuanNcIiwgaXNHdWxwKTtcbiAgICAgICAgdGhpcy50b2dnbGVGaWxlKGFzc2V0VXRpbHMsIFwicGxhdGZvcm0tdXRpbHMuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJwbGF0Zm9ybS11dGlscy5qc1wiLCBpc0d1bHApO1xuICAgICAgICB0aGlzLnRvZ2dsZUZpbGUoYXNzZXRVdGlscywgXCJ0aGVtZS11dGlscy5qc1wiLCB0aGlzLl91dGlsRm9sZGVyLCBcInRoZW1lLXV0aWxzLmpzXCIsIGlzR3VscCk7XG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxzLCBcInVuaXRlLWNvbmZpZy5qc1wiLCB0aGlzLl91dGlsRm9sZGVyLCBcInVuaXRlLWNvbmZpZy5qc1wiLCBpc0d1bHApO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlRmlsZShhc3NldFV0aWxNb2R1bGVUeXBlLCBcIm1vZHVsZS1jb25maWcuanNcIiwgdGhpcy5fdXRpbEZvbGRlciwgXCJtb2R1bGUtY29uZmlnLmpzXCIsIGlzR3VscCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b2dnbGVGaWxlKHNvdXJjZUZvbGRlcjogc3RyaW5nLCBzb3VyY2VGaWxlOiBzdHJpbmcsIGRlc3RGb2xkZXI6IHN0cmluZywgZGVzdEZpbGU6IHN0cmluZywga2VlcDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLl9maWxlcy5wdXNoKHsgc291cmNlRm9sZGVyLCBzb3VyY2VGaWxlLCBkZXN0Rm9sZGVyLCBkZXN0RmlsZSwga2VlcCB9KTtcbiAgICB9XG59XG4iXX0=
