"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enginePipelineStepBase_1 = require("../../engine/enginePipelineStepBase");
class Gulp extends enginePipelineStepBase_1.EnginePipelineStepBase {
    prerequisites(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            this._buildFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build");
            this._tasksFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build/tasks");
            this._utilFolder = fileSystem.pathCombine(engineVariables.wwwRootFolder, "build/tasks/util");
            return 0;
        });
    }
    process(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["gulp",
                "bluebird",
                "require-dir",
                "gulp-rename",
                "gulp-replace",
                "minimist",
                "gulp-uglify",
                "uglify-js",
                "mkdirp"], uniteConfiguration.taskManager === "Gulp");
            if (uniteConfiguration.taskManager === "Gulp") {
                try {
                    const hasGeneratedMarker = yield _super("fileHasGeneratedMarker").call(this, fileSystem, engineVariables.wwwRootFolder, Gulp.FILENAME);
                    if (hasGeneratedMarker) {
                        logger.info(`Generating ${Gulp.FILENAME} in`, { wwwFolder: engineVariables.wwwRootFolder });
                        const lines = [];
                        lines.push("require('require-dir')('build/tasks');");
                        lines.push(_super("wrapGeneratedMarker").call(this, "/* ", " */"));
                        yield fileSystem.fileWriteLines(engineVariables.wwwRootFolder, Gulp.FILENAME, lines);
                    }
                    else {
                        logger.info(`Skipping ${Gulp.FILENAME} at it has no generated marker`);
                    }
                }
                catch (err) {
                    logger.error(`Generating ${Gulp.FILENAME} failed`, err, { wwwFolder: engineVariables.wwwRootFolder });
                    return 1;
                }
                try {
                    logger.info("Creating Gulp Build Directory", { gulpBuildFolder: this._buildFolder });
                    yield fileSystem.directoryCreate(this._buildFolder);
                }
                catch (err) {
                    logger.error("Creating Gulp Build Directory failed", err, { gulpBuildFolder: this._buildFolder });
                    return 1;
                }
                try {
                    logger.info("Creating Gulp Tasks Directory", { gulpTasksFolder: this._tasksFolder });
                    yield fileSystem.directoryCreate(this._tasksFolder);
                }
                catch (err) {
                    logger.error("Creating Gulp Tasks Directory failed", err, { gulpTasksFolder: this._tasksFolder });
                    return 1;
                }
                try {
                    logger.info("Creating Gulp Util Directory", { gulpUtilFolder: this._utilFolder });
                    yield fileSystem.directoryCreate(this._utilFolder);
                }
                catch (err) {
                    logger.error("Creating Gulp Util Directory failed", err, { gulpUtilFolder: this._utilFolder });
                    return 1;
                }
            }
            else {
                try {
                    logger.info("Deleting Gulp Build Directory", { gulpBuildFolder: this._buildFolder });
                    const exists = yield fileSystem.directoryExists(engineVariables.wwwRootFolder);
                    if (exists) {
                        yield fileSystem.directoryDelete(this._buildFolder);
                    }
                }
                catch (err) {
                    logger.error("Deleting Gulp Build Directory failed", err, { gulpBuildFolder: this._buildFolder });
                    return 1;
                }
                const ret2 = yield _super("deleteFile").call(this, logger, fileSystem, engineVariables.wwwRootFolder, Gulp.FILENAME);
                if (ret2 !== 0) {
                    return ret2;
                }
            }
            let ret = yield this.generateBuildTasks(logger, fileSystem, uniteConfiguration, engineVariables);
            if (ret === 0) {
                ret = yield this.generateUnitTasks(logger, fileSystem, uniteConfiguration, engineVariables);
                if (ret === 0) {
                    ret = yield this.generateE2eTasks(logger, fileSystem, uniteConfiguration, engineVariables);
                    if (ret === 0) {
                        ret = yield this.generateServeTasks(logger, fileSystem, uniteConfiguration, engineVariables);
                        if (ret === 0) {
                            ret = yield this.generateThemeTasks(logger, fileSystem, uniteConfiguration, engineVariables);
                            if (ret === 0) {
                                ret = yield this.generateUtils(logger, fileSystem, uniteConfiguration, engineVariables);
                            }
                        }
                    }
                }
            }
            return ret;
        });
    }
    generateBuildTasks(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["del", "delete-empty", "run-sequence", "gulp-sourcemaps", "gulp-concat", "gulp-insert", "gulp-htmlmin", "html-minifier", "node-glob"], uniteConfiguration.taskManager === "Gulp");
            engineVariables.toggleDevDependency(["gulp-babel"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.sourceLanguage === "JavaScript");
            engineVariables.toggleDevDependency(["gulp-typescript"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.sourceLanguage === "TypeScript");
            engineVariables.toggleDevDependency(["gulp-eslint"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.linter === "ESLint");
            engineVariables.toggleDevDependency(["gulp-tslint"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.linter === "TSLint");
            engineVariables.toggleDevDependency(["webpack-stream"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.bundler === "Webpack");
            engineVariables.toggleDevDependency(["vinyl-source-stream", "vinyl-buffer"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.bundler === "Browserify");
            engineVariables.toggleDevDependency(["gulp-less"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.cssPre === "Less");
            engineVariables.toggleDevDependency(["gulp-sass"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.cssPre === "Sass");
            engineVariables.toggleDevDependency(["gulp-stylus"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.cssPre === "Stylus");
            engineVariables.toggleDevDependency(["gulp-postcss"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.cssPost === "PostCss");
            if (uniteConfiguration.taskManager === "Gulp") {
                try {
                    logger.info("Generating gulp tasks for build in", { gulpTasksFolder: this._tasksFolder });
                    const assetTasks = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
                    const assetTasksLanguage = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
                    const assetTasksBundler = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/bundler/${uniteConfiguration.bundler.toLowerCase()}/`);
                    const assetTasksLinter = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/linter/${uniteConfiguration.linter.toLowerCase()}/`);
                    const assetTasksCssPre = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/cssPre/${uniteConfiguration.cssPre.toLowerCase()}/`);
                    const assetTasksCssPost = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/cssPost/${uniteConfiguration.cssPost.toLowerCase()}/`);
                    yield this.copyFile(logger, fileSystem, assetTasksLanguage, "build-transpile.js", this._tasksFolder, "build-transpile.js");
                    yield this.copyFile(logger, fileSystem, assetTasksBundler, "build-bundle-app.js", this._tasksFolder, "build-bundle-app.js");
                    yield this.copyFile(logger, fileSystem, assetTasksBundler, "build-bundle-vendor.js", this._tasksFolder, "build-bundle-vendor.js");
                    yield this.copyFile(logger, fileSystem, assetTasksLinter, "build-lint.js", this._tasksFolder, "build-lint.js");
                    yield this.copyFile(logger, fileSystem, assetTasksCssPre, "build-css-app.js", this._tasksFolder, "build-css-app.js");
                    yield this.copyFile(logger, fileSystem, assetTasksCssPre, "build-css-components.js", this._tasksFolder, "build-css-components.js");
                    yield this.copyFile(logger, fileSystem, assetTasksCssPost, "build-css-post-app.js", this._tasksFolder, "build-css-post-app.js");
                    yield this.copyFile(logger, fileSystem, assetTasksCssPost, "build-css-post-components.js", this._tasksFolder, "build-css-post-components.js");
                    yield this.copyFile(logger, fileSystem, assetTasks, "build.js", this._tasksFolder, "build.js");
                    yield this.copyFile(logger, fileSystem, assetTasks, "version.js", this._tasksFolder, "version.js");
                    return 0;
                }
                catch (err) {
                    logger.error("Generating gulp tasks for build failed", err, { gulpTasksFolder: this._tasksFolder });
                    return 1;
                }
            }
            return 0;
        });
    }
    generateUnitTasks(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["gulp-karma-runner"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.unitTestRunner === "Karma");
            if (uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.unitTestRunner !== "None") {
                try {
                    logger.info("Generating gulp tasks for unit in", { gulpTasksFolder: this._tasksFolder });
                    const assetUnitTest = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
                    const assetUnitTestLanguage = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
                    const assetLinter = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/linter/${uniteConfiguration.linter.toLowerCase()}/`);
                    const assetUnitTestRunner = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/unitTestRunner/${uniteConfiguration.unitTestRunner.toLowerCase()}/`);
                    yield this.copyFile(logger, fileSystem, assetUnitTest, "unit.js", this._tasksFolder, "unit.js");
                    yield this.copyFile(logger, fileSystem, assetUnitTestLanguage, "unit-transpile.js", this._tasksFolder, "unit-transpile.js");
                    yield this.copyFile(logger, fileSystem, assetLinter, "unit-lint.js", this._tasksFolder, "unit-lint.js");
                    yield this.copyFile(logger, fileSystem, assetUnitTestRunner, "unit-runner.js", this._tasksFolder, "unit-runner.js");
                    return 0;
                }
                catch (err) {
                    logger.error("Generating gulp tasks for unit failed", err, { gulpTasksFolder: this._tasksFolder });
                    return 1;
                }
            }
            return 0;
        });
    }
    generateE2eTasks(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["gulp-webdriver", "browser-sync"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.e2eTestRunner === "WebdriverIO");
            engineVariables.toggleDevDependency(["browser-sync"], uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.e2eTestRunner === "Protractor");
            if (uniteConfiguration.taskManager === "Gulp" && uniteConfiguration.e2eTestRunner !== "None") {
                try {
                    logger.info("Generating gulp tasks for e2e in", { gulpTasksFolder: this._tasksFolder });
                    const assetE2eTest = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
                    const assetUnitTestLanguage = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/`);
                    const assetLinter = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/linter/${uniteConfiguration.linter.toLowerCase()}/`);
                    const assetE2eTestRunner = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/e2eTestRunner/${uniteConfiguration.e2eTestRunner.toLowerCase()}/`);
                    yield this.copyFile(logger, fileSystem, assetE2eTest, "e2e.js", this._tasksFolder, "e2e.js");
                    yield this.copyFile(logger, fileSystem, assetUnitTestLanguage, "e2e-transpile.js", this._tasksFolder, "e2e-transpile.js");
                    yield this.copyFile(logger, fileSystem, assetLinter, "e2e-lint.js", this._tasksFolder, "e2e-lint.js");
                    yield this.copyFile(logger, fileSystem, assetE2eTestRunner, "e2e-runner.js", this._tasksFolder, "e2e-runner.js");
                    yield this.copyFile(logger, fileSystem, assetE2eTestRunner, "e2e-install.js", this._tasksFolder, "e2e-install.js");
                    return 0;
                }
                catch (err) {
                    logger.error("Generating gulp tasks for e2e failed", err, { gulpTasksFolder: this._tasksFolder });
                    return 1;
                }
            }
            return 0;
        });
    }
    generateServeTasks(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            if (uniteConfiguration.taskManager === "Gulp") {
                try {
                    logger.info("Generating gulp tasks serve in", { gulpTasksFolder: this._tasksFolder });
                    const assetTasksServer = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/server/${uniteConfiguration.server.toLowerCase()}`);
                    yield this.copyFile(logger, fileSystem, assetTasksServer, "serve.js", this._tasksFolder, "serve.js");
                    return 0;
                }
                catch (err) {
                    logger.error("Generating gulp tasks serve failed", err, { gulpTasksFolder: this._tasksFolder });
                    return 1;
                }
            }
            return 0;
        });
    }
    generateThemeTasks(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            if (uniteConfiguration.taskManager === "Gulp") {
                try {
                    logger.info("Generating gulp tasks theme in", { gulpTasksFolder: this._tasksFolder });
                    const assetTasksTheme = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/");
                    yield this.copyFile(logger, fileSystem, assetTasksTheme, "theme.js", this._tasksFolder, "theme.js");
                    return 0;
                }
                catch (err) {
                    logger.error("Generating gulp tasks serve failed", err, { gulpTasksFolder: this._tasksFolder });
                    return 1;
                }
            }
            return 0;
        });
    }
    generateUtils(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["gulp-util", "gulp-rename"], uniteConfiguration.taskManager === "Gulp");
            if (uniteConfiguration.taskManager === "Gulp") {
                try {
                    logger.info("Generating gulp tasks utils in", { gulpUtilFolder: this._utilFolder });
                    const assetUtils = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/tasks/util/");
                    const assetUtilModuleType = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `gulp/tasks/moduleType/${uniteConfiguration.moduleType.toLowerCase()}/util/`);
                    yield this.copyFile(logger, fileSystem, assetUtils, "async-util.js", this._utilFolder, "async-util.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "bundle.js", this._utilFolder, "bundle.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "client-packages.js", this._utilFolder, "client-packages.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "display.js", this._utilFolder, "display.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "exec.js", this._utilFolder, "exec.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "package-config.js", this._utilFolder, "package-config.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "platform-utils.js", this._utilFolder, "platform-utils.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "theme-utils.js", this._utilFolder, "theme-utils.js");
                    yield this.copyFile(logger, fileSystem, assetUtils, "unite-config.js", this._utilFolder, "unite-config.js");
                    yield this.copyFile(logger, fileSystem, assetUtilModuleType, "module-config.js", this._utilFolder, "module-config.js");
                    return 0;
                }
                catch (err) {
                    logger.error("Generating gulp tasks utils failed", err, { gulpUtilFolder: this._utilFolder });
                    return 1;
                }
            }
            return 0;
        });
    }
}
Gulp.FILENAME = "gulpfile.js";
exports.Gulp = Gulp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
