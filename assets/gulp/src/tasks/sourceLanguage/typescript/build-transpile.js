/**
 * Gulp tasks for building TypeScript.
 */
import * as display from "./util/display";
import * as uc from "./util/unite-config";
import * as asyncUtil from "./util/async-util";
import * as gulp from "gulp";
import * as typescript from "gulp-typescript";
import * as sourcemaps from "gulp-sourcemaps";
import * as path from "path";
import * as uglify from "gulp-uglify";
import * as gutil from "gulp-util";
import * as errorUtil from "./util/error-util";
{TRANSPILEINCLUDE}

gulp.task("build-transpile", async () => {
    display.info("Running", "TypeScript");

    const uniteConfig = await uc.getUniteConfig();

    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, true);

    const tsProject = typescript.createProject("tsconfig.json");
    let errorCount = 0;

    return asyncUtil.stream(gulp.src(path.join(
        uniteConfig.dirs.www.src,
        `**/*.${uc.extensionMap(uniteConfig.sourceExtensions)}`
    ))
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.init() : gutil.noop())
{TRANSPILEPREBUILD}
        .pipe(tsProject(typescript.reporter.nullReporter()))
        .on("error", (err) => {
            display.error(err.message);
            errorCount++;
        })
        .on("error", errorUtil.handleErrorEvent)
        .js
{TRANSPILEPOSTBUILD}
        .pipe(buildConfiguration.minify ? uglify()
            .on("error", (err) => {
                display.error(err.toString());
            }) : gutil.noop())
        .pipe(buildConfiguration.sourcemaps
            ? sourcemaps.mapSources((sourcePath) => `./src/${sourcePath}`) : gutil.noop())
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.write({
            "includeContent": true,
            "sourceRoot": ""
        }) : gutil.noop())
        .pipe(gulp.dest(uniteConfig.dirs.www.dist))
        .on("end", () => {
            errorUtil.handleErrorCount(errorCount);
        }));
});

// Generated by UniteJS
