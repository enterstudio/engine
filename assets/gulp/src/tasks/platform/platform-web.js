/**
 * Gulp tasks for web platform.
 */
import * as display from "./util/display";
import * as uc from "./util/unite-config";
import * as gulp from "gulp";
import * as runSequence from "run-sequence";
import * as util from "util";
import * as path from "path";
import * as del from "del";
import * as asyncUtil from "./util/async-util";
import * as packageConfig from "./util/package-config";
import * as platformUtils from "./util/platform-utils";

gulp.task("platform-web-package", async () => {
    try {
        await util.promisify(runSequence)(
            "platform-web-clean",
            "platform-web-gather",
            "platform-web-compress"
        );
    } catch (err) {
        display.error("Unhandled error during task", err);
        process.exit(1);
    }
});

gulp.task("platform-web-clean", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const packageJson = await packageConfig.getPackageJson();

    const toClean = [
        path.join("../", uniteConfig.dirs.packagedRoot, `/${packageJson.version}/web/**/*`),
        path.join("../", uniteConfig.dirs.packagedRoot, `/${packageJson.version}_web.zip`)
    ];
    display.info("Cleaning", toClean);
    return del(toClean, {"force": true});
});

gulp.task("platform-web-gather", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig);
    const packageJson = await packageConfig.getPackageJson();

    const platformName = "Web";
    const gatherRoot = path.join(
        "../",
        uniteConfig.dirs.packagedRoot,
        `/${packageJson.version}/${platformName.toLowerCase()}/`
    );

    await platformUtils.gatherFiles(
        uniteConfig,
        buildConfiguration,
        packageJson,
        platformName,
        gatherRoot
    );
});

gulp.task("platform-web-compress", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const packageJson = await packageConfig.getPackageJson();

    display.info("Compressing Files", "Web");
    const zipName = `${packageJson.version}_web.zip`;
    display.info("To File", zipName);

    return asyncUtil.zipFolder(
        path.join(
            "../",
            uniteConfig.dirs.packagedRoot,
            `/${packageJson.version}/web/`
        ),
        path.join("../", uniteConfig.dirs.packagedRoot, zipName)
    );
});

// Generated by UniteJS
