/**
 * Gulp tasks for wrapping Webpack modules.
 */
import * as display from "./util/display";
import * as gulp from "gulp";
import * as path from "path";
import * as webpack from "webpack";
import * as webpackStream from "webpack-stream";
import * as uc from "./util/unite-config";
import * as asyncUtil from "./util/async-util";
import * as UglifyJSPlugin from "uglifyjs-webpack-plugin";
import * as clientPackages from "./util/client-packages";

gulp.task("build-bundle-app", async () => {
    const uniteConfig = await uc.getUniteConfig();

    const buildConfiguration = uc.getBuildConfiguration(uniteConfig);

    if (buildConfiguration.bundle) {
        display.info("Running", "Webpack for App");

        const entry = {};
        const plugins = [];

        const vendorPackages = await clientPackages.getBundleVendorPackages(uniteConfig);

        const vendorKeys = [];
        const vendorAliases = {};
        let hasStyleLoader = false;
        Object.keys(vendorPackages).forEach((key) => {
            const idx = key.indexOf("systemjs");
            if (idx < 0) {
                display.info("Adding", `${vendorPackages[key].file}`);
                vendorKeys.push(key);
                vendorAliases[key] = path.resolve(`${vendorPackages[key].file}`);
            } else {
                hasStyleLoader = key === "systemjs-plugin-css";
            }
        });

        if (vendorKeys.length > 0) {
            entry.vendor = vendorKeys;
        }

        plugins.push(new webpack.optimize.CommonsChunkPlugin({
            "filename": "vendor-bundle.js",
            "name": "vendor"
        }));

        if (buildConfiguration.minify) {
            plugins.push(new UglifyJSPlugin());
        }

        plugins.push(new webpack.DefinePlugin({
            "process.env": {
                "NODE_ENV": JSON.stringify(buildConfiguration.minify ? "production" : "development")
            }
        }));

        entry.app = `./${path.join(uniteConfig.dirs.www.dist, "entryPoint.js")}`;

        const webpackOptions = {
            entry,
            "output": {
                "devtoolModuleFilenameTemplate": "[resource-path]",
                "filename": "app-bundle.js"
            },
            plugins,
            "module": {
                "rules": []
            },
            "resolve": {
                "alias": vendorAliases
            }
        };

        webpackOptions.module.rules.push({
            "test": new RegExp(".css$"),
            "use": hasStyleLoader ? ["style-loader", "css-loader"] : ["raw-loader"]
        });

        uniteConfig.viewExtensions.forEach((ext) => {
            webpackOptions.module.rules.push({
                "test": new RegExp(`.${ext}$`),
                "use": ["raw-loader"]
            });
        });

        if (buildConfiguration.sourcemaps) {
            webpackOptions.devtool = "inline-source-map";
            webpackOptions.module.rules.push({
                "test": /\.js$/,
                "enforce": "pre",
                "loader": "source-map-loader"
            });
        }

        return asyncUtil.stream(gulp.src(entry.app)
            .pipe(webpackStream(webpackOptions, webpack))
            .pipe(gulp.dest(uniteConfig.dirs.www.dist)));
    }
});

// Generated by UniteJS
