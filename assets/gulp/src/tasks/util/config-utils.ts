/**
 * Gulp utils for config.
 */
import * as fs from "fs";
import * as path from "path";
import * as util from "util";
import { IPackageJson } from "../../types/IPackageJson";
import { IUniteBuildConfiguration } from "../../types/IUniteBuildConfiguration";
import { IUniteConfiguration } from "../../types/IUniteConfiguration";
import { IUniteRuntimeConfiguration } from "../../types/IUniteRuntimeConfiguration";
import * as asyncUtil from "./async-util";
import * as display from "./display";

function createBuildNumber(now: Date): string {
    return now.getFullYear().toString() +
        `0${now.getUTCMonth() + 1}`.substr(-2) +
        `0${now.getUTCDate()}`.substr(-2) +
        `0${now.getUTCHours()}`.substr(-2) +
        `0${now.getUTCMinutes()}`.substr(-2) +
        `0${now.getUTCSeconds()}`.substr(-2);
}

export async function create(uniteConfig: IUniteConfiguration,
                             buildConfiguration: IUniteBuildConfiguration,
                             packageJson: IPackageJson):
                            Promise<IUniteRuntimeConfiguration> {
    const now = new Date();
    const rootConfig: IUniteRuntimeConfiguration = {
        config: {},
        configName: buildConfiguration.name,
        bundle: buildConfiguration.bundle,
        minify: buildConfiguration.minify,
        pwa: buildConfiguration.pwa,
        packageVersion: packageJson.version,
        uniteVersion: uniteConfig.uniteVersion,
        buildDateTime: now.getTime(),
        buildNumber: process.env.BUILD_NUMBER ||
            process.env.BUILD_TAG ||
            process.env.CI_BUILD_NUMBER ||
            process.env.CI_BUILD_TAG ||
            process.env.TRAVIS_BUILD_NUMBER ||
            process.env.CIRCLE_BUILD_NUM ||
            process.env.DRONE_BUILD_NUMBER ||
            process.env.APPVEYOR_BUILD_NUMBER ||
            process.env.BUILD_BUILDNUMBER ||
            createBuildNumber(now)
    };

    const readFileAsync = util.promisify(fs.readFile);

    const commonFilename = path.join(uniteConfig.dirs.www.configuration, "common.json");
    const commonExists = await asyncUtil.fileExists(commonFilename);
    if (commonExists) {
        try {
            const commonContents = await readFileAsync(commonFilename);

            const objCommonConfig = JSON.parse(commonContents.toString());

            Object.assign(rootConfig.config, objCommonConfig);

        } catch (err) {
            display.error(`Reading ${commonFilename} failed`, err);
            process.exit(1);
        }
    }

    const configFilename = path.join(uniteConfig.dirs.www.configuration, `${rootConfig.configName}.json`);
    const configExists = await asyncUtil.fileExists(configFilename);
    if (configExists) {
        try {
            const configContents = await readFileAsync(configFilename);

            const objConfig = JSON.parse(configContents.toString());

            Object.assign(rootConfig.config, objConfig);

        } catch (err) {
            display.error(`Reading ${configFilename} failed`, err);
            process.exit(1);
        }
    }

    return rootConfig;
}

// Generated by UniteJS
