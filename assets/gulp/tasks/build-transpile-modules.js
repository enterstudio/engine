/**
 * Gulp tasks for transpiling modules.
 */
const display = require("./util/display");
const uc = require("./util/unite-config");
const gulp = require("gulp");
const babel = require("gulp-babel");
const typescript = require("gulp-typescript");
const path = require("path");
const uglify = require("gulp-uglify");
const gutil = require("gulp-util");
const asyncUtil = require("./util/async-util");
const errorUtil = require("./util/error-util");
const through = require("through2");

function multiReplace (replacements) {
    return through.obj((file, encode, callback) => {
        let contents = file.contents.toString();

        if (replacements && replacements.length > 0) {
            replacements.forEach(replacement => {
                contents = contents.replace(new RegExp(replacement.from, "g"), replacement.to);
            });
        }

        file.contents = Buffer.from(contents);
        callback(null, file);
    });
}

gulp.task("build-transpile-modules", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, false);

    const keys = Object.keys(uniteConfig.clientPackages);

    for (let i = 0; i < keys.length; i++) {
        const clientPackage = uniteConfig.clientPackages[keys[i]];
        if (clientPackage.transpileAlias) {
            const destFolder = path.join(uniteConfig.dirs.www.package, clientPackage.transpileAlias);

            const dirExists = await asyncUtil.directoryExists(destFolder);

            if (dirExists) {
                display.info("Skipping Transpile", `${clientPackage.name} to ${clientPackage.transpileAlias}`);
            } else {
                display.info("Transpiling", `${clientPackage.name} to ${clientPackage.transpileAlias}`);

                const baseFolder = path.join(
                    uniteConfig.dirs.www.package,
                    clientPackage.name
                );

                const srcs = (clientPackage.transpileSrc || ["**/*.js"])
                    .map(src => path.join(uniteConfig.dirs.www.package, clientPackage.name, src));

                let errorCount = 0;

                if (clientPackage.transpileLanguage === "JavaScript") {
                    await asyncUtil.stream(gulp.src(srcs, {"base": baseFolder})
                        .pipe(multiReplace(clientPackage.transpileTransforms))
                        .pipe(babel({
                            "presets": [
                                [
                                    "env",
                                    {
                                        "modules": uniteConfig.moduleType.toLowerCase()
                                    }
                                ]
                            ],
                            "babelrc": false
                        }))
                        .on("error", (err) => {
                            display.error(err.message);
                            if (err.codeFrame) {
                                display.error(`\n${err.codeFrame}`);
                            }
                            errorCount++;
                        })
                        .on("error", errorUtil.handleErrorEvent)
                        .pipe(buildConfiguration.minify ? uglify()
                            .on("error", (err) => {
                                display.error(err.toString());
                            }) : gutil.noop())

                        .pipe(gulp.dest(destFolder))
                        .on("end", () => {
                            errorUtil.handleErrorCount(errorCount);
                        }));
                } else if (clientPackage.transpileLanguage === "TypeScript") {
                    const tsProject = typescript.createProject({
                        "target": "es5",
                        "experimentalDecorators": true,
                        "module": uniteConfig.moduleType === "systemjs"
                            ? "system" : uniteConfig.moduleType.toLowerCase()
                    });
                    await asyncUtil.stream(gulp.src(srcs, {"base": baseFolder})
                        .pipe(multiReplace(clientPackage.transpileTransforms))
                        .pipe(tsProject(typescript.reporter.nullReporter()))
                        .on("error", (err) => {
                            display.error(err.message);
                            errorCount++;
                        })
                        .on("error", errorUtil.handleErrorEvent)
                        .js
                        .pipe(gulp.dest(destFolder))
                        .on("end", () => {
                            errorUtil.handleErrorCount(errorCount);
                        }));
                }
            }
        }
    }
});

/* Generated by UniteJS */
