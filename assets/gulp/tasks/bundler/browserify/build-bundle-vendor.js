/**
 * Gulp tasks for wrapping Browserify modules.
 */
const display = require("./util/display");
const gulp = require("gulp");
const browserify = require("browserify");
const source = require("vinyl-source-stream");
const buffer = require("vinyl-buffer");
const uc = require("./util/unite-config");
const asyncUtil = require("./util/async-util");
const clientPackages = require("./util/client-packages");
const gutil = require("gulp-util");
const uglify = require("gulp-uglify");

gulp.task("build-bundle-vendor", async () => {
    const uniteConfig = await uc.getUniteConfig();

    const buildConfiguration = uc.getBuildConfiguration(uniteConfig);

    if (buildConfiguration.bundle) {
        display.info("Running", "Browserify for Vendor");

        const bVendor = browserify({"debug": buildConfiguration.sourcemaps});
        bVendor.transform("envify", {
            "NODE_ENV": buildConfiguration.minify ? "production" : "development",
            "global": true
        });

        const vendorPackages = await clientPackages.getBundleVendorPackages(uniteConfig);

        Object.keys(vendorPackages).forEach((key) => {
            const idx = key.indexOf("systemjs");
            if (idx < 0) {
                display.info("Adding", key);
                bVendor.require(`./${vendorPackages[key]}`, {"expose": key});
            }
        });

        return asyncUtil.stream(bVendor.bundle().on("error", (err) => {
            display.error(err);
        })
            .pipe(source("vendor-bundle.js"))
            .pipe(buffer())
            .pipe(buildConfiguration.minify ? uglify()
                .on("error", (err) => {
                    display.error(err.toString());
                }) : gutil.noop())
            .pipe(gulp.dest(uniteConfig.dirs.www.dist)));
    }
});

/* Generated by UniteJS */

