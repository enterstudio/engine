/**
 * Gulp tasks for bundling SystemJS modules.
 */
const gulp = require("gulp");
const insert = require("gulp-insert");
const sourcemaps = require("gulp-sourcemaps");
const path = require("path");
const fs = require("fs");
const util = require("util");
const gutil = require("gulp-util");
const uc = require("./util/unite-config");
const asyncUtil = require("./util/async-util");
const moduleConfig = require("./util/module-config");
const display = require("./util/display");
const Builder = require("systemjs-builder");
const uglify = require("gulp-uglify");

async function addBootstrap (uniteConfig, buildConfiguration) {
    let bootstrap = moduleConfig.create(uniteConfig, ["app", "both"], true);
    bootstrap += "Promise.all(preloadModules.map(function(module) { return SystemJS.import(module); }))";
    bootstrap += ".then(function() {";
    bootstrap += "SystemJS.import('dist/entryPoint');";
    bootstrap += "});";

    const bootstrapFile = path.join(uniteConfig.dirs.www.dist, "app-bundle-bootstrap.js");

    try {
        await util.promisify(fs.writeFile)(bootstrapFile, bootstrap);
    } catch (err) {
        display.error("Writing app-bundle-bootstrap.js", err);
        process.exit(1);
    }

    await asyncUtil.stream(gulp.src(bootstrapFile)
        .pipe(buildConfiguration.minify ? uglify() : gutil.noop())
        .pipe(gulp.dest(uniteConfig.dirs.www.dist)));

    let bootstrap2 = null;
    try {
        bootstrap2 = await util.promisify(fs.readFile)(bootstrapFile);
    } catch (err) {
        display.error("Reading app-bundle-bootstrap.js", err);
        process.exit(1);
    }

    return asyncUtil.stream(
        gulp.src(path.join(uniteConfig.dirs.www.dist, "app-bundle.js"))
            .pipe(buildConfiguration.sourcemaps
                ? sourcemaps.init({"loadMaps": true}) : gutil.noop())
            .pipe(insert.append(bootstrap2))
            .pipe(buildConfiguration.sourcemaps
                ? sourcemaps.write({"includeContent": true}) : gutil.noop())
            .pipe(gulp.dest(uniteConfig.dirs.www.dist)));
}

gulp.task("build-bundle-app", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig);

    if (buildConfiguration.bundle) {
        display.info("Running", "Systemjs builder for App");

        const builder = new Builder("./", `${uniteConfig.dirs.www.dist}app-module-config.js`);

        const dist = uniteConfig.dirs.www.dist;

        const packageFiles = [
            `${dist}**/*.js`,
            ` + ${dist}**/*.html!text`,
            ` + ${dist}**/*.css!text`,
            ` - ${dist}vendor-bundle.js`,
            ` - ${dist}vendor-bundle-init.js`,
            ` - ${dist}app-module-config.js`
        ];

        const sourceMapsFlag = buildConfiguration.sourcemaps ? "inline" : false;

        try {
            await builder.bundle(packageFiles.join(""),
                path.join(uniteConfig.dirs.www.dist, "app-bundle.js"),
                {
                    "minify": buildConfiguration.minify,
                    "sourceMaps": sourceMapsFlag
                });

            return addBootstrap(uniteConfig, buildConfiguration);
        } catch (err) {
            display.error("Running bundler", err);
            process.exit(1);
        }
    }
});

/* Generated by UniteJS */
