/**
 * Gulp tasks for bundling SystemJS modules.
 */
const gulp = require("gulp");
const insert = require("gulp-insert");
const sourcemaps = require("gulp-sourcemaps");
const path = require("path");
const gutil = require("gulp-util");
const uc = require("./util/unite-config");
const bundle = require("./util/bundle");
const display = require("./util/display");
const Builder = require("systemjs-builder");

gulp.task("build-bundle-app", () => {
    const uniteConfig = uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration();

    if (buildConfiguration.bundle) {
        display.info("Running", "Systemjs builder");

        const paths = bundle.createPaths(uniteConfig);
        const paths2 = {};
        const packages = bundle.createPackages(uniteConfig);
        const preload = bundle.createPreload(uniteConfig);
        const externals = [];

        for (const key in paths) {
            paths[key] = `./${paths[key]}`;
            paths2[key] = `${uniteConfig.directories.dist}vendor-bundle.js`;
            externals.push(key);
        }

        packages[""] = {"defaultExtension": "js"};

        const builder = new Builder();

        builder.bundle("entryPoint.js", path.join(uniteConfig.directories.dist, "app-bundle.js"), {
            "config": {
                "baseURL": uniteConfig.directories.dist,
                packages,
                paths
            },
            externals,
            "minify": buildConfiguration.minify,
            "sourceMaps": buildConfiguration.sourcemaps ? "inline" : false
        })
            .then(() => {
                let bootstrap = "SystemJS.config({";
                bootstrap += `paths: ${JSON.stringify(paths2)},`;
                bootstrap += `packages: ${JSON.stringify(packages)}`;
                bootstrap += "});";
                if (preload.length > 0) {
                    bootstrap += `Promise.all(${JSON.stringify(preload)}.map(function(module) { return SystemJS.import(module); }))`;
                    bootstrap += ".then(function() {";
                }
                bootstrap += "SystemJS.import('entryPoint');";
                if (preload.length > 0) {
                    bootstrap += "});";
                }

                return gulp.src(path.join(uniteConfig.directories.dist, "app-bundle.js"))
                    .pipe(buildConfiguration.sourcemaps ? sourcemaps.init({"loadMaps": true}) : gutil.noop())
                    .pipe(insert.append(bootstrap))
                    .pipe(buildConfiguration.sourcemaps ? sourcemaps.write({"includeContent": true}) : gutil.noop())
                    .pipe(gulp.dest(uniteConfig.directories.dist));
            })
            .catch((err) => {
                display.error(err);
                process.exit(1);
            });
    }
});

/* Generated by UniteJS */
