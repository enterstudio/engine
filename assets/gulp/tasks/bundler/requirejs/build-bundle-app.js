/**
 * Gulp tasks for bundling RequireJS modules.
 */
const gulp = require("gulp");
const path = require("path");
const fs = require("fs");
const util = require("util");
const uc = require("./util/unite-config");
const display = require("./util/display");
const clientPackages = require("./util/client-packages");
const bundle = require("./util/bundle");
const asyncUtil = require("./util/async-util");
const gutil = require("gulp-util");
const requireJs = require("requirejs");
const insert = require("gulp-insert");
const sourcemaps = require("gulp-sourcemaps");

function performAppOptimize (uniteConfig, buildConfiguration, modulesConfig, paths) {
    return new Promise((resolve, reject) => {
        try {
            requireJs.optimize({
                "baseUrl": "./",
                "generateSourceMaps": buildConfiguration.sourcemaps,
                "logLevel": 2,
                "name": `${uniteConfig.dirs.www.dist.replace(/\.\//, "")}app-bundle-init`,
                "optimize": buildConfiguration.minify ? "uglify" : "none",
                "out": path.join(uniteConfig.dirs.www.dist, "app-bundle.js"),
                "paths": modulesConfig.paths,
                "exclude": ["text"]
            }, async (result) => {
                display.log(result);

                let bootstrap = "require.config({";
                bootstrap += `paths: ${JSON.stringify(paths)}`;
                bootstrap += "});";
                if (modulesConfig.preload.length > 0) {
                    bootstrap += `require(${JSON.stringify(modulesConfig.preload)}, function() {`;
                }
                bootstrap += `require(['${uniteConfig.dirs.www.dist.replace(/\.\//, "")}entryPoint']);`;
                if (modulesConfig.preload.length > 0) {
                    bootstrap += "});";
                }

                await asyncUtil.stream(
                    gulp.src(path.join(uniteConfig.dirs.www.dist, "app-bundle.js"))
                        .pipe(buildConfiguration.sourcemaps
                            ? sourcemaps.init({"loadMaps": true}) : gutil.noop())
                        .pipe(insert.append(bootstrap))
                        .pipe(buildConfiguration.sourcemaps
                            ? sourcemaps.write({"includeContent": true}) : gutil.noop())
                        .pipe(gulp.dest(uniteConfig.dirs.www.dist)));

                resolve();
            }, (err) => {
                reject(err);
            });
        } catch (err) {
            reject(err);
        }
    });
}

gulp.task("build-bundle-app", async () => {
    const uniteConfig = await uc.getUniteConfig();

    const buildConfiguration = uc.getBuildConfiguration(uniteConfig);

    if (buildConfiguration.bundle) {
        display.info("Running", "Require js optimizer for App");

        const files = await bundle.findAppFiles(uniteConfig, true, "text!", "text!");

        try {
            await util.promisify(fs.writeFile)(
                path.join(uniteConfig.dirs.www.dist, "app-bundle-init.js"),
                `define(${JSON.stringify(files)}, function () {});`);
        } catch (err) {
            display.error("Writing app-bundle-init.js", err);
            process.exit(1);
        }

        const modulesConfig = clientPackages.buildModuleConfig(
            uniteConfig,
            ["app", "both"],
            buildConfiguration.minify
        );

        const paths = {};
        for (const key in modulesConfig.paths) {
            if (key === "text") {
                modulesConfig.paths[key] = modulesConfig.paths[key].replace(/(\.js)$/, "");
            } else {
                modulesConfig.paths[key] = "empty:";
                paths[key] = `${uniteConfig.dirs.www.dist}vendor-bundle`;
            }
        }

        modulesConfig.packages.forEach(pkg => {
            modulesConfig.paths[pkg.name] = "empty:";
            paths[pkg.name] = `${uniteConfig.dirs.www.dist}vendor-bundle`;
        });

        try {
            await performAppOptimize(uniteConfig, buildConfiguration, modulesConfig, paths);
        } catch (err) {
            display.error("Performing Optimize", err);
            process.exit(1);
        }
    }
});

/* Generated by UniteJS */
