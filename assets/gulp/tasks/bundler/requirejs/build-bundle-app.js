/**
 * Gulp tasks for bundling RequireJS modules.
 */
const gulp = require("gulp");
const path = require("path");
const uc = require("./util/unite-config");
const display = require("./util/display");
const bundle = require("./util/bundle");
const gutil = require("gulp-util");
const requireJs = require("requirejs");
const insert = require("gulp-insert");
const sourcemaps = require("gulp-sourcemaps");

gulp.task("build-bundle-app", () => {
    const uniteConfig = uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration();

    if (buildConfiguration.bundle) {
        display.info("Running", "Require js optimizer");

        const paths = bundle.createPaths(uniteConfig);
        const paths2 = {};
        const packages = bundle.createPackages(uniteConfig);
        const preload = bundle.createPreload(uniteConfig);

        for (const key in paths) {
            paths[key] = "empty:";
            paths2[key] = `${uniteConfig.directories.dist}vendor-bundle`;
        }

        try {
            requireJs.optimize({
                "baseUrl": uniteConfig.directories.dist,
                "generateSourceMaps": buildConfiguration.sourcemaps,
                "insertRequire": ["entryPoint"],
                "logLevel": 2,
                "name": "entryPoint",
                "optimize": buildConfiguration.minify ? "uglify" : "none",
                "out": path.join(uniteConfig.directories.dist, "app-bundle.js"),
                paths
            }, (result) => {
                display.log(result);

                let bootstrap = "require.config({";
                bootstrap += `paths: ${JSON.stringify(paths2)},`;
                bootstrap += `packages: ${JSON.stringify(packages)}`;
                bootstrap += "});";
                if (preload.length > 0) {
                    bootstrap += `require(${JSON.stringify(preload)}, function() {`;
                }
                bootstrap += "require(['entryPoint']);";
                if (preload.length > 0) {
                    bootstrap += "});";
                }

                return gulp.src(path.join(uniteConfig.directories.dist, "app-bundle.js"))
                    .pipe(buildConfiguration.sourcemaps ? sourcemaps.init({"loadMaps": true}) : gutil.noop())
                    .pipe(insert.append(bootstrap))
                    .pipe(buildConfiguration.sourcemaps ? sourcemaps.write({"includeContent": true}) : gutil.noop())
                    .pipe(gulp.dest(uniteConfig.directories.dist));
            }, (err) => {
                display.error(err);
                process.exit(1);
            });
        } catch (err) {
            display.error(err);
            process.exit(1);
        }
    }
});

/* Generated by UniteJS */
