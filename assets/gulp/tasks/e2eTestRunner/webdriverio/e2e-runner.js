/**
 * Gulp tasks for webdriverio e2e testing.
 */
const display = require("./util/display");
const gulp = require("gulp");
const uc = require("./util/unite-config");
const exec = require("./util/exec");
const path = require("path");
const util = require("util");
const webdriver = require("gulp-webdriver");
const selenium = require("selenium-standalone");
const browserSync = require("browser-sync");
const asyncUtil = require("./util/async-util");
const minimist = require("minimist");

let seleniumInstance = null;
let browserSyncInstance = null;

gulp.task("e2e-run-test", async () => {
    display.info("Running", "WebdriverIO");

    const knownOptions = {
        "default": {
            "browser": "chrome",
            "secure": false,
            "port": "9000"
        },
        "string": [
            "browser",
            "port"
        ],
        "boolean": [
            "secure"
        ]

    };

    const options = minimist(process.argv.slice(2), knownOptions);
    if (options.browser === "ie") {
        options.browser = "internet explorer";
    } else if (options.browser === "edge") {
        options.browser = "MicrosoftEdge";
    }

    let url = options.secure ? "https://" : "http://";
    url += "localhost:";
    url += options.port;

    const uniteConfig = await uc.getUniteConfig();
    let hasError = false;

    try {
        await asyncUtil.stream(gulp.src("wdio.conf.js")
            .pipe(webdriver({
                "baseUrl": url,
                "capabilities": [
                    {
                        "browserName": options.browser,
                        "chromeOptions": {
                            "args": [
                                "headless",
                                "disable-gpu",
                                "no-sandbox"
                            ]
                        }
                    }
                ]
            })));
    } catch (err) {
        hasError = true;
        display.error("Executing WebdriverIO", err);
    }

    try {
        seleniumInstance.kill();
    } catch (err) {
        // Ignore
    }
    try {
        browserSyncInstance.exit();
    } catch (err) {
        // Ignore
    }

    if (hasError) {
        process.exit(1);
    } else {
        display.info("Running", "Allure Report Generation");

        try {
            await exec.npmRun("allure", [
                "generate",
                path.join(uniteConfig.dirs.www.reports, "/e2etemp/"),
                "-o",
                path.join(uniteConfig.dirs.www.reports, "/e2e/")
            ]);
        } catch (err) {
            display.error("Executing Allure", err);
            process.exit(1);
        }
    }
});

gulp.task("e2e-serve", async () => {
    display.info("Running", "BrowserSync");

    const knownOptions = {
        "default": {
            "secure": false,
            "port": "9000"
        },
        "boolean": [
            "secure"
        ],
        "string": [
            "port"
        ]
    };

    const options = minimist(process.argv.slice(2), knownOptions);

    browserSyncInstance = browserSync.create();

    const initAsync = util.promisify(browserSyncInstance.init);
    await initAsync({
        "https": options.secure,
        "notify": false,
        "online": true,
        "open": false,
        "port": options.port,
        "server": {"baseDir": ["."]}
    });

    display.info("Running", "Selenium");
    try {
        seleniumInstance = await util.promisify(selenium.start)();
    } catch (err) {
        display.error("Starting selenium", err);
        process.exit(1);
    }
});

/* Generated by UniteJS */
