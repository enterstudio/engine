/**
 * Gulp utils for unite configuration.
 */
const display = require("./display");
const minimist = require("minimist");
const fs = require("fs");

function getUniteConfig () {
    try {
        return JSON.parse(fs.readFileSync("./unite.json").toString());
    } catch (e) {
        display.error("Reading unite.json");
        process.exit(1);
        return undefined;
    }
}

function getUniteThemeConfig () {
    try {
        return JSON.parse(fs.readFileSync("./assetsSource/theme/unite-theme.json").toString());
    } catch (e) {
        display.error("Reading unite-theme.json");
        process.exit(1);
        return undefined;
    }
}

function setUniteThemeConfig (uniteThemeConfig) {
    try {
        return fs.writeFileSync("./assetsSource/theme/unite-theme.json",
            JSON.stringify(uniteThemeConfig, undefined, "\t"));
    } catch (e) {
        display.error("Writing unite-theme.json");
        process.exit(1);
        return undefined;
    }
}

function getBuildConfiguration (uniteConfig, showInfo) {
    const knownOptions = {
        "default": {"buildConfiguration": "dev"},
        "string": ["buildConfiguration"]
    };

    const options = minimist(process.argv.slice(2), knownOptions);

    let buildConfiguration = null;

    if (uniteConfig &&
        uniteConfig.buildConfigurations &&
        uniteConfig.buildConfigurations[options.buildConfiguration]) {
        buildConfiguration = uniteConfig.buildConfigurations[options.buildConfiguration];
        if (showInfo) {
            display.info("Build Configuration", options.buildConfiguration);
        }
    } else {
        display.error(`Unknown build configuration '${options.buildConfiguration}' in unite.json, aborting.`);
        process.exit(1);
    }

    buildConfiguration = buildConfiguration || {};
    if (buildConfiguration.bundle === undefined) {
        buildConfiguration.bundle = false;
    }
    if (buildConfiguration.sourcemaps === undefined) {
        buildConfiguration.sourcemaps = true;
    }
    if (buildConfiguration.minify === undefined) {
        buildConfiguration.minify = false;
    }
    if (buildConfiguration.variables === undefined) {
        buildConfiguration.variables = {};
    }
    buildConfiguration.variables.name = options.buildConfiguration;
    if (showInfo) {
        display.info("Sourcemaps", buildConfiguration.sourcemaps);
        display.info("Minify", buildConfiguration.minify);
        display.info("Bundle", buildConfiguration.bundle);
    }

    return buildConfiguration;
}

module.exports = {
    getBuildConfiguration,
    getUniteConfig,
    getUniteThemeConfig,
    setUniteThemeConfig
};

/* Generated by UniteJS */
