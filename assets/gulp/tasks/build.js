/**
 * Gulp tasks for building JavaScript.
 */
const display = require("./util/display");
const uc = require("./util/unite-config");
const moduleConfig = require("./util/module-config");
const gulp = require("gulp");
const path = require("path");
const fs = require("fs");
const del = require("del");
const rename = require("gulp-rename");
const replace = require("gulp-replace");
const runSequence = require("run-sequence");
const packageJson = require("../../package.json");
const htmlMin = require("gulp-htmlmin");
const deleteEmpty = require("delete-empty");
require("./build-transpile");
require("./build-bundle-app");
require("./build-bundle-vendor");
require("./build-lint");
require("./build-css-app");
require("./build-css-components");
require("./build-css-post-app");
require("./build-css-post-components");

gulp.task("build-clean", (callback) => {
    const uniteConfig = uc.getUniteConfig();
    const toClean = [
        path.join(uniteConfig.directories.dist, "**/*"),
        path.join(uniteConfig.directories.cssDist, "**/*"),
        "./index.html"
    ];
    display.info("Cleaning", toClean);
    return del(toClean, callback);
});

gulp.task("build-copy-index", () => {
    const uniteConfig = uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration();

    const cacheBust = buildConfiguration.bundle ? `?v=${new Date().getTime()}` : "";
    const uniteJs = {
        "config": buildConfiguration.variables,
        "packageVersion": packageJson.version,
        "uniteVersion": uniteConfig.uniteVersion
    };
    const config = `window.unite = ${JSON.stringify(uniteJs)};`;

    return gulp.src(buildConfiguration.bundle ? "./index-bundle.html" : "./index-no-bundle.html")
        .pipe(replace("{CACHEBUST}", cacheBust))
        .pipe(replace("{UNITECONFIG}", config))
        .pipe(rename("index.html"))
        .pipe(gulp.dest("./"));
});

gulp.task("build-post-clean", (cb) => {
    const uniteConfig = uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration();

    const toClean = [];

    if (uniteConfig.cssPost === "None") {
        toClean.push(path.join(uniteConfig.directories.cssDist, "**/main.css"));
    } else {
        toClean.push(path.join(uniteConfig.directories.cssDist, "**/!(style).css"));
    }
    if (buildConfiguration.bundle) {
        toClean.push(path.join(uniteConfig.directories.dist, "**/!(app-bundle|vendor-bundle).*"));
    }
    display.info("Cleaning", toClean);
    del(toClean).then(() => {
        deleteEmpty(uniteConfig.directories.dist, {"verbose": false}, () => {
            cb();
        });
    });
});

gulp.task("build-index-min", () => {
    const buildConfiguration = uc.getBuildConfiguration();

    if (buildConfiguration.minify) {
        return gulp.src("./index.html")
            .pipe(htmlMin({"collapseWhitespace": true, "removeComments": true}))
            .pipe(gulp.dest("./"));
    }
});

gulp.task("build-html-min", () => {
    const uniteConfig = uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration();

    if (buildConfiguration.minify) {
        return gulp.src(path.join(uniteConfig.directories.dist, "**/*.html"))
            .pipe(htmlMin({"collapseWhitespace": true, "removeComments": true}))
            .pipe(gulp.dest(uniteConfig.directories.dist));
    }
});

gulp.task("build-copy-components", () => {
    const uniteConfig = uc.getUniteConfig();

    return gulp.src([path.join(uniteConfig.directories.src, "**/*.html")])
        .pipe(gulp.dest(uniteConfig.directories.dist));
});

gulp.task("build-module-config", (cb) => {
    const uniteConfig = uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration();

    const config = moduleConfig.create(uniteConfig, ["app", "both"], buildConfiguration.bundle);

    fs.writeFile(path.join(uniteConfig.directories.dist, "app-module-config.js"), config, (err) => {
        if (err) {
            display.error(err);
            process.exit(1);
        } else {
            cb();
        }
    });
});

gulp.task("build", (cb) => {
    runSequence("build-clean",
        "build-transpile",
        "build-lint",
        "build-css-app",
        "build-css-post-app",
        "build-css-components",
        "build-css-post-components",
        "build-copy-components",
        "build-module-config",
        "build-html-min",
        "build-bundle-vendor",
        "build-bundle-app",
        "build-copy-index",
        "build-index-min",
        "build-post-clean", cb);
});

/* Generated by UniteJS */
