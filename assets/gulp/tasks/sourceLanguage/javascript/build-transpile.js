/**
 * Gulp tasks for building JavaScript.
 */
const display = require("./util/display");
const uc = require("./util/unite-config");
const gulp = require("gulp");
const babel = require("gulp-babel");
const path = require("path");
const sourcemaps = require("gulp-sourcemaps");
const uglify = require("gulp-uglify");
const gutil = require("gulp-util");

gulp.task("build-transpile", async () => {
    display.info("Running", "Babel");

    const uniteConfig = await uc.getUniteConfig();

    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, true);
    let errorCount = 0;

    gulp.src(path.join(uniteConfig.directories.src, "**/*.{js,jsx}"))
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.init() : gutil.noop())
        .pipe(babel())
        .pipe(buildConfiguration.minify ? uglify()
            .on("error", (err) => {
                display.error(err.toString());
            }) : gutil.noop())
        .on("error", (err) => {
            display.error(`error: ${err.message}\n`);
            display.error(err.codeFrame);
            errorCount++;
        })
        .pipe(buildConfiguration.sourcemaps
            ? sourcemaps.mapSources((sourcePath) => `./src/${sourcePath}`) : gutil.noop())
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.write({
            "includeContent": true,
            "sourceRoot": ""
        }) : gutil.noop())
        .pipe(gulp.dest(uniteConfig.directories.dist))
        .on("end", () => {
            if (errorCount > 0) {
                process.exit();
            }
        });
});

/* Generated by UniteJS */
