/**
 * Gulp tasks for unit testing JavaScript.
 */
const display = require("./util/display");
const uc = require("./util/unite-config");
const gulp = require("gulp");
const asyncUtil = require("./util/async-util");
const replace = require("gulp-replace");
const babel = require("gulp-babel");
const sourcemaps = require("gulp-sourcemaps");
const minimist = require("minimist");

gulp.task("unit-transpile", async () => {
    display.info("Running", "Babel");

    const knownOptions = {
        "default": {
            "grep": "*"
        },
        "string": [
            "grep"
        ]
    };

    const options = minimist(process.argv.slice(2), knownOptions);

    const uniteConfig = await uc.getUniteConfig();

    let errorCount = 0;

    const regEx = new RegExp(uniteConfig.srcDistReplace, "g");

    return asyncUtil.stream(gulp.src(`${uniteConfig.dirs.www.unitTestSrc}**/${options.grep}.spec.{js,jsx}`)
        .pipe(sourcemaps.init())
        .pipe(babel())
        .on("error", (err) => {
            display.error(`error: ${err.message}\n`);
            display.error(err.codeFrame);
            errorCount++;
        })
        .pipe(replace(regEx, uniteConfig.srcDistReplaceWith))
        .pipe(sourcemaps.write({"includeContent": true}))
        .pipe(gulp.dest(uniteConfig.dirs.www.unitTestDist))
        .on("end", () => {
            if (errorCount > 0) {
                process.exit();
            }
        }));
});

/* Generated by UniteJS */
