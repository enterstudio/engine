/**
 * Gulp tasks for e2e testing JavaScript.
 */
const display = require("./util/display");
const uc = require("./util/unite-config");
const gulp = require("gulp");
const path = require("path");
const babel = require("gulp-babel");
const sourcemaps = require("gulp-sourcemaps");
const asyncUtil = require("./util/async-util");
const minimist = require("minimist");
const errorUtil = require("./util/error-util");

gulp.task("e2e-transpile", async () => {
    display.info("Running", "Babel");

    const knownOptions = {
        "default": {
            "grep": "*"
        },
        "string": [
            "grep"
        ]
    };

    const options = minimist(process.argv.slice(2), knownOptions);

    const uniteConfig = await uc.getUniteConfig();

    let errorCount = 0;

    return asyncUtil.stream(gulp.src(path.join(
        uniteConfig.dirs.www.e2eTestSrc,
        `**/${options.grep}.spec.${uc.extensionMap(uniteConfig.sourceExtensions)}`
    ))
        .pipe(sourcemaps.init())
        .pipe(babel({
            "babelrc": false,
            "presets": [
                [
                    "env",
                    {"modules": "commonjs"}
                ]
            ]
        }))
        .on("error", (err) => {
            display.error(err.message);
            if (err.codeFrame) {
                display.error(`\n${err.codeFrame}`);
            }
            errorCount++;
        })
        .on("error", errorUtil.handleErrorEvent)
        .pipe(sourcemaps.write({"includeContent": true}))
        .pipe(gulp.dest(uniteConfig.dirs.www.e2eTestDist))
        .on("end", () => {
            errorUtil.handleErrorCount(errorCount);
        }));
});

/* Generated by UniteJS */
