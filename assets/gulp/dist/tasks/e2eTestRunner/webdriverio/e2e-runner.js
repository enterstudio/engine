/**
 * Gulp tasks for webdriverio e2e testing.
 */
const browserSync = require("browser-sync");
const fs = require("fs");
const gulp = require("gulp");
const webdriver = require("gulp-webdriver");
const minimist = require("minimist");
const path = require("path");
const selenium = require("selenium-standalone");
const util = require("util");
const asyncUtil = require("../../util/async-util");
const display = require("../../util/display");
const exec = require("../../util/exec");
const jsonHelper = require("../../util/json-helper");
const uc = require("../../util/unite-config");
let seleniumInstance = null;
let browserSyncInstance = null;
gulp.task("e2e-run-test", async () => {
    display.info("Running", "WebdriverIO");
    const knownOptions = {
        default: {
            browser: "chrome",
            secure: false,
            port: "9000"
        },
        string: [
            "browser",
            "port"
        ],
        boolean: [
            "secure"
        ]
    };
    const options = minimist(process.argv.slice(2), knownOptions);
    if (options.browser === "ie") {
        options.browser = "internet explorer";
    } else if (options.browser === "edge") {
        options.browser = "MicrosoftEdge";
    }
    let url = options.secure ? "https://" : "http://";
    url += "localhost:";
    url += options.port;
    const uniteConfig = await uc.getUniteConfig();
    let hasError = false;
    const configContent = await util.promisify(fs.readFile)("./wdio.conf.js");
    const parts = (/(.*)({[\s|\S]*})([\s|\S]*exports[\s|\S]*)/).exec(configContent.toString());
    if (parts.length === 4) {
        try {
            const opts = jsonHelper.parseCode(parts[2]);
            opts.baseUrl = url;
            const oldChromeOptions = opts.capabilities && opts.capabilities.length > 0 ?
                opts.capabilities[0].chromeOptions : undefined;
            opts.capabilities = [{
                browserName: options.browser
            }];
            if (options.browser === "chrome" && oldChromeOptions) {
                opts.capabilities[0].chromeOptions = oldChromeOptions;
            }
            const plugins = parts[3]
                .replace(/require\('.\/node_modules/g, "require('../../../node_modules");
            const tempFilename = path.join(uniteConfig.dirs.www.e2eTestDist, "wdio.tmp.conf.js");
            await util.promisify(fs.writeFile)(tempFilename, `${parts[1]}${jsonHelper.codify(opts)}${plugins}`);
            await asyncUtil.stream(gulp.src(tempFilename)
                .pipe(webdriver()));
        } catch (err) {
            hasError = true;
            display.error("Executing WebdriverIO", err);
        }
        try {
            seleniumInstance.kill();
        } catch (err) {
            // Ignore
        }
        try {
            browserSyncInstance.exit();
        } catch (err) {
            // Ignore
        }
        if (hasError) {
            process.exit(1);
        } else {
            display.info("Running", "Allure Report Generation");
            try {
                await exec.npmRun("allure", [
                    "generate",
                    path.join(uniteConfig.dirs.www.reports, "/e2etemp/"),
                    "-o",
                    path.join(uniteConfig.dirs.www.reports, "/e2e/")
                ]);
            } catch (err) {
                display.error("Executing Allure", err);
                process.exit(1);
            }
        }
    } else {
        display.error("Unable to parse wdio.conf.js");
        process.exit(1);
    }
});
gulp.task("e2e-serve", async () => {
    display.info("Running", "BrowserSync");
    const knownOptions = {
        default: {
            browser: "chrome",
            secure: false,
            port: "9000"
        },
        boolean: [
            "secure"
        ],
        string: [
            "browser",
            "port"
        ]
    };
    const options = minimist(process.argv.slice(2), knownOptions);
    browserSyncInstance = browserSync.create();
    const initAsync = util.promisify(browserSyncInstance.init);
    await initAsync({
        https: options.secure,
        notify: false,
        online: true,
        open: false,
        port: options.port,
        server: {
            baseDir: ["."]
        }
    });
    display.info("Running", "Selenium");
    try {
        const opts = {
            drivers: {}
        };
        opts.drivers[options.browser] = {};
        seleniumInstance = await util.promisify(selenium.start)(opts);
    } catch (err) {
        display.error("Starting selenium", err);
        process.exit(1);
    }
});
// Generated by UniteJS
