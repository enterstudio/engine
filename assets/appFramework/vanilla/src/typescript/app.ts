/**
 * Main application class.
 *
 * @export
 * @class App
 */
import { Child } from "./child/child";

export class App {
    private _router: { route: string | string[]; module(): any }[];

    /**
     * Run the application
     * @returns {void}
     */
    public run(): void {
        this._router = [
            { route: ["", "child"], module: () => new Child() }
        ];

        this.locationChanged();
        window.addEventListener("popstate", () => this.locationChanged());
    }

    /**
     * The application location has changed try and locate a new module to display
     * @returns {void}
     */
    private locationChanged(): void {
        const root = document.getElementById("root");

        const lookupRoute = (window.location.hash || "").replace(/^#\//, "");

        const foundRoute = this._router.find((testRoute) => this.matchRoute(lookupRoute, testRoute));
        if (foundRoute) {
            const module = foundRoute.module();
            while (root.hasChildNodes()) {
                root.removeChild(root.lastChild);
            }
            module.render(root);
        }
    }

    /**
     * Does the given route match
     * @param lookupRoute {string}
     * @param testRoute { route: string | string[]; module(): any }
     * @returns {void}
     */
    private matchRoute(lookupRoute: string, testRoute: { route: string | string[]; module(): any }): boolean {
        return Array.isArray(testRoute.route)
            ? testRoute.route.indexOf(lookupRoute) >= 0 : testRoute.route === lookupRoute;
    }
}

// Generated by UniteJS
