/**
 * Tests for HtmlTemplate.
 */
import * as Chai from "chai";
import * as Sinon from "sinon";
import { IFileSystem } from "unitejs-framework/dist/interfaces/IFileSystem";
import { ILogger } from "unitejs-framework/dist/interfaces/ILogger";
import { HtmlTemplateConfiguration } from "../../../../../dist/configuration/models/htmlTemplate/htmlTemplateConfiguration";
import { UniteConfiguration } from "../../../../../dist/configuration/models/unite/uniteConfiguration";
import { EngineVariables } from "../../../../../dist/engine/engineVariables";
import { HtmlTemplate } from "../../../../../dist/pipelineSteps/content/htmlTemplate";
import { FileSystemMock } from "../../fileSystem.mock";

describe("HtmlTemplate", () => {
    let sandbox: Sinon.SinonSandbox;
    let loggerStub: ILogger;
    let loggerInfoSpy: Sinon.SinonSpy;
    let loggerErrorSpy: Sinon.SinonSpy;
    let fileSystemMock: IFileSystem;
    let uniteConfigurationStub: UniteConfiguration;
    let engineVariablesStub: EngineVariables;

    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = <ILogger>{};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");

        fileSystemMock = new FileSystemMock();
        uniteConfigurationStub = new UniteConfiguration();

        engineVariablesStub = new EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });

    afterEach(async () => {
        sandbox.restore();
        await fileSystemMock.directoryDelete("./test/unit/temp");
    });

    it("can be created", async () => {
        const obj = new HtmlTemplate();
        Chai.should().exist(obj);
    });

    describe("initialise", () => {
        it("can setup the engine configuration", async () => {
            const obj = new HtmlTemplate();
            const res = await obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("HTMLBundle")).to.be.deep.equal({
                head: [],
                body: []
            });
            Chai.expect(engineVariablesStub.getConfiguration("HTMLNoBundle")).to.be.deep.equal({
                head: [],
                body: []
            });
        });
    });

    describe("process", () => {
        it("can fail if an exception is thrown", async () => {
            const obj = new HtmlTemplate();
            const res = await obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        });

        it("can skip if file has no generated marker", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            await fileSystemMock.fileWriteLines("./test/unit/temp/www/", "index-no-bundle.html", []);

            const obj = new HtmlTemplate();
            await obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = await obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Skipping");
        });

        it("can write if file has a generated marker an no other additions", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            await fileSystemMock.fileWriteLines("./test/unit/temp/www/", "index-no-bundle.html", ["Generated by UniteJS"]);

            const obj = new HtmlTemplate();
            await obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = await obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");

            const lines = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(15);
        });

        it("can write if file has a generated marker", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            await fileSystemMock.fileWriteLines("./test/unit/temp/www/", "index-no-bundle.html", ["Generated by UniteJS"]);

            const obj = new HtmlTemplate();
            await obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);

            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration<HtmlTemplateConfiguration>("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");

            const res = await obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");

            const lines = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(17);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(8);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(12);
        });

        it("can write with not bundled script include", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new HtmlTemplate();
            await obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);

            engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
            engineVariablesStub.toggleClientPackage(
                "requirejs-text",
                "text.js",
                undefined,
                undefined,
                false,
                "both",
                "notBundled",
                false,
                undefined,
                { text: "requirejs-text" },
                undefined,
                true);

            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration<HtmlTemplateConfiguration>("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");

            const htmlBundleTemplateConfiguration = engineVariablesStub.getConfiguration<HtmlTemplateConfiguration>("HTMLBundle");
            htmlBundleTemplateConfiguration.head.push("head3");
            htmlBundleTemplateConfiguration.body.push("body4");

            const res = await obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");

            const lines = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(18);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(9);
            Chai.expect(lines.findIndex(line => line.indexOf("<script") > 0)).to.be.equal(8);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(13);

            const lines2 = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-bundle.html");
            Chai.expect(lines2.length).to.be.equal(17);
            Chai.expect(lines2.findIndex(line => line.indexOf("head3") > 0)).to.be.equal(8);
            Chai.expect(lines2.findIndex(line => line.indexOf("text.js") > 0)).to.be.equal(-1);
            Chai.expect(lines2.findIndex(line => line.indexOf("body4") > 0)).to.be.equal(12);
        });

        it("can write with bundled script include", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new HtmlTemplate();
            await obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);

            engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
            engineVariablesStub.toggleClientPackage(
                "requirejs-text",
                "text.js",
                "text.min.js",
                undefined,
                false,
                "both",
                "bundled",
                false,
                undefined,
                { text: "requirejs-text" },
                undefined,
                true);

            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration<HtmlTemplateConfiguration>("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");

            const htmlBundleTemplateConfiguration = engineVariablesStub.getConfiguration<HtmlTemplateConfiguration>("HTMLBundle");
            htmlBundleTemplateConfiguration.head.push("head3");
            htmlBundleTemplateConfiguration.body.push("body4");

            const res = await obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");

            const lines = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(17);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(8);
            Chai.expect(lines.findIndex(line => line.indexOf("<script") > 0)).to.be.equal(-1);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(12);

            const lines2 = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-bundle.html");
            Chai.expect(lines2.length).to.be.equal(18);
            Chai.expect(lines2.findIndex(line => line.indexOf("head3") > 0)).to.be.equal(9);
            Chai.expect(lines2.findIndex(line => line.indexOf("text.min.js") > 0)).to.be.equal(8);
            Chai.expect(lines2.findIndex(line => line.indexOf("body4") > 0)).to.be.equal(13);
        });

        it("can write with both script include", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new HtmlTemplate();
            await obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);

            engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
            engineVariablesStub.toggleClientPackage(
                "requirejs-text",
                "text.js",
                "text.min.js",
                undefined,
                false,
                "both",
                "both",
                false,
                undefined,
                { text: "requirejs-text" },
                undefined,
                true);

            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration<HtmlTemplateConfiguration>("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");

            const htmlBundleTemplateConfiguration = engineVariablesStub.getConfiguration<HtmlTemplateConfiguration>("HTMLBundle");
            htmlBundleTemplateConfiguration.head.push("head3");
            htmlBundleTemplateConfiguration.body.push("body4");

            const res = await obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");

            const lines = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(18);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(9);
            Chai.expect(lines.findIndex(line => line.indexOf("text.js") > 0)).to.be.equal(8);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(13);

            const lines2 = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-bundle.html");
            Chai.expect(lines2.length).to.be.equal(18);
            Chai.expect(lines2.findIndex(line => line.indexOf("head3") > 0)).to.be.equal(9);
            Chai.expect(lines2.findIndex(line => line.indexOf("text.min.js") > 0)).to.be.equal(8);
            Chai.expect(lines2.findIndex(line => line.indexOf("body4") > 0)).to.be.equal(13);
        });
    });
});
