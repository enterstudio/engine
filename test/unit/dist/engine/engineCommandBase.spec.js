"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Engine Command Base.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../dist/configuration/models/unite/uniteConfiguration");
const engineCommandBase_1 = require("../../../../dist/engine/engineCommandBase");
const engineVariables_1 = require("../../../../dist/engine/engineVariables");
const readOnlyFileSystem_mock_1 = require("../readOnlyFileSystem.mock");
class TestCommand extends engineCommandBase_1.EngineCommandBase {
    testLoadConfiguration(outputDirectory, profileSource, profile, force) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return _super("loadConfiguration").call(this, outputDirectory, profileSource, profile, force);
        });
    }
    testLoadProfile(profileSource, profile) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return _super("loadProfile").call(this, profileSource, profile);
        });
    }
    testCreateEngineVariables(outputDirectory, uniteConfiguration, engineVariables) {
        return super.createEngineVariables(outputDirectory, uniteConfiguration, engineVariables);
    }
    testMapParser(input) {
        return super.mapParser(input);
    }
}
describe("EngineCommandBase", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.banner = () => { };
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerStub.warning = () => { };
        fileSystemStub = new readOnlyFileSystem_mock_1.ReadOnlyFileSystemMock();
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
    }));
    it("can be created", () => {
        const obj = new TestCommand();
        Chai.should().exist(obj);
    });
    describe("create", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestCommand();
            const res = obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(undefined);
        }));
    });
    describe("loadConfiguration", () => {
        it("can be called with no existing config", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").resolves(false);
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadConfiguration(undefined, undefined, undefined, false);
            Chai.expect(res).to.be.equal(undefined);
        }));
        it("can be called with exception loading config", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").rejects("error");
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadConfiguration(undefined, undefined, undefined, false);
            Chai.expect(res).to.be.equal(null);
        }));
        it("can be called with force", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadConfiguration(undefined, undefined, undefined, true);
            Chai.expect(res).to.be.equal(undefined);
        }));
        it("can be called with existing config", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").resolves(true);
            sandbox.stub(fileSystemStub, "fileReadJson").resolves({ packageName: "fred" });
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadConfiguration(undefined, undefined, undefined, false);
            Chai.expect(res).to.be.deep.equal({ packageName: "fred" });
        }));
    });
    describe("loadProfile", () => {
        it("can be called with parameters", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadProfile(undefined, undefined);
            Chai.expect(res).to.be.equal(undefined);
        }));
        it("can be called with non existing profile", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").resolves(false);
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadProfile("configure", "testProfile");
            Chai.expect(res).to.be.equal(undefined);
        }));
        it("can be called with exception loading profile", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").rejects("error");
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadProfile("configure", "testProfile");
            Chai.expect(res).to.be.equal(null);
        }));
        it("can be called with no profiles", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").resolves(true);
            sandbox.stub(fileSystemStub, "fileReadJson").resolves({});
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadProfile("configure", "testProfile");
            Chai.expect(res).to.be.equal(null);
        }));
        it("can be called with unknown profile", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").resolves(true);
            sandbox.stub(fileSystemStub, "fileReadJson").resolves({ myProfile: {} });
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadProfile("configure", "testProfile");
            Chai.expect(res).to.be.equal(null);
        }));
        it("can be called with known profile", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").resolves(true);
            sandbox.stub(fileSystemStub, "fileReadJson").resolves({ testProfile: { a: 1 } });
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadProfile("configure", "testProfile");
            Chai.expect(res).to.be.deep.equal({ a: 1 });
        }));
        it("can be called with known profile mismatched case", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").resolves(true);
            sandbox.stub(fileSystemStub, "fileReadJson").resolves({ TESTPROFILE: { a: 1 } });
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = yield obj.testLoadProfile("configure", "testProfile");
            Chai.expect(res).to.be.deep.equal({ a: 1 });
        }));
    });
    describe("createEngineVariables", () => {
        it("can be called with parameters", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const engineVariables = new engineVariables_1.EngineVariables();
            const uniteConfiguration = new uniteConfiguration_1.UniteConfiguration();
            obj.testCreateEngineVariables(undefined, uniteConfiguration, engineVariables);
            Chai.expect(engineVariables.force).to.be.equal(false);
        }));
    });
    describe("mapParser", () => {
        it("can be called with no parameters", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = obj.testMapParser(undefined);
            Chai.expect(res).to.be.equal(undefined);
        }));
        it("can be called with broken input", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            try {
                obj.testMapParser("khjlkjlk");
            }
            catch (err) {
                Chai.expect(err.toString()).to.contain("not formed");
            }
        }));
        it("can be called with broken input", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestCommand();
            obj.create(loggerStub, fileSystemStub, undefined, undefined, undefined);
            const res = obj.testMapParser("a=1,b=2");
            Chai.expect(res).to.be.deep.equal({ a: "1", b: "2" });
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
