"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Engine.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../dist/configuration/models/unite/uniteConfiguration");
const enginePipelineStepBase_1 = require("../../../../dist/engine/enginePipelineStepBase");
const engineVariables_1 = require("../../../../dist/engine/engineVariables");
const fileSystem_mock_1 = require("../fileSystem.mock");
class TestPipelineStep extends enginePipelineStepBase_1.EnginePipelineStepBase {
    process(logger, fileSystem, uniteConfiguration, engineVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(0);
        });
    }
}
describe("EnginePipelineStepBase", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let uniteConfigurationStub;
    let engineVariablesStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemStub = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        engineVariablesStub = new engineVariables_1.EngineVariables();
        yield fileSystemStub.directoryCreate("./test/unit/temp");
    }));
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemStub.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new TestPipelineStep();
        Chai.should().exist(obj);
    }));
    describe("initialise", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.initialise(loggerStub, fileSystemStub, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
        }));
    });
    describe("process", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.process(loggerStub, fileSystemStub, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
        }));
    });
    describe("copyFile", () => {
        it("can be called when sourceFile does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("exist");
        }));
        it("can be called when destFile does not exist and destFolder does exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Copying");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/", "destFile.txt");
            Chai.expect(newContent).to.contain("foo-bar");
        }));
        it("can be called when destFile does not exist and destFolder does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/sub/", "destFile.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Copying");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/sub/", "destFile.txt");
            Chai.expect(newContent).to.contain("foo-bar");
        }));
        it("can be called when destFile does exist with no marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "destFile.txt", "bar-foo");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Skipping");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/", "destFile.txt");
            Chai.expect(newContent).to.contain("bar-foo");
        }));
        it("can be called when destFile does exist with marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "destFile.txt", "bar-foo\nGenerated by UniteJS");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Copying");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/", "destFile.txt");
            Chai.expect(newContent).to.contain("foo-bar");
        }));
    });
    describe("deleteFile", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.deleteFile(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called when file exists with no marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar");
            const res = yield obj.deleteFile(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Skipping");
        }));
        it("can be called when file exists with a marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            const res = yield obj.deleteFile(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Deleting");
        }));
        it("can fail when file exists but it throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            sandbox.stub(fileSystemStub, "fileDelete").rejects("error");
            const res = yield obj.deleteFile(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
    describe("wrapGeneratedMarker", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.wrapGeneratedMarker("before", "after");
            Chai.expect(res).to.be.equal("beforeGenerated by UniteJSafter");
        }));
    });
    describe("fileHasGeneratedMarker", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("FileNotExist");
        }));
        it("can be called when file does exist with no marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("NoMarker");
        }));
        it("can be called when file does exist with a marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("HasMarker");
        }));
        it("can be called when file does exist with a marker not on the last line", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS\n\n\n");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("HasMarker");
        }));
        it("can be called when file throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            sandbox.stub(fileSystemStub, "fileExists").rejects("error");
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS\n\n\n");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("FileNotExist");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
