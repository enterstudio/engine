"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Engine.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteBuildConfiguration_1 = require("../../../../dist/configuration/models/unite/uniteBuildConfiguration");
const uniteClientPackage_1 = require("../../../../dist/configuration/models/unite/uniteClientPackage");
const engine_1 = require("../../../../dist/engine/engine");
const packageUtils_1 = require("../../../../dist/pipelineSteps/packageUtils");
const fileSystem_mock_1 = require("../fileSystem.mock");
const readOnlyFileSystem_mock_1 = require("../readOnlyFileSystem.mock");
describe("Engine", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let loggerErrorSpy;
    let loggerWarningSpy;
    let loggerBannerSpy;
    let uniteJson;
    let uniteJsonWritten;
    let packageJsonErrors;
    let spdxErrors;
    let fileWriteJsonErrors;
    let packageInfo;
    let failPackageAdd;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.banner = () => { };
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerStub.warning = () => { };
        fileSystemStub = new readOnlyFileSystem_mock_1.ReadOnlyFileSystemMock();
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        loggerWarningSpy = sandbox.spy(loggerStub, "warning");
        loggerBannerSpy = sandbox.spy(loggerStub, "banner");
        uniteJson = undefined;
        packageJsonErrors = false;
        spdxErrors = false;
        fileWriteJsonErrors = false;
        packageInfo = undefined;
        uniteJsonWritten = undefined;
        failPackageAdd = false;
        const originalFileExists = fileSystemStub.fileExists;
        const stubExists = sandbox.stub(fileSystemStub, "fileExists");
        stubExists.callsFake((folder, filename) => __awaiter(this, void 0, void 0, function* () {
            if (filename === "unite.json") {
                return Promise.resolve(uniteJson === undefined ? false : true);
            }
            else {
                return originalFileExists(folder, filename);
            }
        }));
        const originalFileReadJson = fileSystemStub.fileReadJson;
        const stubreadJson = sandbox.stub(fileSystemStub, "fileReadJson");
        stubreadJson.callsFake((folder, filename) => __awaiter(this, void 0, void 0, function* () {
            if (filename === "package.json") {
                return packageJsonErrors ? Promise.reject("Does not exist") : originalFileReadJson(folder, filename);
            }
            else if (filename === "spdx-full.json") {
                return spdxErrors ? Promise.reject("Does not exist") : originalFileReadJson(folder, filename);
            }
            else if (filename === "unite.json") {
                return uniteJson === null ? Promise.reject("err") : Promise.resolve(uniteJson);
            }
            else {
                return originalFileReadJson(folder, filename);
            }
        }));
        const originalFileWriteJson = fileSystemStub.fileWriteJson;
        const stubWriteJson = sandbox.stub(fileSystemStub, "fileWriteJson");
        stubWriteJson.callsFake((folder, filename, obj) => __awaiter(this, void 0, void 0, function* () {
            if (fileWriteJsonErrors) {
                return Promise.reject("error");
            }
            else {
                if (filename === "unite.json") {
                    uniteJsonWritten = obj;
                    return Promise.resolve();
                }
                else {
                    return originalFileWriteJson(folder, filename, obj);
                }
            }
        }));
        const execStub = sandbox.stub(packageUtils_1.PackageUtils, "exec");
        execStub.callsFake((logger, fileSystem, packageName, workingDirectory, args) => __awaiter(this, void 0, void 0, function* () {
            if (args[0] === "view") {
                if (packageInfo === null) {
                    return Promise.reject("package information");
                }
                else {
                    return Promise.resolve(packageInfo);
                }
            }
            else {
                return failPackageAdd ? Promise.reject("error") : Promise.resolve();
            }
        }));
        uniteJson = {
            packageName: "my-package",
            title: "My App",
            license: "MIT",
            sourceLanguage: "JavaScript",
            moduleType: "AMD",
            bundler: "RequireJS",
            unitTestRunner: "Karma",
            unitTestFramework: "Jasmine",
            unitTestEngine: "PhantomJS",
            e2eTestRunner: "Protractor",
            e2eTestFramework: "MochaChai",
            cssPre: "Sass",
            cssPost: "None",
            linter: "ESLint",
            packageManager: "Yarn",
            taskManager: "Gulp",
            server: "BrowserSync",
            applicationFramework: "PlainApp",
            uniteVersion: "0.0.0",
            clientPackages: undefined,
            dirs: undefined,
            srcDistReplace: undefined,
            srcDistReplaceWith: undefined,
            buildConfigurations: undefined,
            platforms: undefined
        };
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        const obj = new fileSystem_mock_1.FileSystemMock();
        yield obj.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new engine_1.Engine(loggerStub, fileSystemStub);
        Chai.should().exist(obj);
    }));
    describe("configure", () => {
        it("can fail when calling with undefined packageName", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("packageName");
        }));
        it("can fail when calling with undefined title", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("title");
        }));
        it("can fail when calling with missing spdx-full.json", () => __awaiter(this, void 0, void 0, function* () {
            spdxErrors = true;
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("spdx-full.json");
        }));
        it("can fail when calling with undefined license", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("license");
        }));
        it("can fail when calling with undefined sourceLanguage", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("sourceLanguage");
        }));
        it("can fail when calling with undefined moduleType", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("moduleType");
        }));
        it("can fail when calling with undefined bundler", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("bundler");
        }));
        it("can fail when calling with undefined unitTestRunner", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("unitTestRunner");
        }));
        it("can fail when calling with unitTestRunner None and unitTestFramework", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "None", "Jasmine", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("is not valid");
        }));
        it("can fail when calling with unitTestRunner None and unitTestEngine", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "None", undefined, "PhantomJS", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("is not valid");
        }));
        it("can fail when calling with unitTestRunner Karma and missing unitTestFramework", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("unitTestFramework");
        }));
        it("can fail when calling with undefined unitTestEngine", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("unitTestEngine");
        }));
        it("can fail when calling with undefined e2eTestRunner", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("e2eTestRunner");
        }));
        it("can fail when calling with e2eTestRunner None and e2eTestFramework", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "None", "MochaChai", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("is not valid");
        }));
        it("can fail when calling with e2eTestRunner Protractor and missing e2eTestFramework", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("e2eTestFramework");
        }));
        it("can fail when calling with undefined linter", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "None", undefined, undefined, "None", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("linter");
        }));
        it("can fail when calling with undefined cssPre", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("cssPre");
        }));
        it("can fail when calling with undefined cssPost", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", "Sass", undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("cssPost");
        }));
        it("can fail when calling with invalid packageManager", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", "Sass", "None", "blah", undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("packageManager");
        }));
        it("can fail when calling with undefined applicationFramework", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", "Sass", "None", "Npm", undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("applicationFramework");
        }));
        it("can fail when missing package dependencies", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            packageJsonErrors = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", "Sass", "None", "Npm", "PlainApp", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("dependencies failed");
        }));
        it("can fail when pipeline step fails", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "TSLint", "Sass", "None", "Npm", "PlainApp", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("TSLint");
        }));
        it("can fail when pipeline module does not exist", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const stub = fileSystemStub.directoryGetFiles = sandbox.stub();
            stub.callsFake((dir) => __awaiter(this, void 0, void 0, function* () {
                if (dir.indexOf("linter") >= 0) {
                    return Promise.resolve([]);
                }
                else {
                    return new readOnlyFileSystem_mock_1.ReadOnlyFileSystemMock().directoryGetFiles(dir);
                }
            }));
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "None", "Sass", "None", "Npm", "PlainApp", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("could not be located");
        }));
        it("can fail when pipeline module throws error with label", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            fileSystemStub.directoryGetFiles = sandbox.stub().rejects("error");
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "TSLint", "Sass", "None", "Npm", "PlainApp", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed to load");
        }));
        it("can fail when pipeline module throws error", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            fileSystemStub.directoryGetFiles = sandbox.stub().onSecondCall().rejects("error");
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "TSLint", "Sass", "None", "Npm", "PlainApp", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed to load");
        }));
        it("can succeed when calling with none linter", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "None", "Sass", "None", "Npm", "PlainApp", undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("should probably");
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
        }));
        it("can succeed when calling with undefined outputDirectory", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", "Sass", "None", "Npm", "PlainApp", undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("should probably");
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
        }));
        it("can succeed when calling with defined outputDirectory", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", "Sass", "None", "Npm", "PlainApp", undefined, "./test/unit/temp");
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("should probably");
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
        }));
        it("can succeed with existing unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.buildConfigurations = { dev: new uniteBuildConfiguration_1.UniteBuildConfiguration() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("should probably");
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
        }));
        it("can fail with invalid unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = null;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("existing unite.json");
        }));
        it("can succeed with force and existing unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.buildConfigurations = { dev: new uniteBuildConfiguration_1.UniteBuildConfiguration() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.configure("my-package", "My App", "MIT", "JavaScript", "AMD", "RequireJS", "Karma", "Jasmine", "PhantomJS", "Protractor", "MochaChai", "ESLint", "Sass", "None", "Npm", "PlainApp", true, "./test/unit/temp");
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("should probably");
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
        }));
    });
    describe("clientPackage add", () => {
        it("can fail when calling with no unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("no unite.json");
        }));
        it("can fail when calling with undefined operation", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("operation");
        }));
        it("can fail when calling with undefined packageName", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("packageName");
        }));
        it("can fail when calling with undefined packageManager", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.packageManager = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("packageManager");
        }));
        it("can fail if invalid includeMode", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.clientPackages = { moment: new uniteClientPackage_1.UniteClientPackage() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, "foo", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("includeMode");
        }));
        it("can fail if invalid scriptIncludeMode", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.clientPackages = { moment: new uniteClientPackage_1.UniteClientPackage() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, "foo", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("scriptIncludeMode");
        }));
        it("can fail if package already exists", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.clientPackages = { moment: new uniteClientPackage_1.UniteClientPackage() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("already");
        }));
        it("can fail if package.json error", () => __awaiter(this, void 0, void 0, function* () {
            packageJsonErrors = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("dependencies");
        }));
        it("can fail if packageManager gets info errors", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = null;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("Package Information");
        }));
        it("can fail if pipeline step fails", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            fileWriteJsonErrors = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, "mainMinified.js", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can fail with badly formed testAdditions", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, undefined, "skdh", undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failure");
        }));
        it("can fail when package add fails", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            failPackageAdd = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can succeed with no packageManager info", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.clientPackages.moment.version).to.be.equal("^0.0.1");
            Chai.expect(uniteJsonWritten.clientPackages.moment.main).to.be.equal(undefined);
            Chai.expect(uniteJsonWritten.clientPackages.moment.includeMode).to.be.equal("both");
        }));
        it("can succeed with packageManager info", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, "app", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.clientPackages.moment.version).to.be.equal("^1.2.3");
            Chai.expect(uniteJsonWritten.clientPackages.moment.main).to.be.equal("index.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.includeMode).to.be.equal("app");
        }));
        it("can succeed with override version packageManager info", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", "4.5.6", undefined, "app", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.clientPackages.moment.version).to.be.equal("4.5.6");
            Chai.expect(uniteJsonWritten.clientPackages.moment.main).to.be.equal("index.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.includeMode).to.be.equal("app");
        }));
        it("can succeed with override main packageManager info", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, "test", "none", "main.js", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.clientPackages.moment.version).to.be.equal("^1.2.3");
            Chai.expect(uniteJsonWritten.clientPackages.moment.main).to.be.equal("main.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.includeMode).to.be.equal("test");
        }));
        it("can succeed with override main and version packageManager info", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", "4.5.6", undefined, "test", "none", "main.js", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.clientPackages.moment.version).to.be.equal("4.5.6");
            Chai.expect(uniteJsonWritten.clientPackages.moment.main).to.be.equal("main.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.includeMode).to.be.equal("test");
        }));
        it("can succeed with override mainMinified and version packageManager info", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", undefined, undefined, undefined, undefined, undefined, "mainMinified.js", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.clientPackages.moment.version).to.be.equal("^1.2.3");
            Chai.expect(uniteJsonWritten.clientPackages.moment.main).to.be.equal("index.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.mainMinified).to.be.equal("mainMinified.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.includeMode).to.be.equal("both");
        }));
        it("can succeed with all parameters", () => __awaiter(this, void 0, void 0, function* () {
            packageInfo = "{ \"version\": \"1.2.3\", \"main\": \"index.js\"}";
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("add", "moment", "7.8.9", true, "both", "none", "1.js", "2.js", "my-pkg=blah;my-pkg3=foo", false, "**/*.css", "a=b;c=d", "text=*.html;css=*.css", undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.clientPackages.moment.version).to.be.equal("7.8.9");
            Chai.expect(uniteJsonWritten.clientPackages.moment.preload).to.be.equal(true);
            Chai.expect(uniteJsonWritten.clientPackages.moment.includeMode).to.be.equal("both");
            Chai.expect(uniteJsonWritten.clientPackages.moment.main).to.be.equal("1.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.mainMinified).to.be.equal("2.js");
            Chai.expect(uniteJsonWritten.clientPackages.moment.scriptIncludeMode).to.be.equal("none");
            Chai.expect(uniteJsonWritten.clientPackages.moment.testingAdditions).to.be.deep.equal({ "my-pkg": "blah", "my-pkg3": "foo" });
            Chai.expect(uniteJsonWritten.clientPackages.moment.isPackage).to.be.equal(false);
            Chai.expect(uniteJsonWritten.clientPackages.moment.assets).to.be.equal("**/*.css");
            Chai.expect(uniteJsonWritten.clientPackages.moment.map).to.be.deep.equal({ a: "b", c: "d" });
            Chai.expect(uniteJsonWritten.clientPackages.moment.loaders).to.be.deep.equal({ text: "*.html", css: "*.css" });
        }));
    });
    describe("clientPackage remove", () => {
        it("can fail when calling with no unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("no unite.json");
        }));
        it("can fail when calling with undefined operation", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("operation");
        }));
        it("can fail when calling with undefined packageName", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("remove", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("packageName");
        }));
        it("can fail when calling with undefined packageManager", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.packageManager = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("remove", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("packageManager");
        }));
        it("can fail if package does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("remove", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("not been");
        }));
        it("can fail if package.json error", () => __awaiter(this, void 0, void 0, function* () {
            packageJsonErrors = true;
            uniteJson.clientPackages = { moment: new uniteClientPackage_1.UniteClientPackage() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("remove", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("dependencies");
        }));
        it("can fail if pipeline step fails", () => __awaiter(this, void 0, void 0, function* () {
            fileWriteJsonErrors = true;
            uniteJson.clientPackages = { moment: new uniteClientPackage_1.UniteClientPackage() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("remove", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can succeed if all ok", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.clientPackages = { moment: new uniteClientPackage_1.UniteClientPackage() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.clientPackage("remove", "moment", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
        }));
    });
    describe("buildConfiguration add", () => {
        it("can fail when calling with no unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration(undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("no unite.json");
        }));
        it("can fail when calling with undefined operation", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration(undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("operation");
        }));
        it("can fail when calling with undefined configurationName", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("add", undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("configurationName");
        }));
        it("can fail if package.json error", () => __awaiter(this, void 0, void 0, function* () {
            packageJsonErrors = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("add", "myconfig", undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("dependencies");
        }));
        it("can fail if pipeline step fails", () => __awaiter(this, void 0, void 0, function* () {
            fileWriteJsonErrors = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("add", "myconfig", undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can succeed when calling with configurationName", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("add", "myconfig", undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig.bundle).to.be.equal(false);
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig.minify).to.be.equal(false);
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig.sourcemaps).to.be.equal(true);
        }));
        it("can succeed when calling all params", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("add", "myconfig", true, true, false, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig.bundle).to.be.equal(true);
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig.minify).to.be.equal(true);
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig.sourcemaps).to.be.equal(false);
        }));
    });
    describe("buildConfiguration remove", () => {
        it("can fail when calling with no unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration(undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("no unite.json");
        }));
        it("can fail when calling with undefined operation", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration(undefined, undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("operation");
        }));
        it("can fail when calling with undefined configurationName", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("remove", undefined, undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("configurationName");
        }));
        it("can fail if package.json error", () => __awaiter(this, void 0, void 0, function* () {
            packageJsonErrors = true;
            uniteJson.buildConfigurations = { myconfig: new uniteBuildConfiguration_1.UniteBuildConfiguration() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("remove", "myconfig", undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("dependencies");
        }));
        it("can fail if pipeline step fails", () => __awaiter(this, void 0, void 0, function* () {
            fileWriteJsonErrors = true;
            uniteJson.buildConfigurations = { myconfig: new uniteBuildConfiguration_1.UniteBuildConfiguration() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("remove", "myconfig", undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can fail when configurationName does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("remove", "myconfig", undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("has not");
        }));
        it("can succeed when calling with configurationName", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.buildConfigurations = { myconfig: new uniteBuildConfiguration_1.UniteBuildConfiguration() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("remove", "myconfig", undefined, undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig).to.be.equal(undefined);
        }));
        it("can succeed when calling all params", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.buildConfigurations = { myconfig: new uniteBuildConfiguration_1.UniteBuildConfiguration() };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.buildConfiguration("remove", "myconfig", true, true, false, undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.buildConfigurations.myconfig).to.be.equal(undefined);
        }));
    });
    describe("platform add", () => {
        it("can fail when calling with no unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform(undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("no unite.json");
        }));
        it("can fail when calling with undefined operation", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform(undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("operation");
        }));
        it("can fail when calling with undefined platformName", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("add", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("platformName");
        }));
        it("can fail if package.json error", () => __awaiter(this, void 0, void 0, function* () {
            packageJsonErrors = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("add", "Web", undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("dependencies");
        }));
        it("can fail if pipeline step fails", () => __awaiter(this, void 0, void 0, function* () {
            fileWriteJsonErrors = true;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("add", "Web", undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can succeed when calling with platformName Web", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("add", "Web", undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.platforms.Web).not.to.be.equal(undefined);
        }));
        it("can succeed when calling with platformName Electron", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("add", "Electron", undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.platforms.Electron).not.to.be.equal(undefined);
        }));
    });
    describe("platform remove", () => {
        it("can fail when calling with no unite.json", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson = undefined;
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform(undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("no unite.json");
        }));
        it("can fail when calling with undefined operation", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform(undefined, undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("operation");
        }));
        it("can fail when calling with undefined platformName", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("remove", undefined, undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("platformName");
        }));
        it("can fail if package.json error", () => __awaiter(this, void 0, void 0, function* () {
            packageJsonErrors = true;
            uniteJson.platforms = { Web: {} };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("remove", "Web", undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("dependencies");
        }));
        it("can fail if pipeline step fails", () => __awaiter(this, void 0, void 0, function* () {
            fileWriteJsonErrors = true;
            uniteJson.platforms = { Web: {} };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("remove", "Web", undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can fail when platformName does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("remove", "Web", undefined);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("has not");
        }));
        it("can succeed when calling with platformName Web", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.platforms = { Web: {} };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("remove", "Web", undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.platforms.myconfig).to.be.equal(undefined);
        }));
        it("can succeed when calling with platformName Electron", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.platforms = { Electron: {} };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("remove", "Electron", undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.platforms.myconfig).to.be.equal(undefined);
        }));
        it("can succeed when calling all params", () => __awaiter(this, void 0, void 0, function* () {
            uniteJson.platforms = { Web: {} };
            const obj = new engine_1.Engine(loggerStub, fileSystemStub);
            const res = yield obj.platform("remove", "Web", undefined);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args[0][0]).to.contain("Success");
            Chai.expect(uniteJsonWritten.platforms.myconfig).to.be.equal(undefined);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
