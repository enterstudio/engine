"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for EngineVariables.
 */
const Chai = require("chai");
const uniteConfiguration_1 = require("../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../dist/engine/engineVariables");
describe("EngineVariables", () => {
    let uniteConfiguration;
    let packageJsonDependencies;
    let packageJsonDevDependencies;
    let peerDependencies;
    beforeEach(() => {
        uniteConfiguration = new uniteConfiguration_1.UniteConfiguration();
        uniteConfiguration.clientPackages = {};
        packageJsonDependencies = {};
        packageJsonDevDependencies = {};
        peerDependencies = {};
    });
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new engineVariables_1.EngineVariables();
        Chai.should().exist(obj);
    }));
    describe("toggleClientPackage", () => {
        it("can fail when there are no peer dependencies", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            try {
                obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, undefined, undefined, undefined, undefined, true);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("missing");
            }
        }));
        it("can fail when peer dependencies does not contain package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            obj.enginePackageJson = { peerDependencies };
            try {
                obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, undefined, undefined, undefined, undefined, true);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Missing");
            }
        }));
        it("can get added as a dependency contain package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, "**/*.css", undefined, undefined, undefined, true);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().exist(uniteConfiguration.clientPackages.package);
            Chai.should().exist(packageJsonDependencies.package);
            Chai.expect(uniteConfiguration.clientPackages.package.main).to.be.equal("main.js");
            Chai.expect(uniteConfiguration.clientPackages.package.mainMinified).to.be.equal("main.min.js");
            Chai.expect(uniteConfiguration.clientPackages.package.includeMode).to.be.equal("app");
            Chai.expect(uniteConfiguration.clientPackages.package.scriptIncludeMode).to.be.equal("none");
            Chai.expect(uniteConfiguration.clientPackages.package.version).to.be.equal("^1.2.3");
            Chai.expect(uniteConfiguration.clientPackages.package.preload).to.be.equal(false);
            Chai.expect(uniteConfiguration.clientPackages.package.isPackage).to.be.equal(false);
            Chai.expect(uniteConfiguration.clientPackages.package.assets).to.be.equal("**/*.css");
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().not.exist(packageJsonDevDependencies.package);
        }));
        it("can get removed as a dependency contain package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, "**/*.css", undefined, undefined, undefined, false);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().not.exist(uniteConfiguration.clientPackages.package);
            Chai.should().not.exist(packageJsonDependencies.package);
        }));
        it("can get added and removed as a dependency contain package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, "**/*.css", undefined, undefined, undefined, true);
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, "**/*.css", undefined, undefined, undefined, false);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().exist(uniteConfiguration.clientPackages.package);
            Chai.should().exist(packageJsonDependencies.package);
            Chai.expect(uniteConfiguration.clientPackages.package.main).to.be.equal("main.js");
            Chai.expect(uniteConfiguration.clientPackages.package.mainMinified).to.be.equal("main.min.js");
            Chai.expect(uniteConfiguration.clientPackages.package.includeMode).to.be.equal("app");
            Chai.expect(uniteConfiguration.clientPackages.package.scriptIncludeMode).to.be.equal("none");
            Chai.expect(uniteConfiguration.clientPackages.package.version).to.be.equal("^1.2.3");
            Chai.expect(uniteConfiguration.clientPackages.package.preload).to.be.equal(false);
            Chai.expect(uniteConfiguration.clientPackages.package.isPackage).to.be.equal(false);
            Chai.expect(uniteConfiguration.clientPackages.package.assets).to.be.equal("**/*.css");
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().not.exist(packageJsonDevDependencies.package);
        }));
    });
    describe("toggleDevDependency", () => {
        it("can fail when there are no peer dependencies", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            try {
                obj.toggleDevDependency(["package"], true);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("missing");
            }
        }));
        it("can fail when peer dependencies does not contain package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            obj.enginePackageJson = { peerDependencies };
            try {
                obj.toggleDevDependency(["package"], true);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Missing");
            }
        }));
        it("can succeed when adding a dev dependency", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleDevDependency(["package"], true);
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().exist(packageJsonDevDependencies.package);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().not.exist(uniteConfiguration.clientPackages.package);
            Chai.should().not.exist(packageJsonDependencies.package);
        }));
        it("can succeed when adding a dev dependency twice", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleDevDependency(["package"], true);
            obj.toggleDevDependency(["package"], true);
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().exist(packageJsonDevDependencies.package);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().not.exist(uniteConfiguration.clientPackages.package);
            Chai.should().not.exist(packageJsonDependencies.package);
        }));
        it("can succeed when removing a dev dependency", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleDevDependency(["package"], false);
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().not.exist(packageJsonDevDependencies.package);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().not.exist(uniteConfiguration.clientPackages.package);
            Chai.should().not.exist(packageJsonDependencies.package);
        }));
    });
    describe("buildDependencies", () => {
        it("can get removed from existing dependencies", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, "**/*.css", undefined, undefined, undefined, false);
            packageJsonDependencies.package = "blah";
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().not.exist(packageJsonDependencies.package);
        }));
        it("can get added as a app package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, "**/*.css", undefined, undefined, undefined, true);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().exist(uniteConfiguration.clientPackages.package);
            Chai.should().exist(packageJsonDependencies.package);
        }));
        it("can get added as a app package and removed from dev if it exists", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "app", "none", false, "**/*.css", undefined, undefined, undefined, true);
            obj.toggleDevDependency(["package"], true);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().exist(uniteConfiguration.clientPackages.package);
            Chai.should().exist(packageJsonDependencies.package);
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().not.exist(packageJsonDevDependencies.package);
        }));
        it("can get added as a test package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleClientPackage("package", "main.js", "main.min.js", undefined, false, "test", "none", false, "**/*.css", undefined, undefined, undefined, true);
            obj.buildDependencies(uniteConfiguration, packageJsonDependencies);
            Chai.should().exist(uniteConfiguration.clientPackages.package);
            Chai.should().not.exist(packageJsonDependencies.package);
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().exist(packageJsonDevDependencies.package);
        }));
    });
    describe("buildDevDependencies", () => {
        it("can get removed from existing dependencies", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new engineVariables_1.EngineVariables();
            peerDependencies.package = "^1.2.3";
            obj.enginePackageJson = { peerDependencies };
            obj.toggleDevDependency(["package"], false);
            packageJsonDevDependencies.package = "blah";
            obj.buildDevDependencies(packageJsonDevDependencies);
            Chai.should().not.exist(packageJsonDevDependencies.package);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
