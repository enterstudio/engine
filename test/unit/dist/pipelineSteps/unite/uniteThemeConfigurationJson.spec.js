"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for UniteThemeConfigurationJson.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const engineVariablesMeta_1 = require("../../../../../dist/engine/engineVariablesMeta");
const uniteThemeConfigurationJson_1 = require("../../../../../dist/pipelineSteps/unite/uniteThemeConfigurationJson");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("UniteThemeConfigurationJson", () => {
    let sandbox;
    let loggerStub;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new uniteThemeConfigurationJson_1.UniteThemeConfigurationJson();
        Chai.should().exist(obj);
    });
    describe("intitialise", () => {
        it("can fail when exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().throws("error");
            const obj = new uniteThemeConfigurationJson_1.UniteThemeConfigurationJson();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(engineVariablesStub.getConfiguration("UniteTheme")).to.be.equal(undefined);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can succeed when file does exist", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().onFirstCall().resolves(true);
            fileSystemMock.fileReadJson = sandbox.stub().resolves({ title: "This Is My Title", themeColor: "#112211" });
            const obj = new uniteThemeConfigurationJson_1.UniteThemeConfigurationJson();
            engineVariablesStub.meta = new engineVariablesMeta_1.EngineVariablesMeta();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("UniteTheme").themeColor).to.be.equal("#112211");
            Chai.expect(engineVariablesStub.getConfiguration("UniteTheme").title).to.be.equal("This Is My Title");
        }));
    });
    describe("configure", () => {
        it("can succeed with metadata", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().onFirstCall().resolves(false);
            const obj = new uniteThemeConfigurationJson_1.UniteThemeConfigurationJson();
            engineVariablesStub.meta = new engineVariablesMeta_1.EngineVariablesMeta();
            engineVariablesStub.meta.title = "This Is My Title";
            engineVariablesStub.meta.shortName = "MyTitle";
            engineVariablesStub.meta.description = "My application";
            engineVariablesStub.meta.keywords = ["a", "b", "c"];
            engineVariablesStub.meta.author = "Martyn Janes";
            engineVariablesStub.meta.authorEmail = "fake@unitejs.com";
            engineVariablesStub.meta.authorWebSite = "http://author.unitejs.com";
            engineVariablesStub.meta.webSite = "http://unitejs.com";
            engineVariablesStub.meta.namespace = "unitejs.com";
            engineVariablesStub.meta.organization = "UniteJS";
            engineVariablesStub.meta.copyright = "(C) 2017 UniteJS";
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const ut = engineVariablesStub.getConfiguration("UniteTheme");
            Chai.expect(ut.title).to.be.equal("This Is My Title");
            Chai.expect(ut.shortName).to.be.equal("MyTitle");
            Chai.expect(ut.metaDescription).to.be.equal("My application");
            Chai.expect(ut.metaAuthor).to.be.equal("Martyn Janes");
            Chai.expect(ut.metaAuthorEmail).to.be.equal("fake@unitejs.com");
            Chai.expect(ut.metaAuthorWebSite).to.be.equal("http://author.unitejs.com");
            Chai.expect(ut.metaKeywords).to.be.deep.equal(["a", "b", "c"]);
            Chai.expect(ut.webSite).to.be.equal("http://unitejs.com");
            Chai.expect(ut.namespace).to.be.equal("unitejs.com");
            Chai.expect(ut.organization).to.be.equal("UniteJS");
            Chai.expect(ut.copyright).to.be.equal("(C) 2017 UniteJS");
        }));
        it("can succeed with no metadata", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().onFirstCall().resolves(false);
            const obj = new uniteThemeConfigurationJson_1.UniteThemeConfigurationJson();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const ut = engineVariablesStub.getConfiguration("UniteTheme");
            Chai.expect(ut.title).to.be.equal("");
        }));
    });
    describe("finalise", () => {
        it("can fail writing", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileWriteJson").rejects("error");
            const obj = new uniteThemeConfigurationJson_1.UniteThemeConfigurationJson();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can succeed writing", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileWriteJson").resolves();
            const obj = new uniteThemeConfigurationJson_1.UniteThemeConfigurationJson();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(stub.called).to.be.equal(true);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
