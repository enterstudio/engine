"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for UniteConfigurationDirectories.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const uniteConfigurationDirectories_1 = require("../../../../../dist/pipelineSteps/unite/uniteConfigurationDirectories");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("UniteConfigurationDirectories", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.unitTestRunner = "None";
        uniteConfigurationStub.e2eTestRunner = "None";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new uniteConfigurationDirectories_1.UniteConfigurationDirectories();
        Chai.should().exist(obj);
    });
    describe("configure", () => {
        it("can setup folders with no unit test runner", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new uniteConfigurationDirectories_1.UniteConfigurationDirectories();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(uniteConfigurationStub.dirs.www.src).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.dist).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.unitTest).to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.unitTestSrc).to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.unitTestDist).to.be.equal(undefined);
        }));
        it("can setup folders with no e2e test runner", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new uniteConfigurationDirectories_1.UniteConfigurationDirectories();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(uniteConfigurationStub.dirs.www.src).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.dist).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.e2eTest).to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.e2eTestSrc).to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.e2eTestDist).to.be.equal(undefined);
        }));
        it("can succeed", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestRunner = "Karma";
            uniteConfigurationStub.e2eTestRunner = "Protractor";
            const obj = new uniteConfigurationDirectories_1.UniteConfigurationDirectories();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(uniteConfigurationStub.dirs.www.src).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.dist).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.unitTest).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.unitTestSrc).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.unitTestDist).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.e2eTest).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.e2eTestSrc).not.to.be.equal(undefined);
            Chai.expect(uniteConfigurationStub.dirs.www.e2eTestDist).not.to.be.equal(undefined);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
