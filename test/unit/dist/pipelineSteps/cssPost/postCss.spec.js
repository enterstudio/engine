"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for PostCss.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const postCssConfiguration_1 = require("../../../../../dist/configuration/models/postcss/postCssConfiguration");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const postCss_1 = require("../../../../../dist/pipelineSteps/cssPost/postCss");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("PostCss", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.cssPost = "PostCss";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
        engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new postCss_1.PostCss();
        Chai.should().exist(obj);
    }));
    describe("initialise", () => {
        it("can fail when exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileExists").throws("error");
            const obj = new postCss_1.PostCss();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can not setup the engine configuration if not PostCss", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new postCss_1.PostCss();
            uniteConfigurationStub.cssPost = "None";
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("PostCss")).to.be.equal(undefined);
        }));
        it("can setup the engine configuration", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new postCss_1.PostCss();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("PostCss")).to.be.deep.equal({
                plugins: {
                    "postcss-import": {},
                    autoprefixer: {}
                }
            });
        }));
        it("can setup the engine configuration from existing", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().onFirstCall().resolves(true);
            fileSystemMock.fileReadJson = sandbox.stub().resolves({ plugins: { "my-plugin": {} } });
            const obj = new postCss_1.PostCss();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("PostCss")).to.be.deep.equal({
                plugins: {
                    "my-plugin": {},
                    "postcss-import": {},
                    autoprefixer: {}
                }
            });
        }));
        it("can setup the engine configuration from existing but forced", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().onFirstCall().resolves(true);
            fileSystemMock.fileReadJson = sandbox.stub().resolves({ plugins: { "my-plugin": {} } });
            engineVariablesStub.force = true;
            const obj = new postCss_1.PostCss();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("PostCss")).to.be.deep.equal({
                plugins: {
                    "postcss-import": {},
                    autoprefixer: {}
                }
            });
        }));
    });
    describe("process", () => {
        it("can fail if an exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileWriteJson").throws("error");
            const obj = new postCss_1.PostCss();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can delete file if not post css", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileExists").returns(false);
            const obj = new postCss_1.PostCss();
            uniteConfigurationStub.cssPost = "None";
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(stub.called).to.be.equal(true);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies.postcss).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["postcss-import"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies.autoprefixer).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies.cssnano).to.be.equal(undefined);
        }));
        it("can write file", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new postCss_1.PostCss();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[1][0]).contains("Generating");
            const json = yield fileSystemMock.fileReadJson("./test/unit/temp/www/", ".postcssrc.json");
            Chai.expect(json.plugins).to.be.deep.equal({
                "postcss-import": {},
                autoprefixer: {}
            });
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies.postcss).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["postcss-import"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies.autoprefixer).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies.cssnano).to.be.equal("1.2.3");
        }));
        it("can combine with existing file", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const initjson = new postCssConfiguration_1.PostCssConfiguration();
            initjson.plugins = {
                "postcss-import": { extraOption: true },
                extraPlugin: { someOption: 1 }
            };
            yield fileSystemMock.fileWriteJson("./test/unit/temp/www/", ".postcssrc.json", initjson);
            const obj = new postCss_1.PostCss();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[1][0]).contains("Generating");
            const json = yield fileSystemMock.fileReadJson("./test/unit/temp/www/", ".postcssrc.json");
            Chai.expect(json.plugins).to.be.deep.equal({
                "postcss-import": { extraOption: true },
                autoprefixer: {},
                extraPlugin: { someOption: 1 }
            });
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
