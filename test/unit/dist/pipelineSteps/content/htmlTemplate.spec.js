"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for HtmlTemplate.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const htmlTemplate_1 = require("../../../../../dist/pipelineSteps/content/htmlTemplate");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("HtmlTemplate", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new htmlTemplate_1.HtmlTemplate();
        Chai.should().exist(obj);
    }));
    describe("initialise", () => {
        it("can setup the engine configuration", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new htmlTemplate_1.HtmlTemplate();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("HTMLBundle")).to.be.deep.equal({
                head: [],
                body: []
            });
            Chai.expect(engineVariablesStub.getConfiguration("HTMLNoBundle")).to.be.deep.equal({
                head: [],
                body: []
            });
        }));
    });
    describe("process", () => {
        it("can fail if an exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new htmlTemplate_1.HtmlTemplate();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can skip if file has no generated marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            yield fileSystemMock.fileWriteLines("./test/unit/temp/www/", "index-no-bundle.html", []);
            const obj = new htmlTemplate_1.HtmlTemplate();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Skipping");
        }));
        it("can write if file has a generated marker an no other additions", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            yield fileSystemMock.fileWriteLines("./test/unit/temp/www/", "index-no-bundle.html", ["Generated by UniteJS"]);
            const obj = new htmlTemplate_1.HtmlTemplate();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");
            const lines = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(14);
        }));
        it("can write if file has a generated marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            yield fileSystemMock.fileWriteLines("./test/unit/temp/www/", "index-no-bundle.html", ["Generated by UniteJS"]);
            const obj = new htmlTemplate_1.HtmlTemplate();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");
            const lines = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(16);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(7);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(11);
        }));
        it("can write with not bundled script include", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new htmlTemplate_1.HtmlTemplate();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
            engineVariablesStub.toggleClientPackage("requirejs-text", "text.js", undefined, undefined, false, "both", "notBundled", false, undefined, { text: "requirejs-text" }, undefined, true);
            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");
            const htmlBundleTemplateConfiguration = engineVariablesStub.getConfiguration("HTMLBundle");
            htmlBundleTemplateConfiguration.head.push("head3");
            htmlBundleTemplateConfiguration.body.push("body4");
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");
            const lines = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(17);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(8);
            Chai.expect(lines.findIndex(line => line.indexOf("<script") > 0)).to.be.equal(7);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(12);
            const lines2 = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-bundle.html");
            Chai.expect(lines2.length).to.be.equal(16);
            Chai.expect(lines2.findIndex(line => line.indexOf("head3") > 0)).to.be.equal(7);
            Chai.expect(lines2.findIndex(line => line.indexOf("text.js") > 0)).to.be.equal(-1);
            Chai.expect(lines2.findIndex(line => line.indexOf("body4") > 0)).to.be.equal(11);
        }));
        it("can write with bundled script include", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new htmlTemplate_1.HtmlTemplate();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
            engineVariablesStub.toggleClientPackage("requirejs-text", "text.js", "text.min.js", undefined, false, "both", "bundled", false, undefined, { text: "requirejs-text" }, undefined, true);
            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");
            const htmlBundleTemplateConfiguration = engineVariablesStub.getConfiguration("HTMLBundle");
            htmlBundleTemplateConfiguration.head.push("head3");
            htmlBundleTemplateConfiguration.body.push("body4");
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");
            const lines = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(16);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(7);
            Chai.expect(lines.findIndex(line => line.indexOf("<script") > 0)).to.be.equal(-1);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(11);
            const lines2 = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-bundle.html");
            Chai.expect(lines2.length).to.be.equal(17);
            Chai.expect(lines2.findIndex(line => line.indexOf("head3") > 0)).to.be.equal(8);
            Chai.expect(lines2.findIndex(line => line.indexOf("text.min.js") > 0)).to.be.equal(7);
            Chai.expect(lines2.findIndex(line => line.indexOf("body4") > 0)).to.be.equal(12);
        }));
        it("can write with both script include", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new htmlTemplate_1.HtmlTemplate();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
            engineVariablesStub.toggleClientPackage("requirejs-text", "text.js", "text.min.js", undefined, false, "both", "both", false, undefined, { text: "requirejs-text" }, undefined, true);
            const htmlTemplateConfiguration = engineVariablesStub.getConfiguration("HTMLNoBundle");
            htmlTemplateConfiguration.head.push("head1");
            htmlTemplateConfiguration.body.push("body2");
            const htmlBundleTemplateConfiguration = engineVariablesStub.getConfiguration("HTMLBundle");
            htmlBundleTemplateConfiguration.head.push("head3");
            htmlBundleTemplateConfiguration.body.push("body4");
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Generating");
            const lines = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-no-bundle.html");
            Chai.expect(lines.length).to.be.equal(17);
            Chai.expect(lines.findIndex(line => line.indexOf("head1") > 0)).to.be.equal(8);
            Chai.expect(lines.findIndex(line => line.indexOf("text.js") > 0)).to.be.equal(7);
            Chai.expect(lines.findIndex(line => line.indexOf("body2") > 0)).to.be.equal(12);
            const lines2 = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", "index-bundle.html");
            Chai.expect(lines2.length).to.be.equal(17);
            Chai.expect(lines2.findIndex(line => line.indexOf("head3") > 0)).to.be.equal(8);
            Chai.expect(lines2.findIndex(line => line.indexOf("text.min.js") > 0)).to.be.equal(7);
            Chai.expect(lines2.findIndex(line => line.indexOf("body4") > 0)).to.be.equal(12);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
