"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for GitIgnore.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const gitIgnore_1 = require("../../../../../dist/pipelineSteps/content/gitIgnore");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("GitIgnore", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new gitIgnore_1.GitIgnore();
        Chai.should().exist(obj);
    });
    describe("initialise", () => {
        it("can fail when exception is thrown on config", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().throws("error");
            const obj = new gitIgnore_1.GitIgnore();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(engineVariablesStub.getConfiguration("GitIgnore")).to.be.equal(undefined);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can fail when exception is thrown on ignore", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().throws("error");
            const obj = new gitIgnore_1.GitIgnore();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint")).to.be.equal(undefined);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can succeed when ignore file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().resolves(false);
            const obj = new gitIgnore_1.GitIgnore();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("GitIgnore").length).to.be.equal(0);
        }));
        it("can succeed when ignore file does exist but forced", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.force = true;
            fileSystemMock.fileExists = sandbox.stub().resolves(true);
            fileSystemMock.fileReadLines = sandbox.stub().resolves(["dist", "# Generated by UniteJS"]);
            const obj = new gitIgnore_1.GitIgnore();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("GitIgnore").length).to.be.equal(0);
        }));
        it("can succeed when ignore file does exist", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().resolves(true);
            fileSystemMock.fileReadLines = sandbox.stub().resolves(["dist", "# Generated by UniteJS"]);
            const obj = new gitIgnore_1.GitIgnore();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("GitIgnore").length).to.be.equal(1);
        }));
        it("can succeed when ignore file does exist and has blank lines", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemMock.fileExists = sandbox.stub().resolves(true);
            fileSystemMock.fileReadLines = sandbox.stub().resolves(["dist", "", "# Generated by UniteJS", ""]);
            const obj = new gitIgnore_1.GitIgnore();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("GitIgnore").length).to.be.equal(1);
        }));
    });
    describe("finalise", () => {
        it("can fail if an exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new gitIgnore_1.GitIgnore();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can skip if file has no generated marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            yield fileSystemMock.fileWriteLines("./test/unit/temp/www/", ".gitignore", []);
            const obj = new gitIgnore_1.GitIgnore();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[1][0]).contains("Skipping");
        }));
        it("can write if file has a generated marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            yield fileSystemMock.fileWriteLines("./test/unit/temp/www/", ".gitignore", ["Generated by UniteJS"]);
            const obj = new gitIgnore_1.GitIgnore();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[1][0]).contains("Writing");
            const lines = yield fileSystemMock.fileReadLines("./test/unit/temp/www/", ".gitignore");
            Chai.expect(lines.length).to.be.equal(3);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
