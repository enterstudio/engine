"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for PackageJson.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const packageConfiguration_1 = require("../../../../../dist/configuration/models/packages/packageConfiguration");
const uniteClientPackage_1 = require("../../../../../dist/configuration/models/unite/uniteClientPackage");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const packageJson_1 = require("../../../../../dist/pipelineSteps/content/packageJson");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("PackageJson", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.packageName = "test";
        uniteConfigurationStub.license = "MIT";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new packageJson_1.PackageJson();
        Chai.should().exist(obj);
    });
    describe("initialise", () => {
        it("can fail when exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileExists").throws("error");
            const obj = new packageJson_1.PackageJson();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can ignore current if force", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const initjson = new packageConfiguration_1.PackageConfiguration();
            initjson.name = "fred";
            initjson.version = "1.0.0";
            initjson.dependencies = { "my-package": "1.0.1", "a-package": "1.0.1" };
            initjson.devDependencies = { "dev-package": "2.0.2", "a-dev-package": "2.0.2" };
            initjson.engines = { "my-engine": "3.0.0" };
            yield fileSystemMock.fileWriteJson("./test/unit/temp/www/", "package.json", initjson);
            engineVariablesStub.force = true;
            const obj = new packageJson_1.PackageJson();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("PackageJson")).to.be.deep.equal({
                name: "test",
                version: "0.0.1",
                devDependencies: {},
                dependencies: {},
                engines: { node: ">=8.0.0" }
            });
        }));
        it("can setup the engine configuration", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new packageJson_1.PackageJson();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("PackageJson")).to.be.deep.equal({
                name: "test",
                version: "0.0.1",
                devDependencies: {},
                dependencies: {},
                engines: { node: ">=8.0.0" }
            });
        }));
    });
    describe("finalise", () => {
        it("can fail if an exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new packageJson_1.PackageJson();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can write file", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const obj = new packageJson_1.PackageJson();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const json = yield fileSystemMock.fileReadJson("./test/unit/temp/www/", "package.json");
            Chai.expect(json.name).to.be.equal("test");
            Chai.expect(json.version).to.be.equal("0.0.1");
            Chai.expect(json.dependencies).to.be.deep.equal({});
            Chai.expect(json.devDependencies).to.be.deep.equal({});
            Chai.expect(json.engines).to.be.deep.equal({ node: ">=8.0.0" });
        }));
        it("can combine with existing file", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            const initjson = new packageConfiguration_1.PackageConfiguration();
            initjson.name = "fred";
            initjson.version = "1.0.0";
            initjson.dependencies = { "my-package": "1.0.1", "a-package": "1.0.1" };
            initjson.devDependencies = { "dev-package": "2.0.2", "a-dev-package": "2.0.2" };
            initjson.engines = { "my-engine": "3.0.0" };
            yield fileSystemMock.fileWriteJson("./test/unit/temp/www/", "package.json", initjson);
            uniteConfigurationStub.clientPackages = {};
            uniteConfigurationStub.clientPackages.package = new uniteClientPackage_1.UniteClientPackage();
            const obj = new packageJson_1.PackageJson();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[1][0]).contains("Writing");
            const json = yield fileSystemMock.fileReadJson("./test/unit/temp/www/", "package.json");
            Chai.expect(json.name).to.be.equal("fred");
            Chai.expect(json.version).to.be.equal("1.0.0");
            Chai.expect(json.dependencies).to.be.deep.equal({ "my-package": "1.0.1", "a-package": "1.0.1" });
            Chai.expect(json.devDependencies).to.be.deep.equal({ "a-dev-package": "2.0.2", "dev-package": "2.0.2" });
            Chai.expect(json.engines).to.be.deep.equal({ "my-engine": "3.0.0", node: ">=8.0.0" });
        }));
        it("can fail removing transpiled packages", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            sandbox.stub(fileSystemMock, "directoryExists").throws();
            uniteConfigurationStub.clientPackages = {};
            uniteConfigurationStub.clientPackages.package = new uniteClientPackage_1.UniteClientPackage();
            uniteConfigurationStub.clientPackages.package.transpileAlias = "alias";
            const obj = new packageJson_1.PackageJson();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        }));
        it("can succeed if transpiled packages folder does not exist", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            sandbox.stub(fileSystemMock, "directoryExists").resolves(false);
            uniteConfigurationStub.clientPackages = {};
            uniteConfigurationStub.clientPackages.package = new uniteClientPackage_1.UniteClientPackage();
            uniteConfigurationStub.clientPackages.package.transpileAlias = "alias";
            const obj = new packageJson_1.PackageJson();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can succeed if transpiled packages folder does exist", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemMock.directoryCreate("./test/unit/temp/www/");
            sandbox.stub(fileSystemMock, "directoryExists").resolves(true);
            sandbox.stub(fileSystemMock, "directoryDelete").resolves();
            uniteConfigurationStub.clientPackages = {};
            uniteConfigurationStub.clientPackages.package = new uniteClientPackage_1.UniteClientPackage();
            uniteConfigurationStub.clientPackages.package.transpileAlias = "alias";
            const obj = new packageJson_1.PackageJson();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
