"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for MochaChai.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const mochaChai_1 = require("../../../../../dist/pipelineSteps/testFramework/mochaChai");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("MochaChai", () => {
    let sandbox;
    let loggerStub;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.unitTestFramework = "MochaChai";
        uniteConfigurationStub.e2eTestFramework = "MochaChai";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
        engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new mochaChai_1.MochaChai();
        Chai.should().exist(obj);
    });
    describe("mainCondition", () => {
        it("can be called with not matching condition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new mochaChai_1.MochaChai();
            uniteConfigurationStub.unitTestFramework = undefined;
            uniteConfigurationStub.e2eTestFramework = undefined;
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(false);
        }));
        it("can be called with matching condition unit", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new mochaChai_1.MochaChai();
            uniteConfigurationStub.unitTestFramework = undefined;
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(true);
        }));
        it("can be called with matching condition e2e", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new mochaChai_1.MochaChai();
            uniteConfigurationStub.unitTestFramework = undefined;
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(true);
        }));
    });
    describe("configure", () => {
        it("can be called with unit framework defined", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.sourceLanguage = "TypeScript";
            uniteConfigurationStub.unitTestRunner = "Karma";
            uniteConfigurationStub.e2eTestFramework = "Jasmine";
            engineVariablesStub.setConfiguration("Karma", { frameworks: [] });
            const obj = new mochaChai_1.MochaChai();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies.mocha).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["@types/mocha"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["@types/chai"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["karma-mocha"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["karma-chai"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["mochawesome-screenshots"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["wdio-mocha-framework"]).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Karma").frameworks).contains("mocha");
            Chai.expect(engineVariablesStub.getConfiguration("Protractor")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO")).to.be.equal(undefined);
        }));
        it("can be called with e2e framework defined as protractor", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestFramework = "Jasmine";
            uniteConfigurationStub.e2eTestRunner = "Protractor";
            engineVariablesStub.setConfiguration("ESLint", { env: {} });
            engineVariablesStub.setConfiguration("Protractor", { framework: "", mochaOpts: {} });
            const obj = new mochaChai_1.MochaChai();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies.mocha).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["@types/mocha"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["@types/chai"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-mocha"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-chai"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["mochawesome-screenshots"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["wdio-mocha-framework"]).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").env.mocha).to.be.equal(true);
            Chai.expect(engineVariablesStub.getConfiguration("Karma")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor").framework).to.be.equal("mocha");
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO")).to.be.equal(undefined);
        }));
        it("can be called with e2e framework defined as webdriverio", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestFramework = "MochaChai";
            uniteConfigurationStub.e2eTestRunner = "WebdriverIO";
            engineVariablesStub.setConfiguration("ESLint", { env: {} });
            engineVariablesStub.setConfiguration("WebdriverIO", { framework: "" });
            const obj = new mochaChai_1.MochaChai();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies.mocha).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["@types/mocha"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["@types/chai"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-mocha"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-chai"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["mochawesome-screenshots"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["wdio-mocha-framework"]).to.be.equal("1.2.3");
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").env.mocha).to.be.equal(true);
            Chai.expect(engineVariablesStub.getConfiguration("Karma")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO").framework).to.be.equal("mocha");
        }));
        it("can be called with no configurations with false mainCondition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new mochaChai_1.MochaChai();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {
                mocha: "1.2.3",
                "@types/mocha": "1.2.3",
                "@types/chai": "1.2.3",
                "karma-mocha": "1.2.3",
                "karma-chai": "1.2.3",
                "mochawesome-screenshots": "1.2.3",
                "wdio-mocha-framework": "1.2.3"
            };
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies.mocha).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["@types/mocha"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["@types/chai"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-mocha"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-chai"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["mochawesome-screenshots"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["wdio-mocha-framework"]).to.be.equal(undefined);
        }));
        it("can be called with configurations", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("ESLint", { env: { mocha: true } });
            engineVariablesStub.setConfiguration("Karma", { frameworks: ["mocha"] });
            engineVariablesStub.setConfiguration("Protractor", { framework: "mocha", mochaOpts: {} });
            engineVariablesStub.setConfiguration("WebdriverIO", { framework: "mocha" });
            const obj = new mochaChai_1.MochaChai();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").env.mocha).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Karma").frameworks).not.contains("mocha");
            Chai.expect(engineVariablesStub.getConfiguration("Protractor").framework).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor").mochaOpts).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO").framework).to.be.equal(undefined);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
