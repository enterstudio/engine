"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Jasmine.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const jasmine_1 = require("../../../../../dist/pipelineSteps/testFramework/jasmine");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("Jasmine", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.unitTestFramework = "Jasmine";
        uniteConfigurationStub.e2eTestFramework = "Jasmine";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
        engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new jasmine_1.Jasmine();
        Chai.should().exist(obj);
    });
    describe("influences", () => {
        it("can be called and return influences", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new jasmine_1.Jasmine();
            const res = obj.influences();
            Chai.expect(res.length).to.be.equal(6);
        }));
    });
    describe("process", () => {
        it("can be called with undefined test frameworks", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestFramework = "MochaChai";
            uniteConfigurationStub.e2eTestFramework = "MochaChai";
            const obj = new jasmine_1.Jasmine();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies["jasmine-core"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["@types/jasmine"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-jasmine"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["protractor-jasmine2-html-reporter"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["jasmine-spec-reporter"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["wdio-jasmine-framework"]).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Karma")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptStart")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptEnd")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO")).to.be.equal(undefined);
        }));
        it("can be called with unit framework defined", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.sourceLanguage = "TypeScript";
            uniteConfigurationStub.unitTestRunner = "Karma";
            uniteConfigurationStub.e2eTestFramework = "MochaChai";
            engineVariablesStub.setConfiguration("Karma", { frameworks: [] });
            const obj = new jasmine_1.Jasmine();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies["jasmine-core"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["@types/jasmine"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["karma-jasmine"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["protractor-jasmine2-html-reporter"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["jasmine-spec-reporter"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["wdio-jasmine-framework"]).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Karma").frameworks).contains("jasmine");
            Chai.expect(engineVariablesStub.getConfiguration("Protractor")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptStart")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptEnd")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO")).to.be.equal(undefined);
        }));
        it("can be called with e2e framework defined as protractor", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestFramework = "MochaChai";
            uniteConfigurationStub.e2eTestRunner = "Protractor";
            engineVariablesStub.setConfiguration("ESLint", { env: {} });
            engineVariablesStub.setConfiguration("Protractor", { framework: "", jasmineNodeOpts: {} });
            engineVariablesStub.setConfiguration("Protractor.ScriptStart", []);
            engineVariablesStub.setConfiguration("Protractor.ScriptEnd", []);
            const obj = new jasmine_1.Jasmine();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies["jasmine-core"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["@types/jasmine"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-jasmine"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["protractor-jasmine2-html-reporter"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["jasmine-spec-reporter"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["wdio-jasmine-framework"]).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").env.jasmine).to.be.equal(true);
            Chai.expect(engineVariablesStub.getConfiguration("Karma")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor").framework).to.be.equal("jasmine");
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptStart").length).to.be.equal(2);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptEnd").length).to.be.equal(14);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO")).to.be.equal(undefined);
        }));
        it("can be called with e2e framework defined as webdriverio", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestFramework = "MochaChai";
            uniteConfigurationStub.e2eTestRunner = "WebdriverIO";
            engineVariablesStub.setConfiguration("ESLint", { env: {} });
            engineVariablesStub.setConfiguration("WebdriverIO", { framework: "" });
            const obj = new jasmine_1.Jasmine();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies["jasmine-core"]).to.be.equal("1.2.3");
            Chai.expect(packageJsonDevDependencies["@types/jasmine"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["karma-jasmine"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["protractor-jasmine2-html-reporter"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["jasmine-spec-reporter"]).to.be.equal(undefined);
            Chai.expect(packageJsonDevDependencies["wdio-jasmine-framework"]).to.be.equal("1.2.3");
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").env.jasmine).to.be.equal(true);
            Chai.expect(engineVariablesStub.getConfiguration("Karma")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptStart")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor.ScriptEnd")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO").framework).to.be.equal("jasmine");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
