"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Karma.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteClientPackage_1 = require("../../../../../dist/configuration/models/unite/uniteClientPackage");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const karma_1 = require("../../../../../dist/pipelineSteps/unitTestRunner/karma");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("Karma", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.unitTestRunner = "Karma";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
        engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new karma_1.Karma();
        Chai.should().exist(obj);
    }));
    describe("intitialise", () => {
        it("can be called with mismatched runner", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestRunner = undefined;
            const obj = new karma_1.Karma();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Karma")).to.be.equal(undefined);
        }));
        it("can succeed", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new karma_1.Karma();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Karma")).not.to.be.equal(undefined);
        }));
    });
    describe("process", () => {
        it("can be called with mismatched runner", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileExists").resolves(true);
            sandbox.stub(fileSystemMock, "fileReadLines").resolves(["# Generated by UniteJS"]);
            const stub = sandbox.stub(fileSystemMock, "fileDelete").resolves(0);
            uniteConfigurationStub.unitTestRunner = undefined;
            const obj = new karma_1.Karma();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(stub.callCount).to.be.equal(1);
            const packageJsonDevDependencies = {};
            engineVariablesStub.buildDevDependencies(packageJsonDevDependencies);
            Chai.expect(packageJsonDevDependencies.karma).to.be.equal(undefined);
        }));
        it("can skip if has no marker", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileExists").resolves(true);
            sandbox.stub(fileSystemMock, "fileReadLines").resolves([]);
            const stub = sandbox.stub(fileSystemMock, "fileWriteJson").resolves();
            const obj = new karma_1.Karma();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(stub.called).to.be.equal(false);
            Chai.expect(loggerInfoSpy.args[0][0]).contains("Skipping");
        }));
        it("can succeed writing", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileWriteLines").resolves();
            const obj = new karma_1.Karma();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(stub.called).to.be.equal(true);
        }));
        it("can succeed writing with packages", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileWriteLines").resolves();
            const stub = sandbox.stub(engineVariablesStub, "getTestClientPackages");
            stub.callsFake(() => {
                const testPackage1 = new uniteClientPackage_1.UniteClientPackage();
                testPackage1.isPackage = true;
                testPackage1.includeMode = "app";
                const testPackage2 = new uniteClientPackage_1.UniteClientPackage();
                testPackage2.main = "index.js";
                testPackage2.isPackage = false;
                testPackage2.includeMode = "test";
                const testPackage3 = new uniteClientPackage_1.UniteClientPackage();
                testPackage3.main = "/dist/index.js";
                testPackage3.isPackage = false;
                testPackage3.includeMode = "both";
                const testPackage4 = new uniteClientPackage_1.UniteClientPackage();
                testPackage4.main = "index.js";
                testPackage4.isPackage = true;
                testPackage4.includeMode = "both";
                const testPackage5 = new uniteClientPackage_1.UniteClientPackage();
                testPackage5.main = "/dist/index.js";
                testPackage5.isPackage = true;
                testPackage5.includeMode = "both";
                testPackage5.assets = "assets/**/*.json";
                const testPackage6 = new uniteClientPackage_1.UniteClientPackage();
                testPackage6.isPackage = true;
                testPackage6.includeMode = "both";
                return {
                    testPackage1,
                    testPackage2,
                    testPackage3,
                    testPackage4,
                    testPackage5,
                    testPackage6
                };
            });
            const obj = new karma_1.Karma();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            const config = engineVariablesStub.getConfiguration("Karma");
            Chai.expect(config.files.length).to.be.equal(10);
            Chai.expect(config.files[1].pattern).contains("testPackage2/index.js");
            Chai.expect(config.files[2].pattern).contains("testPackage3/dist/index.js");
            Chai.expect(config.files[3].pattern).contains("testPackage4/**/*.{js,html,css}");
            Chai.expect(config.files[4].pattern).contains("testPackage5/dist/**/*.{js,html,css}");
            Chai.expect(config.files[5].pattern).contains("testPackage5/assets/**/*.json");
        }));
        it("can succeed writing with packages that have test additions", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileWriteLines").resolves();
            const stub = sandbox.stub(engineVariablesStub, "getTestClientPackages");
            stub.callsFake(() => {
                const testPackage1 = new uniteClientPackage_1.UniteClientPackage();
                testPackage1.isPackage = true;
                testPackage1.includeMode = "app";
                const testPackage2 = new uniteClientPackage_1.UniteClientPackage();
                testPackage2.main = "index.js";
                testPackage2.isPackage = false;
                testPackage2.includeMode = "test";
                testPackage2.testingAdditions = {
                    foo: "bar",
                    bar: "foo"
                };
                return {
                    testPackage1,
                    testPackage2
                };
            });
            const obj = new karma_1.Karma();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            const config = engineVariablesStub.getConfiguration("Karma");
            Chai.expect(config.files.length).to.be.equal(8);
            Chai.expect(config.files[1].pattern).contains("testPackage2/index.js");
            Chai.expect(config.files[2].pattern).contains("testPackage2/bar");
            Chai.expect(config.files[3].pattern).contains("testPackage2/foo");
        }));
        it("can succeed writing with packages that have wildcard packages", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemMock, "fileWriteLines").resolves();
            const stub = sandbox.stub(engineVariablesStub, "getTestClientPackages");
            stub.callsFake(() => {
                const testPackage1 = new uniteClientPackage_1.UniteClientPackage();
                testPackage1.isPackage = true;
                testPackage1.includeMode = "app";
                const testPackage2 = new uniteClientPackage_1.UniteClientPackage();
                testPackage2.main = "*";
                testPackage2.isPackage = false;
                testPackage2.includeMode = "test";
                return {
                    testPackage1,
                    testPackage2
                };
            });
            const obj = new karma_1.Karma();
            yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            const config = engineVariablesStub.getConfiguration("Karma");
            Chai.expect(config.files.length).to.be.equal(6);
            Chai.expect(config.files[1].pattern).contains("testPackage2/**/*.{js,html,css}");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
