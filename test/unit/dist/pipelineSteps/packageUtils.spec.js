"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for PackageUtils.
 */
const Chai = require("chai");
const child = require("child_process");
const Sinon = require("sinon");
const packageUtils_1 = require("../../../../dist/pipelineSteps/packageUtils");
describe("PackageUtils", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let childSpawnStub;
    let childSpawnProcess;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        fileSystemStub = {};
        childSpawnStub = sandbox.stub(child, "spawn");
        childSpawnProcess = {
            stdout: {},
            stderr: {}
        };
        childSpawnProcess.on = () => { };
        childSpawnProcess.stdout.on = () => { };
        childSpawnProcess.stderr.on = () => { };
        childSpawnStub.returns(childSpawnProcess);
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
    }));
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
    }));
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new packageUtils_1.PackageUtils();
        Chai.should().exist(obj);
    }));
    describe("exec", () => {
        it("can be called with no working directory", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            const isWin = /^win/.test(process.platform);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal(`package${isWin ? ".cmd" : ""}`);
            Chai.expect(data).to.be.equal("");
        }));
        it("can be called with a working directory", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemStub.pathAbsolute = () => "/someplace/foo";
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", "foo", undefined);
            Chai.expect(data).to.be.equal("");
            const isWin = /^win/.test(process.platform);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal(`package${isWin ? ".cmd" : ""}`);
            Chai.expect(childSpawnStub.args[0][2].cwd).to.be.equal("/someplace/foo");
        }));
        it("can be called with a working directory and args", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemStub.pathAbsolute = () => "/someplace/foo";
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", "foo", ["arg1", "arg2"]);
            Chai.expect(data).to.be.equal("");
            const isWin = /^win/.test(process.platform);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal(`package${isWin ? ".cmd" : ""}`);
            Chai.expect(childSpawnStub.args[0][1]).to.contain("arg1");
            Chai.expect(childSpawnStub.args[0][1]).to.contain("arg2");
            Chai.expect(childSpawnStub.args[0][2].cwd).to.be.equal("/someplace/foo");
        }));
        it("can be called on non windows platform", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            sandbox.stub(process);
            Object.defineProperty(process, "platform", { value: "osx" });
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal("package");
            Chai.expect(data).to.be.equal("");
        }));
        it("can be called on windows platform", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            sandbox.stub(process);
            Object.defineProperty(process, "platform", { value: "win" });
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal("package.cmd");
            Chai.expect(data).to.be.equal("");
        }));
        it("can be called and exit with code 1", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(1);
                }
            };
            try {
                yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            }
            catch (err) {
                Chai.expect(err).to.be.equal(1);
            }
        }));
        it("can be called and return data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("thisisdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
        }));
        it("can be called with undefined data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb(undefined);
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("isdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
        }));
        it("can be called and had error and other data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stderr.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("error");
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("thisisdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
            Chai.expect(loggerInfoSpy.args[3][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[4][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[5][0]).to.be.equal("error");
        }));
        it("can be called and had undefined error and other data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stderr.on = (name, cb) => {
                cb(undefined);
                cb("is");
                cb("error");
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("thisisdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
            Chai.expect(loggerInfoSpy.args[3][0]).to.be.equal("");
            Chai.expect(loggerInfoSpy.args[4][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[5][0]).to.be.equal("error");
        }));
        it("can fail with spawn error", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "error") {
                    cb("error");
                }
            };
            try {
                yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            }
            catch (err) {
                Chai.expect(err).to.contain("error");
            }
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9zcmMvcGlwZWxpbmVTdGVwcy9wYWNrYWdlVXRpbHMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0dBRUc7QUFDSCw2QkFBNkI7QUFDN0IsdUNBQXVDO0FBQ3ZDLCtCQUErQjtBQUcvQiw4RUFBMkU7QUFFM0UsUUFBUSxDQUFDLGNBQWMsRUFBRTtJQUNyQixJQUFJLE9BQTJCLENBQUM7SUFDaEMsSUFBSSxVQUFtQixDQUFDO0lBQ3hCLElBQUksY0FBMkIsQ0FBQztJQUNoQyxJQUFJLGFBQTZCLENBQUM7SUFDbEMsSUFBSSxjQUE4QixDQUFDO0lBQ25DLElBQUksY0FBK0IsQ0FBQztJQUNwQyxJQUFJLGlCQUFzQixDQUFDO0lBRTNCLFVBQVUsQ0FBQztRQUNQLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pDLFVBQVUsR0FBWSxFQUFFLENBQUM7UUFDekIsVUFBVSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQztRQUM1QixVQUFVLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBRTdCLGNBQWMsR0FBZ0IsRUFBRSxDQUFDO1FBRWpDLGNBQWMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU5QyxpQkFBaUIsR0FBRztZQUNoQixNQUFNLEVBQUUsRUFBRTtZQUNWLE1BQU0sRUFBRSxFQUFFO1NBQ2IsQ0FBQztRQUNGLGlCQUFpQixDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNqQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFFeEMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRTFDLGFBQWEsR0FB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QyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUEsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHNEQUFzRCxFQUFFO1lBQ3ZELGlCQUFpQixDQUFDLEVBQUUsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFPO2dCQUN6QyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMs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LENBQUEsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJwaXBlbGluZVN0ZXBzL3BhY2thZ2VVdGlscy5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0cyBmb3IgUGFja2FnZVV0aWxzLlxuICovXG5pbXBvcnQgKiBhcyBDaGFpIGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgKiBhcyBjaGlsZCBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0ICogYXMgU2lub24gZnJvbSBcInNpbm9uXCI7XG5pbXBvcnQgeyBJRmlsZVN5c3RlbSB9IGZyb20gXCJ1bml0ZWpzLWZyYW1ld29yay9kaXN0L2ludGVyZmFjZXMvSUZpbGVTeXN0ZW1cIjtcbmltcG9ydCB7IElMb2dnZXIgfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9pbnRlcmZhY2VzL0lMb2dnZXJcIjtcbmltcG9ydCB7IFBhY2thZ2VVdGlscyB9IGZyb20gXCIuLi8uLi8uLi8uLi9kaXN0L3BpcGVsaW5lU3RlcHMvcGFja2FnZVV0aWxzXCI7XG5cbmRlc2NyaWJlKFwiUGFja2FnZVV0aWxzXCIsICgpID0+IHtcbiAgICBsZXQgc2FuZGJveDogU2lub24uU2lub25TYW5kYm94O1xuICAgIGxldCBsb2dnZXJTdHViOiBJTG9nZ2VyO1xuICAgIGxldCBmaWxlU3lzdGVtU3R1YjogSUZpbGVTeXN0ZW07XG4gICAgbGV0IGxvZ2dlckluZm9TcHk6IFNpbm9uLlNpbm9uU3B5O1xuICAgIGxldCBsb2dnZXJFcnJvclNweTogU2lub24uU2lub25TcHk7XG4gICAgbGV0IGNoaWxkU3Bhd25TdHViOiBTaW5vbi5TaW5vblN0dWI7XG4gICAgbGV0IGNoaWxkU3Bhd25Qcm9jZXNzOiBhbnk7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgICAgc2FuZGJveCA9IFNpbm9uLnNhbmRib3guY3JlYXRlKCk7XG4gICAgICAgIGxvZ2dlclN0dWIgPSA8SUxvZ2dlcj57fTtcbiAgICAgICAgbG9nZ2VyU3R1Yi5pbmZvID0gKCkgPT4geyB9O1xuICAgICAgICBsb2dnZXJTdHViLmVycm9yID0gKCkgPT4geyB9O1xuXG4gICAgICAgIGZpbGVTeXN0ZW1TdHViID0gPElGaWxlU3lzdGVtPnt9O1xuXG4gICAgICAgIGNoaWxkU3Bhd25TdHViID0gc2FuZGJveC5zdHViKGNoaWxkLCBcInNwYXduXCIpO1xuXG4gICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzID0ge1xuICAgICAgICAgICAgc3Rkb3V0OiB7fSxcbiAgICAgICAgICAgIHN0ZGVycjoge31cbiAgICAgICAgfTtcbiAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Mub24gPSAoKSA9PiB7IH07XG4gICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzLnN0ZG91dC5vbiA9ICgpID0+IHsgfTtcbiAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Muc3RkZXJyLm9uID0gKCkgPT4geyB9O1xuXG4gICAgICAgIGNoaWxkU3Bhd25TdHViLnJldHVybnMoY2hpbGRTcGF3blByb2Nlc3MpO1xuXG4gICAgICAgIGxvZ2dlckluZm9TcHkgPSBzYW5kYm94LnNweShsb2dnZXJTdHViLCBcImluZm9cIik7XG4gICAgICAgIGxvZ2dlckVycm9yU3B5ID0gc2FuZGJveC5zcHkobG9nZ2VyU3R1YiwgXCJlcnJvclwiKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICAgIHNhbmRib3gucmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJjYW4gYmUgY3JlYXRlZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IG5ldyBQYWNrYWdlVXRpbHMoKTtcbiAgICAgICAgQ2hhaS5zaG91bGQoKS5leGlzdChvYmopO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJleGVjXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJjYW4gYmUgY2FsbGVkIHdpdGggbm8gd29ya2luZyBkaXJlY3RvcnlcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Mub24gPSAobmFtZTogc3RyaW5nLCBjYjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiY2xvc2VcIikge1xuICAgICAgICAgICAgICAgICAgICBjYigwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgUGFja2FnZVV0aWxzLmV4ZWMobG9nZ2VyU3R1YiwgZmlsZVN5c3RlbVN0dWIsIFwicGFja2FnZVwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBjb25zdCBpc1dpbiA9IC9ed2luLy50ZXN0KHByb2Nlc3MucGxhdGZvcm0pO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoY2hpbGRTcGF3blN0dWIuYXJnc1swXVswXSkudG8uYmUuZXF1YWwoYHBhY2thZ2Uke2lzV2luID8gXCIuY21kXCIgOiBcIlwifWApO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoZGF0YSkudG8uYmUuZXF1YWwoXCJcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGNhbGxlZCB3aXRoIGEgd29ya2luZyBkaXJlY3RvcnlcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZmlsZVN5c3RlbVN0dWIucGF0aEFic29sdXRlID0gKCkgPT4gXCIvc29tZXBsYWNlL2Zvb1wiO1xuICAgICAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Mub24gPSAobmFtZTogc3RyaW5nLCBjYjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiY2xvc2VcIikge1xuICAgICAgICAgICAgICAgICAgICBjYigwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgUGFja2FnZVV0aWxzLmV4ZWMobG9nZ2VyU3R1YiwgZmlsZVN5c3RlbVN0dWIsIFwicGFja2FnZVwiLCBcImZvb1wiLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoZGF0YSkudG8uYmUuZXF1YWwoXCJcIik7XG4gICAgICAgICAgICBjb25zdCBpc1dpbiA9IC9ed2luLy50ZXN0KHByb2Nlc3MucGxhdGZvcm0pO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoY2hpbGRTcGF3blN0dWIuYXJnc1swXVswXSkudG8uYmUuZXF1YWwoYHBhY2thZ2Uke2lzV2luID8gXCIuY21kXCIgOiBcIlwifWApO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoY2hpbGRTcGF3blN0dWIuYXJnc1swXVsyXS5jd2QpLnRvLmJlLmVxdWFsKFwiL3NvbWVwbGFjZS9mb29cIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGNhbGxlZCB3aXRoIGEgd29ya2luZyBkaXJlY3RvcnkgYW5kIGFyZ3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZmlsZVN5c3RlbVN0dWIucGF0aEFic29sdXRlID0gKCkgPT4gXCIvc29tZXBsYWNlL2Zvb1wiO1xuICAgICAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Mub24gPSAobmFtZTogc3RyaW5nLCBjYjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiY2xvc2VcIikge1xuICAgICAgICAgICAgICAgICAgICBjYigwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgUGFja2FnZVV0aWxzLmV4ZWMobG9nZ2VyU3R1YiwgZmlsZVN5c3RlbVN0dWIsIFwicGFja2FnZVwiLCBcImZvb1wiLCBbXCJhcmcxXCIsIFwiYXJnMlwiXSk7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChkYXRhKS50by5iZS5lcXVhbChcIlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGlzV2luID0gL153aW4vLnRlc3QocHJvY2Vzcy5wbGF0Zm9ybSk7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChjaGlsZFNwYXduU3R1Yi5hcmdzWzBdWzBdKS50by5iZS5lcXVhbChgcGFja2FnZSR7aXNXaW4gPyBcIi5jbWRcIiA6IFwiXCJ9YCk7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChjaGlsZFNwYXduU3R1Yi5hcmdzWzBdWzFdKS50by5jb250YWluKFwiYXJnMVwiKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGNoaWxkU3Bhd25TdHViLmFyZ3NbMF1bMV0pLnRvLmNvbnRhaW4oXCJhcmcyXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoY2hpbGRTcGF3blN0dWIuYXJnc1swXVsyXS5jd2QpLnRvLmJlLmVxdWFsKFwiL3NvbWVwbGFjZS9mb29cIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGNhbGxlZCBvbiBub24gd2luZG93cyBwbGF0Zm9ybVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjaGlsZFNwYXduUHJvY2Vzcy5vbiA9IChuYW1lOiBzdHJpbmcsIGNiOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJjbG9zZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNhbmRib3guc3R1Yihwcm9jZXNzKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9jZXNzLCBcInBsYXRmb3JtXCIsIHsgdmFsdWU6IFwib3N4XCIgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBQYWNrYWdlVXRpbHMuZXhlYyhsb2dnZXJTdHViLCBmaWxlU3lzdGVtU3R1YiwgXCJwYWNrYWdlXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGNoaWxkU3Bhd25TdHViLmFyZ3NbMF1bMF0pLnRvLmJlLmVxdWFsKFwicGFja2FnZVwiKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGRhdGEpLnRvLmJlLmVxdWFsKFwiXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBiZSBjYWxsZWQgb24gd2luZG93cyBwbGF0Zm9ybVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjaGlsZFNwYXduUHJvY2Vzcy5vbiA9IChuYW1lOiBzdHJpbmcsIGNiOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJjbG9zZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNhbmRib3guc3R1Yihwcm9jZXNzKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9jZXNzLCBcInBsYXRmb3JtXCIsIHsgdmFsdWU6IFwid2luXCIgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBQYWNrYWdlVXRpbHMuZXhlYyhsb2dnZXJTdHViLCBmaWxlU3lzdGVtU3R1YiwgXCJwYWNrYWdlXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGNoaWxkU3Bhd25TdHViLmFyZ3NbMF1bMF0pLnRvLmJlLmVxdWFsKFwicGFja2FnZS5jbWRcIik7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChkYXRhKS50by5iZS5lcXVhbChcIlwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gYmUgY2FsbGVkIGFuZCBleGl0IHdpdGggY29kZSAxXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzLm9uID0gKG5hbWU6IHN0cmluZywgY2I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBcImNsb3NlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBQYWNrYWdlVXRpbHMuZXhlYyhsb2dnZXJTdHViLCBmaWxlU3lzdGVtU3R1YiwgXCJwYWNrYWdlXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIENoYWkuZXhwZWN0KGVycikudG8uYmUuZXF1YWwoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGNhbGxlZCBhbmQgcmV0dXJuIGRhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Mub24gPSAobmFtZTogc3RyaW5nLCBjYjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiY2xvc2VcIikge1xuICAgICAgICAgICAgICAgICAgICBjYigwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Muc3Rkb3V0Lm9uID0gKG5hbWU6IHN0cmluZywgY2I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGNiKFwidGhpc1wiKTtcbiAgICAgICAgICAgICAgICBjYihcImlzXCIpO1xuICAgICAgICAgICAgICAgIGNiKFwiZGF0YVwiKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBQYWNrYWdlVXRpbHMuZXhlYyhsb2dnZXJTdHViLCBmaWxlU3lzdGVtU3R1YiwgXCJwYWNrYWdlXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGRhdGEpLnRvLmJlLmVxdWFsKFwidGhpc2lzZGF0YVwiKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGxvZ2dlckluZm9TcHkuYXJnc1swXVswXSkudG8uYmUuZXF1YWwoXCJ0aGlzXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzFdWzBdKS50by5iZS5lcXVhbChcImlzXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzJdWzBdKS50by5iZS5lcXVhbChcImRhdGFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGNhbGxlZCB3aXRoIHVuZGVmaW5lZCBkYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzLm9uID0gKG5hbWU6IHN0cmluZywgY2I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBcImNsb3NlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzLnN0ZG91dC5vbiA9IChuYW1lOiBzdHJpbmcsIGNiOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBjYih1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIGNiKFwiaXNcIik7XG4gICAgICAgICAgICAgICAgY2IoXCJkYXRhXCIpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IFBhY2thZ2VVdGlscy5leGVjKGxvZ2dlclN0dWIsIGZpbGVTeXN0ZW1TdHViLCBcInBhY2thZ2VcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoZGF0YSkudG8uYmUuZXF1YWwoXCJpc2RhdGFcIik7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChsb2dnZXJJbmZvU3B5LmFyZ3NbMF1bMF0pLnRvLmJlLmVxdWFsKFwiXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzFdWzBdKS50by5iZS5lcXVhbChcImlzXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzJdWzBdKS50by5iZS5lcXVhbChcImRhdGFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGNhbGxlZCBhbmQgaGFkIGVycm9yIGFuZCBvdGhlciBkYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzLm9uID0gKG5hbWU6IHN0cmluZywgY2I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBcImNsb3NlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzLnN0ZGVyci5vbiA9IChuYW1lOiBzdHJpbmcsIGNiOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBjYihcInRoaXNcIik7XG4gICAgICAgICAgICAgICAgY2IoXCJpc1wiKTtcbiAgICAgICAgICAgICAgICBjYihcImVycm9yXCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoaWxkU3Bhd25Qcm9jZXNzLnN0ZG91dC5vbiA9IChuYW1lOiBzdHJpbmcsIGNiOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBjYihcInRoaXNcIik7XG4gICAgICAgICAgICAgICAgY2IoXCJpc1wiKTtcbiAgICAgICAgICAgICAgICBjYihcImRhdGFcIik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgUGFja2FnZVV0aWxzLmV4ZWMobG9nZ2VyU3R1YiwgZmlsZVN5c3RlbVN0dWIsIFwicGFja2FnZVwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChkYXRhKS50by5iZS5lcXVhbChcInRoaXNpc2RhdGFcIik7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChsb2dnZXJJbmZvU3B5LmFyZ3NbMF1bMF0pLnRvLmJlLmVxdWFsKFwidGhpc1wiKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGxvZ2dlckluZm9TcHkuYXJnc1sxXVswXSkudG8uYmUuZXF1YWwoXCJpc1wiKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGxvZ2dlckluZm9TcHkuYXJnc1syXVswXSkudG8uYmUuZXF1YWwoXCJkYXRhXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzNdWzBdKS50by5iZS5lcXVhbChcInRoaXNcIik7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChsb2dnZXJJbmZvU3B5LmFyZ3NbNF1bMF0pLnRvLmJlLmVxdWFsKFwiaXNcIik7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChsb2dnZXJJbmZvU3B5LmFyZ3NbNV1bMF0pLnRvLmJlLmVxdWFsKFwiZXJyb3JcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGJlIGNhbGxlZCBhbmQgaGFkIHVuZGVmaW5lZCBlcnJvciBhbmQgb3RoZXIgZGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjaGlsZFNwYXduUHJvY2Vzcy5vbiA9IChuYW1lOiBzdHJpbmcsIGNiOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJjbG9zZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGlsZFNwYXduUHJvY2Vzcy5zdGRlcnIub24gPSAobmFtZTogc3RyaW5nLCBjYjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY2IodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBjYihcImlzXCIpO1xuICAgICAgICAgICAgICAgIGNiKFwiZXJyb3JcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Muc3Rkb3V0Lm9uID0gKG5hbWU6IHN0cmluZywgY2I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGNiKFwidGhpc1wiKTtcbiAgICAgICAgICAgICAgICBjYihcImlzXCIpO1xuICAgICAgICAgICAgICAgIGNiKFwiZGF0YVwiKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBQYWNrYWdlVXRpbHMuZXhlYyhsb2dnZXJTdHViLCBmaWxlU3lzdGVtU3R1YiwgXCJwYWNrYWdlXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGRhdGEpLnRvLmJlLmVxdWFsKFwidGhpc2lzZGF0YVwiKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGxvZ2dlckluZm9TcHkuYXJnc1swXVswXSkudG8uYmUuZXF1YWwoXCJ0aGlzXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzFdWzBdKS50by5iZS5lcXVhbChcImlzXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzJdWzBdKS50by5iZS5lcXVhbChcImRhdGFcIik7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChsb2dnZXJJbmZvU3B5LmFyZ3NbM11bMF0pLnRvLmJlLmVxdWFsKFwiXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzRdWzBdKS50by5iZS5lcXVhbChcImlzXCIpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QobG9nZ2VySW5mb1NweS5hcmdzWzVdWzBdKS50by5iZS5lcXVhbChcImVycm9yXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBmYWlsIHdpdGggc3Bhd24gZXJyb3JcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY2hpbGRTcGF3blByb2Nlc3Mub24gPSAobmFtZTogc3RyaW5nLCBjYjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgICAgICAgICBjYihcImVycm9yXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgUGFja2FnZVV0aWxzLmV4ZWMobG9nZ2VyU3R1YiwgZmlsZVN5c3RlbVN0dWIsIFwicGFja2FnZVwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBDaGFpLmV4cGVjdChlcnIpLnRvLmNvbnRhaW4oXCJlcnJvclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
