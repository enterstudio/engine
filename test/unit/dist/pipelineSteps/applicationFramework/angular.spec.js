"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Angular.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const angular_1 = require("../../../../../dist/pipelineSteps/applicationFramework/angular");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("Angular", () => {
    let sandbox;
    let loggerStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.applicationFramework = "Angular";
        uniteConfigurationStub.moduleType = "AMD";
        uniteConfigurationStub.bundler = "Webpack";
        uniteConfigurationStub.unitTestRunner = "Karma";
        uniteConfigurationStub.unitTestFramework = "Jasmine";
        uniteConfigurationStub.e2eTestRunner = "Protractor";
        uniteConfigurationStub.e2eTestFramework = "Jasmine";
        uniteConfigurationStub.sourceLanguage = "JavaScript";
        uniteConfigurationStub.linter = "ESLint";
        uniteConfigurationStub.cssPre = "Css";
        uniteConfigurationStub.cssPost = "None";
        uniteConfigurationStub.clientPackages = {};
        uniteConfigurationStub.sourceExtensions = ["js"];
        uniteConfigurationStub.viewExtensions = [];
        uniteConfigurationStub.styleExtension = "css";
        uniteConfigurationStub.notBundledLoader = "rjs";
        uniteConfigurationStub.bundledLoader = "rjs";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.engineAssetsFolder = "./assets/";
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
        engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
        engineVariablesStub.setConfiguration("Protractor", { plugins: [] });
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new angular_1.Angular();
        Chai.should().exist(obj);
    });
    describe("influences", () => {
        it("can be called and return influences", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = obj.influences();
            Chai.expect(res.length).to.be.equal(5);
        }));
    });
    describe("initialise", () => {
        it("can be called with application framework not matching", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            uniteConfigurationStub.applicationFramework = "PlainApp";
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called with application framework matching but failing bundler", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            uniteConfigurationStub.bundler = "RequireJS";
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("not currently support");
            Chai.expect(uniteConfigurationStub.viewExtensions.length).to.be.equal(0);
        }));
        it("can be called with application framework matching and working bundler", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(uniteConfigurationStub.viewExtensions.length).to.be.equal(1);
        }));
    });
    describe("process", () => {
        it("can be called with application framework not matching", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("Babel", { plugins: [] });
            engineVariablesStub.setConfiguration("ESLint", { parser: "espree" });
            engineVariablesStub.setConfiguration("TypeScript", { compilerOptions: {} });
            const obj = new angular_1.Angular();
            uniteConfigurationStub.applicationFramework = "PlainApp";
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Babel").plugins.length).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").parser).to.be.equal("espree");
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript").compilerOptions.experimentalDecorators).to.be.equal(undefined);
        }));
        it("can be called with application framework matching javascript", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("Babel", { plugins: [] });
            engineVariablesStub.setConfiguration("ESLint", { parser: "espree" });
            const obj = new angular_1.Angular();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Babel").plugins.length).to.be.equal(1);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").parser).to.be.equal("babel-eslint");
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript")).to.be.equal(undefined);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can be called with application framework matching typescript", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("TypeScript", { compilerOptions: {} });
            uniteConfigurationStub.sourceLanguage = "TypeScript";
            uniteConfigurationStub.sourceExtensions = ["ts"];
            const obj = new angular_1.Angular();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Babel")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript").compilerOptions.experimentalDecorators).to.be.equal(true);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.ts");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can be called with application framework matching and mocha framework", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("Babel", { plugins: [] });
            engineVariablesStub.setConfiguration("ESLint", { parser: "espree" });
            engineVariablesStub.setConfiguration("TypeScript", { compilerOptions: {} });
            uniteConfigurationStub.unitTestFramework = "MochaChai";
            const obj = new angular_1.Angular();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Babel").plugins.length).to.be.equal(1);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").parser).to.be.equal("babel-eslint");
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript").compilerOptions.experimentalDecorators).to.be.equal(true);
        }));
        it("can fail with no source", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadBinary");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("js")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadBinary(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no e2e tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadBinary");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("spec.js")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadBinary(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/e2e/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no shared unit tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadBinary");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("spec.js")
                    && directoryName.indexOf("unit") >= 0) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadBinary(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/e2e/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "bootstrapper.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no custom unit tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadBinary");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("app.module.spec.js")
                    && directoryName.indexOf("unit") >= 0) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadBinary(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.process(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "bootstrapper.spec.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "app.module.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
