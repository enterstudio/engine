"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Template Helper
 */
const Chai = require("chai");
const templateHelper_1 = require("../../../../dist/helpers/templateHelper");
describe("TemplateHelper", () => {
    describe("generateSubstitutions", () => {
        it("can be called with undefined string", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions(undefined, undefined);
            Chai.expect(res).to.be.deep.equal({});
        }));
        it("can be called with an empty string", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "");
            Chai.expect(res).to.be.deep.equal({});
        }));
        it("can be called with an no alpha num string", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "!Â£$%^&");
            Chai.expect(res).to.be.deep.equal({});
        }));
        it("can be called with a single lower case character", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "a");
            Chai.expect(res).to.be.deep.equal({
                PRE: "a",
                PRE_SNAKE: "a",
                PRE_CAMEL: "a",
                PRE_PASCAL: "A",
                PRE_HUMAN: "A"
            });
        }));
        it("can be called with a single upper case character", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "A");
            Chai.expect(res).to.be.deep.equal({
                PRE: "A",
                PRE_SNAKE: "a",
                PRE_CAMEL: "a",
                PRE_PASCAL: "A",
                PRE_HUMAN: "A"
            });
        }));
        it("can be called with a single whitespace character", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", " ");
            Chai.expect(res).to.be.deep.equal({});
        }));
        it("can be called with a single word lower case", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "ape");
            Chai.expect(res).to.be.deep.equal({
                PRE: "ape",
                PRE_SNAKE: "ape",
                PRE_CAMEL: "ape",
                PRE_PASCAL: "Ape",
                PRE_HUMAN: "Ape"
            });
        }));
        it("can be called with a single word UPPER case", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "APE");
            Chai.expect(res).to.be.deep.equal({
                PRE: "APE",
                PRE_SNAKE: "ape",
                PRE_CAMEL: "aPE",
                PRE_PASCAL: "APE",
                PRE_HUMAN: "APE"
            });
        }));
        it("can be called with a multiple words lower case", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "great ape");
            Chai.expect(res).to.be.deep.equal({
                PRE: "great ape",
                PRE_SNAKE: "great-ape",
                PRE_CAMEL: "greatApe",
                PRE_PASCAL: "GreatApe",
                PRE_HUMAN: "Great Ape"
            });
        }));
        it("can be called with a multiple words title cased", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "Great Ape");
            Chai.expect(res).to.be.deep.equal({
                PRE: "Great Ape",
                PRE_SNAKE: "great-ape",
                PRE_CAMEL: "greatApe",
                PRE_PASCAL: "GreatApe",
                PRE_HUMAN: "Great Ape"
            });
        }));
        it("can be called with a multiple words camel cased", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "GreatApe");
            Chai.expect(res).to.be.deep.equal({
                PRE: "GreatApe",
                PRE_SNAKE: "great-ape",
                PRE_CAMEL: "greatApe",
                PRE_PASCAL: "GreatApe",
                PRE_HUMAN: "Great Ape"
            });
        }));
        it("can be called with a multiple words snake cased", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "great-ape");
            Chai.expect(res).to.be.deep.equal({
                PRE: "great-ape",
                PRE_SNAKE: "great-ape",
                PRE_CAMEL: "greatApe",
                PRE_PASCAL: "GreatApe",
                PRE_HUMAN: "Great Ape"
            });
        }));
        it("can be called with a multiple word and multiple separators", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.generateSubstitutions("PRE", "great     ape");
            Chai.expect(res).to.be.deep.equal({
                PRE: "great ape",
                PRE_SNAKE: "great-ape",
                PRE_CAMEL: "greatApe",
                PRE_PASCAL: "GreatApe",
                PRE_HUMAN: "Great Ape"
            });
        }));
    });
    describe("replaceSubstitutions", () => {
        it("can be called with undefined string", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.replaceSubstitutions(undefined, undefined);
            Chai.expect(res).to.be.equal(undefined);
        }));
        it("can be called with undefined string and defined substitutions", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.replaceSubstitutions({
                PRE_NAME: "aaa"
            }, undefined);
            Chai.expect(res).to.be.equal(undefined);
        }));
        it("can be called with defined string with no template matches and defined substitutions", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.replaceSubstitutions({
                PRE_NAME: "aaa"
            }, "blah");
            Chai.expect(res).to.be.equal("blah");
        }));
        it("can be called with defined string and defined substitutions", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.replaceSubstitutions({
                PRE_NAME: "aaa"
            }, "blah {PRE_NAME} poo");
            Chai.expect(res).to.be.equal("blah aaa poo");
        }));
        it("can be called with defined string with muitple matches and defined substitutions", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.replaceSubstitutions({
                PRE_NAME: "aaa"
            }, "blah {PRE_NAME} poo {PRE_NAME}");
            Chai.expect(res).to.be.equal("blah aaa poo aaa");
        }));
        it("can be called with defined string with muitple matches and multiple substitutions", () => __awaiter(this, void 0, void 0, function* () {
            const res = templateHelper_1.TemplateHelper.replaceSubstitutions({
                PRE_NAME: "aaa",
                POST_NAME: "bbb"
            }, "blah {PRE_NAME} poo {PRE_NAME} {POST_NAME}");
            Chai.expect(res).to.be.equal("blah aaa poo aaa bbb");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
